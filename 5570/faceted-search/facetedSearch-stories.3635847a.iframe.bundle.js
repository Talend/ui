(self.webpackChunk_talend_react_faceted_search=self.webpackChunk_talend_react_faceted_search||[]).push([[251],{"./stories/facetedSearch.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Advanced:()=>Advanced,BasicSearchInABadgeWithALotOfValues:()=>BasicSearchInABadgeWithALotOfValues,BasicSearchWithAnEmptyLabelBadge:()=>BasicSearchWithAnEmptyLabelBadge,BasicSearchWithBadgeWithAllSelector:()=>BasicSearchWithBadgeWithAllSelector,BasicSearchWithBadgeWithVeryLongName:()=>BasicSearchWithBadgeWithVeryLongName,BasicSearchWithBadgesCategories:()=>BasicSearchWithBadgesCategories,BasicSearchWithLotOfBadgeDefinitions:()=>BasicSearchWithLotOfBadgeDefinitions,BasicSearchWithSliderPopin:()=>BasicSearchWithSliderPopin,Colored:()=>Colored,DatePicker:()=>DatePicker,Default:()=>Default,Initialized:()=>Initialized,InitializedWithABadgeWhichIsNotVisibleInTheList:()=>InitializedWithABadgeWhichIsNotVisibleInTheList,ReadOnly:()=>ReadOnly,WithExternalState:()=>WithExternalState,WithQuickSearchAsynchronousSuggestions:()=>WithQuickSearchAsynchronousSuggestions,WithQuickSearchFilter:()=>WithQuickSearchFilter,WithQuickSearchFilterCustomizableInputTriggerLength:()=>WithQuickSearchFilterCustomizableInputTriggerLength,WithSpecialChars:()=>WithSpecialChars,WithoutLabelOrOperatorButton:()=>WithoutLabelOrOperatorButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>facetedSearch_stories});var react=__webpack_require__("../../node_modules/react/index.js"),es=__webpack_require__("../../node_modules/react-i18next/dist/es/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),testing_library_dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),src=__webpack_require__("./src/index.js"),BadgesGenerator=__webpack_require__("./src/components/BadgesGenerator/index.js"),badgeFaceted_context=__webpack_require__("./src/components/context/badgeFaceted.context.js"),badge_dictionary=__webpack_require__("./src/dictionary/badge.dictionary.js");const badgeName={properties:{attribute:"name",initialOperatorOpened:!0,initialValueOpened:!1,label:"Name",operator:{},operators:[],type:"text",placeholder:"Enter a dataset name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-name"}},badgeConnectionName={properties:{attribute:"connectionName",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection name",operator:{},operators:[],type:"text",placeholder:"Enter a connection name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-connection-name"}},badgeAuthor={properties:{attribute:"Author",initialOperatorOpened:!0,initialValueOpened:!1,label:"Author",operator:{},operators:[],type:"text",placeholder:"Enter an author name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-author"}},badgeConnectionType={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in","notIn"],"data-feature":"faceted-badge-connection-type"}},badgeConnectionTypeAllSelector={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in","notIn"],allSelector:!0}},badgePrice={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"Price",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"],"data-feature":"faceted-badge-price"}},badgeValid={properties:{attribute:"valid",initialOperatorOpened:!0,initialValueOpened:!1,label:"Valid",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"valid"},unit:"%",defaultValue:50},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},badgeTags={properties:{attribute:"tags",initialOperatorOpened:!0,initialValueOpened:!1,label:"Tags",operator:{},operators:[],type:"checkbox"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",operators:["in","notIn"],"data-feature":"faceted-badge-tags"}},badgeWithVeryLongName={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"helloverybeautifullworldhowareyouinthislovelydaythesunishiningandtheskyisbright?",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"]}},badgeEnumWithLotOfValues={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"},{id:"amazon_s3_low",label:"Amazon S3 Low"},{id:"hdfs_low",label:"HDFS Low"},{id:"kafka_low",label:"Kafka Low"},{id:"localcon_low",label:"Local connection Low"},{id:"salesforce_low",label:"Salesforce Low"},{id:"aws_kinesis_low",label:"AWS kinesis Low"},{id:"amazon_s3_high",label:"Amazon S3 High"},{id:"hdfs_high",label:"HDFS High"},{id:"kafka_high",label:"Kafka High"},{id:"localcon_high",label:"Local connection High"},{id:"salesforce_high",label:"Salesforce High"},{id:"aws_kinesis_high",label:"AWS kinesis High"},{id:"amazon_s3_classic",label:"Amazon S3 Classic"},{id:"hdfs_classic",label:"HDFS Classic"},{id:"kafka_classic",label:"Kafka Classic"},{id:"localcon_classic",label:"Local connection Classic"},{id:"salesforce_classic",label:"Salesforce Classic"},{id:"aws_kinesis_classic",label:"AWS kinesis Classic"}],operators:["in","notIn"]}},badgeTextAsCustomAttribute={properties:{attribute:"target",initialOperatorOpened:!0,initialValueOpened:!1,label:"Target",operator:{},operators:[],type:"text",placeholder:"Enter a custom attribute"},metadata:{category:"Custom attributes",badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"]}},badgeEnumsAsCustomAttribute={properties:{attribute:"visibility",initialOperatorOpened:!0,initialValueOpened:!1,label:"Visibility",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a visibility"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",category:"Custom attributes",values:[{id:"internal",label:"Internal"},{id:"public",label:"Public"}],operators:["in","notIn"]}},badgeTextAsCategory={properties:{attribute:"owner",initialOperatorOpened:!0,initialValueOpened:!1,label:"Owner",operator:{},operators:[],type:"text",placeholder:"Enter a category name"},metadata:{category:"Very long long long long long long long category",badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals"]}},badgeEmptyLabel={properties:{attribute:"title",initialOperatorOpened:!0,initialValueOpened:!1,label:"",operator:{},operators:[],type:"text"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals"]}},badgePriceAsCustomAttribute={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"Price",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",category:"Custom attributes",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"]}};var lib_esm=__webpack_require__("../components/lib-esm/index.js"),lodash=__webpack_require__("../../node_modules/lodash/lodash.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const badgesDefinitions=[{properties:{attribute:"workspaceId",initialOperatorOpened:!0,initialValueOpened:!1,label:"Workspace",operator:{},operators:[],type:"menu",filterBarPlaceholder:"Find a workspace"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"personal",label:"Personal"},{id:"shared",label:"Shared"},{id:"custom",label:"Custom"},{id:"ws1",label:"Long long workspace name can't fit in one line. Long long workspace name can't fit in one line. "},{id:"ws2",label:"Workspace 2"},{id:"ws3",label:"Workspace 3"},{id:"ws4",label:"Workspace 4"},{id:"ws5",label:"Workspace 5"},{id:"ws6",label:"Workspace 6"},{id:"ws7",label:"Workspace 7"},{id:"ws8",label:"Workspace 8"},{id:"ws9",label:"Workspace 9"},{id:"ws10",label:"Workspace Test"}],operators:["equals","notEquals"],"data-feature":"faceted-badge-workspace"}},{properties:{attribute:"all",initialOperatorOpened:!0,initialValueOpened:!1,label:"All",operator:{},operators:[],type:"text"},metadata:{isAvailableForFacetList:!1,badgePerFacet:"1",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase"],"data-feature":"faceted-badge-all"}},badgeName,badgeConnectionName,badgeAuthor,badgeConnectionType,badgeTags,badgePrice,badgeValid,{properties:{attribute:"empty",initialOperatorOpened:!0,initialValueOpened:!1,label:"Empty",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"empty"},unit:"%"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},{properties:{attribute:"invalid",initialOperatorOpened:!0,initialValueOpened:!1,label:"Invalid",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"invalid"},unit:"%",defaultValue:50},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},{properties:{attribute:"creationDate",initialOperatorOpened:!0,initialValueOpened:!1,label:"Creation Date",operator:{},operators:[],type:"date"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"],"data-feature":"faceted-badge-creation-date"}},{properties:{attribute:"period",initialOperatorOpened:!0,initialValueOpened:!1,label:"Period",operator:{},operators:[],type:"period"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["in"],"data-feature":"faceted-badge-period"}}],callbacks={getTags:()=>new Promise(resolve=>setTimeout(resolve,2e3,["clean","production","last chunk","salesforce","outdated","extracted","security","in processing","deep learning","sql","cluster","visualization","analytics","users","warehouse","api"]))},badgesFaceted={badges:[{properties:{attribute:"connection.type",initialOperatorOpened:!1,initialValueOpened:!1,label:"Connection Type",operator:{label:"In",name:"in"},operators:[{label:"In",name:"in"}],type:"checkbox",value:[{id:"amazon_s3",label:"Amazon S3",checked:!0},{id:"hdfs",label:"HDFS",checked:!0},{id:"localcon",label:"Local connection",checked:!0}]},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in"],badgeId:"connection.type-9f0e5bc7-c687-4198-9635-d0fc7724dfd1",isInCreation:!1}}]},badgesWithAll={badges:[{properties:{attribute:"all",initialOperatorOpened:!1,initialValueOpened:!1,label:"All",operator:{label:"Contains",name:"containsIgnoreCase",iconName:"contains"},operators:[],type:"text",value:"test"},metadata:{isAvailableForFacetList:!1,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase"],badgeId:"all-b6c04e3d-1d72-4aca-9565-09d206f76d88",isInCreation:!1}}]},facetedSearch_stories={title:"Faceted search/Main",component:src.A.Faceted,parameters:{storySource:{source:"import { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { action } from '@storybook/addon-actions';\nimport { userEvent, within } from '@storybook/testing-library';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\nimport times from 'lodash/times';\n\nimport { Badge } from '@talend/react-components';\n\nimport FacetedSearch from '../src';\nimport { BadgesGenerator } from '../src/components/BadgesGenerator';\nimport { BadgeFacetedProvider } from '../src/components/context/badgeFaceted.context';\nimport { createBadgesDict, getBadgesFromDict } from '../src/dictionary/badge.dictionary';\nimport {\n\tbadgeAll,\n\tbadgeAuthor,\n\tbadgeConnectionName,\n\tbadgeConnectionType,\n\tbadgeConnectionTypeAllSelector,\n\tbadgeCreationDate,\n\tbadgeEmpty,\n\tbadgeEmptyLabel,\n\tbadgeEnumsAsCustomAttribute,\n\tbadgeEnumWithLotOfValues,\n\tbadgeInvalid,\n\tbadgeMenu,\n\tbadgeName,\n\tbadgePeriod,\n\tbadgePrice,\n\tbadgePriceAsCustomAttribute,\n\tbadgeTags,\n\tbadgeTextAsCategory,\n\tbadgeTextAsCustomAttribute,\n\tbadgeValid,\n\tbadgeWithVeryLongName,\n} from './badgesDefinitions';\n\nconst badgesDefinitions = [\n\tbadgeMenu,\n\tbadgeAll,\n\tbadgeName,\n\tbadgeConnectionName,\n\tbadgeAuthor,\n\tbadgeConnectionType,\n\tbadgeTags,\n\tbadgePrice,\n\tbadgeValid,\n\tbadgeEmpty,\n\tbadgeInvalid,\n\tbadgeCreationDate,\n\tbadgePeriod,\n];\n\nconst callbacks = {\n\tgetTags: () =>\n\t\tnew Promise(resolve =>\n\t\t\tsetTimeout(resolve, 2000, [\n\t\t\t\t'clean',\n\t\t\t\t'production',\n\t\t\t\t'last chunk',\n\t\t\t\t'salesforce',\n\t\t\t\t'outdated',\n\t\t\t\t'extracted',\n\t\t\t\t'security',\n\t\t\t\t'in processing',\n\t\t\t\t'deep learning',\n\t\t\t\t'sql',\n\t\t\t\t'cluster',\n\t\t\t\t'visualization',\n\t\t\t\t'analytics',\n\t\t\t\t'users',\n\t\t\t\t'warehouse',\n\t\t\t\t'api',\n\t\t\t]),\n\t\t),\n};\n\nconst badgesFaceted = {\n\tbadges: [\n\t\t{\n\t\t\tproperties: {\n\t\t\t\tattribute: 'connection.type',\n\t\t\t\tinitialOperatorOpened: false,\n\t\t\t\tinitialValueOpened: false,\n\t\t\t\tlabel: 'Connection Type',\n\t\t\t\toperator: {\n\t\t\t\t\tlabel: 'In',\n\t\t\t\t\tname: 'in',\n\t\t\t\t},\n\t\t\t\toperators: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'In',\n\t\t\t\t\t\tname: 'in',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tvalue: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'amazon_s3',\n\t\t\t\t\t\tlabel: 'Amazon S3',\n\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'hdfs',\n\t\t\t\t\t\tlabel: 'HDFS',\n\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'localcon',\n\t\t\t\t\t\tlabel: 'Local connection',\n\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tbadgePerFacet: '1',\n\t\t\t\tentitiesPerBadge: 'N',\n\t\t\t\tvalues: [\n\t\t\t\t\t{ id: 'amazon_s3', label: 'Amazon S3' },\n\t\t\t\t\t{ id: 'hdfs', label: 'HDFS' },\n\t\t\t\t\t{ id: 'kafka', label: 'Kafka' },\n\t\t\t\t\t{ id: 'localcon', label: 'Local connection' },\n\t\t\t\t\t{ id: 'salesforce', label: 'Salesforce' },\n\t\t\t\t\t{ id: 'aws_kinesis', label: 'AWS kinesis' },\n\t\t\t\t],\n\t\t\t\toperators: ['in'],\n\t\t\t\tbadgeId: 'connection.type-9f0e5bc7-c687-4198-9635-d0fc7724dfd1',\n\t\t\t\tisInCreation: false,\n\t\t\t},\n\t\t},\n\t],\n};\n\nconst badgesWithAll = {\n\tbadges: [\n\t\t{\n\t\t\tproperties: {\n\t\t\t\tattribute: 'all',\n\t\t\t\tinitialOperatorOpened: false,\n\t\t\t\tinitialValueOpened: false,\n\t\t\t\tlabel: 'All',\n\t\t\t\toperator: { label: 'Contains', name: 'containsIgnoreCase', iconName: 'contains' },\n\t\t\t\toperators: [],\n\t\t\t\ttype: 'text',\n\t\t\t\tvalue: 'test',\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tisAvailableForFacetList: false,\n\t\t\t\tbadgePerFacet: 'N',\n\t\t\t\tentitiesPerBadge: '1',\n\t\t\t\toperators: ['containsIgnoreCase'],\n\t\t\t\tbadgeId: 'all-b6c04e3d-1d72-4aca-9565-09d206f76d88',\n\t\t\t\tisInCreation: false,\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default {\n\ttitle: 'Faceted search/Main',\n\tcomponent: FacetedSearch.Faceted,\n\tparameters: {\n\t\tdocs: {\n\t\t\tdescription: {\n\t\t\t\tcomponent:\n\t\t\t\t\t'Faceted search is a technique that involves augmenting traditional search techniques with a faceted navigation system, allowing users to narrow down search results by applying multiple filters based on faceted classification of the items. The user can look for any value, even if the field is not currently visible.',\n\t\t\t},\n\t\t},\n\t},\n\tdecorators: [\n\t\t(Story, context) => (\n\t\t\t<div>\n\t\t\t\t<Story {...context} />\n\t\t\t</div>\n\t\t),\n\t],\n};\n\nexport const Default = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t{currentFacetedMode =>\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && (\n\t\t\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t\t\t)) ||\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && (\n\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\t\tquickSearchInputProps={{\n\t\t\t\t\t\t'data-feature': 'faceted-badge-name',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t))\n\t\t}\n\t</FacetedSearch.Faceted>\n);\n\nexport const Advanced = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t</FacetedSearch.Faceted>\n);\n\nexport const Initialized = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t{currentFacetedMode =>\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && (\n\t\t\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t\t\t)) ||\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && (\n\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\tbadgesFaceted={badgesFaceted}\n\t\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t/>\n\t\t\t))\n\t\t}\n\t</FacetedSearch.Faceted>\n);\n\nexport const InitializedWithABadgeWhichIsNotVisibleInTheList = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t{currentFacetedMode =>\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && (\n\t\t\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t\t\t)) ||\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && (\n\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\tbadgesFaceted={badgesWithAll}\n\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\t/>\n\t\t\t))\n\t\t}\n\t</FacetedSearch.Faceted>\n);\n\nexport const Colored = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t{currentFacetedMode =>\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && (\n\t\t\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t\t\t)) ||\n\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && (\n\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\tbadgesFaceted={set(\n\t\t\t\t\t\tcloneDeep(badgesFaceted),\n\t\t\t\t\t\t'badges[0].properties.displayType',\n\t\t\t\t\t\tBadge.TYPES.VALUE,\n\t\t\t\t\t)}\n\t\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t/>\n\t\t\t))\n\t\t}\n\t</FacetedSearch.Faceted>\n);\n\nexport const WithSpecialChars = () => {\n\tconst { t } = useTranslation();\n\tconst badgesDictionary = createBadgesDict();\n\tconst badge = cloneDeep(badgesFaceted.badges[0]);\n\tObject.assign(badge.properties, {\n\t\tvalue: '  text  ',\n\t\ttype: 'text',\n\t\tdisplayType: Badge.TYPES.PATTERN,\n\t});\n\treturn (\n\t\t<BadgeFacetedProvider value={{}}>\n\t\t\t<BadgesGenerator\n\t\t\t\tbadges={[badge]}\n\t\t\t\tbadgesDictionary={badgesDictionary}\n\t\t\t\tgetBadgeFromDict={getBadgesFromDict}\n\t\t\t\tt={t}\n\t\t\t/>\n\t\t</BadgeFacetedProvider>\n\t);\n};\n\nexport const DatePicker = () => {\n\tconst { t } = useTranslation();\n\tconst badgesDictionary = createBadgesDict();\n\tconst badge = cloneDeep(badgesFaceted.badges[0]);\n\tObject.assign(badge.properties, {\n\t\tvalue: Date.now(),\n\t\ttype: 'date',\n\t});\n\treturn (\n\t\t<BadgeFacetedProvider value={{}}>\n\t\t\t<BadgesGenerator\n\t\t\t\tbadges={[badge]}\n\t\t\t\tbadgesDictionary={badgesDictionary}\n\t\t\t\tgetBadgeFromDict={getBadgesFromDict}\n\t\t\t\tt={t}\n\t\t\t/>\n\t\t</BadgeFacetedProvider>\n\t);\n};\n\nexport const ReadOnly = () => {\n\tconst { t } = useTranslation();\n\tconst badgesDictionary = createBadgesDict();\n\treturn (\n\t\t<BadgeFacetedProvider value={{}}>\n\t\t\t<BadgesGenerator\n\t\t\t\tbadges={[\n\t\t\t\t\tset(cloneDeep(badgesFaceted.badges[0]), 'properties.readOnly', true),\n\t\t\t\t\tset(cloneDeep(badgesFaceted.badges[0]), 'properties.removable', false),\n\t\t\t\t]}\n\t\t\t\tbadgesDictionary={badgesDictionary}\n\t\t\t\tgetBadgeFromDict={getBadgesFromDict}\n\t\t\t\tt={t}\n\t\t\t/>\n\t\t</BadgeFacetedProvider>\n\t);\n};\n\nexport const WithExternalState = () => {\n\tconst [state, setState] = useState(badgesFaceted);\n\tconst onSubmit = useCallback(\n\t\t(_, badges) => setState(previousState => ({ ...previousState, badges })),\n\t\t[setState],\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={() => setState(badgesFaceted)}>Reset state</button>\n\t\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t\t{currentFacetedMode =>\n\t\t\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && (\n\t\t\t\t\t\t<FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n\t\t\t\t\t)) ||\n\t\t\t\t\t(currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && (\n\t\t\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\t\t\tbadgesFaceted={state}\n\t\t\t\t\t\t\tonSubmit={onSubmit}\n\t\t\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</FacetedSearch.Faceted>\n\t\t</div>\n\t);\n};\n\nexport const WithoutLabelOrOperatorButton = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.BasicSearch\n\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\tbadgesFaceted={set(cloneDeep(badgesFaceted), 'badges[0].properties.label', '')}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nconst lotsOfBadgesDefinitions = Array(50).fill(badgeName);\nexport const BasicSearchWithLotOfBadgeDefinitions = {\n\trender: () => (\n\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\tbadgesDefinitions={lotsOfBadgesDefinitions}\n\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\tcallbacks={callbacks}\n\t\t\t/>\n\t\t</FacetedSearch.Faceted>\n\t),\n\tplay: async ({ canvasElement }) => {\n\t\tawait userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n\t},\n};\n\nexport const BasicSearchWithBadgeWithVeryLongName = {\n\trender: () => (\n\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\tbadgesDefinitions={[badgeWithVeryLongName, badgeConnectionType, badgeName, badgePrice]}\n\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\tcallbacks={callbacks}\n\t\t\t/>\n\t\t</FacetedSearch.Faceted>\n\t),\n\tplay: async ({ canvasElement }) => {\n\t\tawait userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n\t},\n};\n\nexport const BasicSearchWithBadgeWithAllSelector = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.BasicSearch\n\t\t\tbadgesDefinitions={[badgeConnectionTypeAllSelector]}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nexport const BasicSearchInABadgeWithALotOfValues = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.BasicSearch\n\t\t\tbadgesDefinitions={[badgeEnumWithLotOfValues]}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nexport const BasicSearchWithBadgesCategories = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.BasicSearch\n\t\t\tbadgesDefinitions={[\n\t\t\t\tbadgeConnectionType,\n\t\t\t\tbadgeName,\n\t\t\t\tbadgePrice,\n\t\t\t\tbadgeTags,\n\t\t\t\tbadgeTextAsCustomAttribute,\n\t\t\t\tbadgePriceAsCustomAttribute,\n\t\t\t\tbadgeEnumsAsCustomAttribute,\n\t\t\t\t...times(2, () => badgeTextAsCategory),\n\t\t\t]}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nexport const BasicSearchWithAnEmptyLabelBadge = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<FacetedSearch.BasicSearch\n\t\t\tbadgesDefinitions={[badgeName, badgeEmptyLabel]}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nexport const BasicSearchWithSliderPopin = {\n\trender: ({ decimal, withIcon }) => {\n\t\tconst step = decimal ? 0.01 : 1;\n\t\tconst icon = withIcon ? badgeValid.properties.icon : undefined;\n\n\t\tconst overritenProperties = {\n\t\t\tinitialOperatorOpened: false,\n\t\t\tinitialValueOpened: true,\n\t\t\tstep,\n\t\t\tdecimal: true,\n\t\t\toperator: {\n\t\t\t\tlabel: 'Less than',\n\t\t\t\tname: 'LessThan',\n\t\t\t\ticonName: 'less-than',\n\t\t\t},\n\t\t\ticon,\n\t\t\toperators: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Less than',\n\t\t\t\t\tname: 'LessThan',\n\t\t\t\t\ticonName: 'less-than',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Less than or equal',\n\t\t\t\t\tname: 'LessThanOrEquals',\n\t\t\t\t\ticonName: 'less-than-equal',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tconst badgeFacetedCustom = {\n\t\t\tbadges: [\n\t\t\t\t{\n\t\t\t\t\t...badgeValid,\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t...badgeValid.properties,\n\t\t\t\t\t\t...overritenProperties,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn (\n\t\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\t\tbadgesFaceted={badgeFacetedCustom}\n\t\t\t\t\tcallbacks={callbacks}\n\t\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\t/>\n\t\t\t</FacetedSearch.Faceted>\n\t\t);\n\t},\n\targs: {\n\t\tdecimal: true,\n\t\twithIcon: true,\n\t},\n};\n\nexport const WithQuickSearchFilter = () => (\n\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t<p>Quick search will only suggest facets matching input (Connection name, Author)</p>\n\t\t<br />\n\t\t<FacetedSearch.BasicSearch\n\t\t\tquickSearchFacetsFilter={(term, facets) =>\n\t\t\t\tfacets.filter(facet => facet.properties.label.includes(term))\n\t\t\t}\n\t\t\tbadgesDefinitions={[badgeAuthor, badgeName, badgeConnectionName]}\n\t\t\tonSubmit={action('onSubmit')}\n\t\t\tcallbacks={callbacks}\n\t\t/>\n\t</FacetedSearch.Faceted>\n);\n\nexport const WithQuickSearchFilterCustomizableInputTriggerLength = () => {\n\tconst badgeNameWithLength = {\n\t\tproperties: {\n\t\t\tattribute: 'name',\n\t\t\tinitialOperatorOpened: true,\n\t\t\tinitialValueOpened: false,\n\t\t\tlabel: 'Name',\n\t\t\toperator: {},\n\t\t\toperators: [],\n\t\t\ttype: 'text',\n\t\t\tplaceholder: 'Enter a dataset name',\n\t\t},\n\t\tmetadata: {\n\t\t\tisAvailableForQuickSearch: true,\n\t\t\tisAvailableForFacetList: true,\n\t\t\tbadgePerFacet: 'N',\n\t\t\tentitiesPerBadge: '1',\n\t\t\toperators: [\n\t\t\t\t'containsIgnoreCase',\n\t\t\t\t'notContainsIgnoreCase',\n\t\t\t\t'equals',\n\t\t\t\t'notEquals',\n\t\t\t\t'match a regexp',\n\t\t\t],\n\t\t\t'data-feature': 'faceted-badge-name',\n\t\t\tminLength: 5,\n\t\t},\n\t};\n\treturn (\n\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t<p>\n\t\t\t\tQuick search will trigger after a minimum input length that can be customized based on badge\n\t\t\t\tdefinition\n\t\t\t</p>\n\t\t\t<br />\n\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\tbadgesDefinitions={[badgeNameWithLength]}\n\t\t\t\tcallbacks={callbacks}\n\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t/>\n\t\t</FacetedSearch.Faceted>\n\t);\n};\n\nexport const WithQuickSearchAsynchronousSuggestions = () => {\n\tconst [searching, setSearching] = useState(false);\n\tconst [items, setItems] = useState([]);\n\tconst [value, setValue] = useState('');\n\tconst onChange = (_, { value }) => {\n\t\tsetValue(value);\n\t\tsetSearching(true);\n\t\tsetTimeout(() => {\n\t\t\tsetItems([\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Search in...',\n\t\t\t\t\tsuggestions: ['in Name', 'in Email', 'in Position'].map(column => value + ' ' + column),\n\t\t\t\t},\n\t\t\t]);\n\t\t\tsetSearching(false);\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<FacetedSearch.Faceted id=\"my-faceted-search\">\n\t\t\t<FacetedSearch.BasicSearch\n\t\t\t\tbadgesDefinitions={badgesDefinitions}\n\t\t\t\tcallbacks={callbacks}\n\t\t\t\tonSubmit={action('onSubmit')}\n\t\t\t\tquickSearchInputProps={{ value }}\n\t\t\t\tquickSearchTypeaheadProps={{ searching, items, onChange, debounceTimeout: 800 }}\n\t\t\t/>\n\t\t</FacetedSearch.Faceted>\n\t);\n};\n",locationsMap:{default:{startLoc:{col:23,line:181},endLoc:{col:1,line:199},startBody:{col:23,line:181},endBody:{col:1,line:199}},advanced:{startLoc:{col:24,line:201},endLoc:{col:1,line:205},startBody:{col:24,line:201},endBody:{col:1,line:205}},initialized:{startLoc:{col:27,line:207},endLoc:{col:1,line:223},startBody:{col:27,line:207},endBody:{col:1,line:223}},"initialized-with-a-badge-which-is-not-visible-in-the-list":{startLoc:{col:63,line:225},endLoc:{col:1,line:241},startBody:{col:63,line:225},endBody:{col:1,line:241}},colored:{startLoc:{col:23,line:243},endLoc:{col:1,line:263},startBody:{col:23,line:243},endBody:{col:1,line:263}},"with-special-chars":{startLoc:{col:32,line:265},endLoc:{col:1,line:284},startBody:{col:32,line:265},endBody:{col:1,line:284}},"date-picker":{startLoc:{col:26,line:286},endLoc:{col:1,line:304},startBody:{col:26,line:286},endBody:{col:1,line:304}},"read-only":{startLoc:{col:24,line:306},endLoc:{col:1,line:322},startBody:{col:24,line:306},endBody:{col:1,line:322}},"with-external-state":{startLoc:{col:33,line:324},endLoc:{col:1,line:351},startBody:{col:33,line:324},endBody:{col:1,line:351}},"without-label-or-operator-button":{startLoc:{col:44,line:353},endLoc:{col:1,line:362},startBody:{col:44,line:353},endBody:{col:1,line:362}},"basic-search-with-lot-of-badge-definitions":{startLoc:{col:52,line:365},endLoc:{col:1,line:378},startBody:{col:52,line:365},endBody:{col:1,line:378}},"basic-search-with-badge-with-very-long-name":{startLoc:{col:52,line:380},endLoc:{col:1,line:393},startBody:{col:52,line:380},endBody:{col:1,line:393}},"basic-search-with-badge-with-all-selector":{startLoc:{col:51,line:395},endLoc:{col:1,line:403},startBody:{col:51,line:395},endBody:{col:1,line:403}},"basic-search-in-a-badge-with-a-lot-of-values":{startLoc:{col:51,line:405},endLoc:{col:1,line:413},startBody:{col:51,line:405},endBody:{col:1,line:413}},"basic-search-with-badges-categories":{startLoc:{col:47,line:415},endLoc:{col:1,line:432},startBody:{col:47,line:415},endBody:{col:1,line:432}},"basic-search-with-an-empty-label-badge":{startLoc:{col:48,line:434},endLoc:{col:1,line:442},startBody:{col:48,line:434},endBody:{col:1,line:442}},"basic-search-with-slider-popin":{startLoc:{col:42,line:444},endLoc:{col:1,line:501},startBody:{col:42,line:444},endBody:{col:1,line:501}},"with-quick-search-filter":{startLoc:{col:37,line:503},endLoc:{col:1,line:516},startBody:{col:37,line:503},endBody:{col:1,line:516}},"with-quick-search-filter-customizable-input-trigger-length":{startLoc:{col:67,line:518},endLoc:{col:1,line:560},startBody:{col:67,line:518},endBody:{col:1,line:560}},"with-quick-search-asynchronous-suggestions":{startLoc:{col:54,line:562},endLoc:{col:1,line:591},startBody:{col:54,line:562},endBody:{col:1,line:591}}}},docs:{description:{component:"Faceted search is a technique that involves augmenting traditional search techniques with a faceted navigation system, allowing users to narrow down search results by applying multiple filters based on faceted classification of the items. The user can look for any value, even if the field is not currently visible."}}},decorators:[(Story,context)=>(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Story,{...context})})]},Default=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,callbacks,onSubmit:(0,dist.XI)("onSubmit"),quickSearchInputProps:{"data-feature":"faceted-badge-name"}})});Default.displayName="Default";const Advanced=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})});Advanced.displayName="Advanced";const Initialized=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted,onSubmit:(0,dist.XI)("onSubmit"),callbacks})});Initialized.displayName="Initialized";const InitializedWithABadgeWhichIsNotVisibleInTheList=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:badgesWithAll,callbacks,onSubmit:(0,dist.XI)("onSubmit")})});InitializedWithABadgeWhichIsNotVisibleInTheList.displayName="InitializedWithABadgeWhichIsNotVisibleInTheList";const Colored=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted),"badges[0].properties.displayType",lib_esm.Ex.TYPES.VALUE),onSubmit:(0,dist.XI)("onSubmit"),callbacks})});Colored.displayName="Colored";const WithSpecialChars=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)(),badge=(0,lodash.cloneDeep)(badgesFaceted.badges[0]);return _extends(badge.properties,{value:"  text  ",type:"text",displayType:lib_esm.Ex.TYPES.PATTERN}),(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[badge],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})};WithSpecialChars.displayName="WithSpecialChars";const DatePicker=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)(),badge=(0,lodash.cloneDeep)(badgesFaceted.badges[0]);return _extends(badge.properties,{value:Date.now(),type:"date"}),(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[badge],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})};DatePicker.displayName="DatePicker";const ReadOnly=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)();return(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted.badges[0]),"properties.readOnly",!0),(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted.badges[0]),"properties.removable",!1)],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})};ReadOnly.displayName="ReadOnly";const WithExternalState=()=>{const[state,setState]=(0,react.useState)(badgesFaceted),onSubmit=(0,react.useCallback)((_,badges)=>setState(previousState=>({...previousState,badges})),[setState]);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setState(badgesFaceted),children:"Reset state"}),(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:state,onSubmit,callbacks})})]})};WithExternalState.displayName="WithExternalState";const WithoutLabelOrOperatorButton=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted),"badges[0].properties.label",""),onSubmit:(0,dist.XI)("onSubmit"),callbacks})});WithoutLabelOrOperatorButton.displayName="WithoutLabelOrOperatorButton";const lotsOfBadgesDefinitions=Array(50).fill(badgeName),BasicSearchWithLotOfBadgeDefinitions={render:()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:lotsOfBadgesDefinitions,onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),play:async({canvasElement})=>{await testing_library_dist.Q4.type((0,testing_library_dist.ux)(canvasElement).getByRole("searchbox"),"lorem ipsum")}},BasicSearchWithBadgeWithVeryLongName={render:()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeWithVeryLongName,badgeConnectionType,badgeName,badgePrice],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),play:async({canvasElement})=>{await testing_library_dist.Q4.type((0,testing_library_dist.ux)(canvasElement).getByRole("searchbox"),"lorem ipsum")}},BasicSearchWithBadgeWithAllSelector=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeConnectionTypeAllSelector],onSubmit:(0,dist.XI)("onSubmit"),callbacks})});BasicSearchWithBadgeWithAllSelector.displayName="BasicSearchWithBadgeWithAllSelector";const BasicSearchInABadgeWithALotOfValues=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeEnumWithLotOfValues],onSubmit:(0,dist.XI)("onSubmit"),callbacks})});BasicSearchInABadgeWithALotOfValues.displayName="BasicSearchInABadgeWithALotOfValues";const BasicSearchWithBadgesCategories=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeConnectionType,badgeName,badgePrice,badgeTags,badgeTextAsCustomAttribute,badgePriceAsCustomAttribute,badgeEnumsAsCustomAttribute,...(0,lodash.times)(2,()=>badgeTextAsCategory)],onSubmit:(0,dist.XI)("onSubmit"),callbacks})});BasicSearchWithBadgesCategories.displayName="BasicSearchWithBadgesCategories";const BasicSearchWithAnEmptyLabelBadge=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeName,badgeEmptyLabel],onSubmit:(0,dist.XI)("onSubmit"),callbacks})});BasicSearchWithAnEmptyLabelBadge.displayName="BasicSearchWithAnEmptyLabelBadge";const BasicSearchWithSliderPopin={render:({decimal,withIcon})=>{const overritenProperties={initialOperatorOpened:!1,initialValueOpened:!0,step:decimal?.01:1,decimal:!0,operator:{label:"Less than",name:"LessThan",iconName:"less-than"},icon:withIcon?badgeValid.properties.icon:void 0,operators:[{label:"Less than",name:"LessThan",iconName:"less-than"},{label:"Less than or equal",name:"LessThanOrEquals",iconName:"less-than-equal"}]},badgeFacetedCustom={badges:[{...badgeValid,properties:{...badgeValid.properties,...overritenProperties}}]};return(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:badgeFacetedCustom,callbacks,onSubmit:(0,dist.XI)("onSubmit")})})},args:{decimal:!0,withIcon:!0}},WithQuickSearchFilter=()=>(0,jsx_runtime.jsxs)(src.A.Faceted,{id:"my-faceted-search",children:[(0,jsx_runtime.jsx)("p",{children:"Quick search will only suggest facets matching input (Connection name, Author)"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(src.A.BasicSearch,{quickSearchFacetsFilter:(term,facets)=>facets.filter(facet=>facet.properties.label.includes(term)),badgesDefinitions:[badgeAuthor,badgeName,badgeConnectionName],onSubmit:(0,dist.XI)("onSubmit"),callbacks})]});WithQuickSearchFilter.displayName="WithQuickSearchFilter";const WithQuickSearchFilterCustomizableInputTriggerLength=()=>(0,jsx_runtime.jsxs)(src.A.Faceted,{id:"my-faceted-search",children:[(0,jsx_runtime.jsx)("p",{children:"Quick search will trigger after a minimum input length that can be customized based on badge definition"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[{properties:{attribute:"name",initialOperatorOpened:!0,initialValueOpened:!1,label:"Name",operator:{},operators:[],type:"text",placeholder:"Enter a dataset name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-name",minLength:5}}],callbacks,onSubmit:(0,dist.XI)("onSubmit")})]});WithQuickSearchFilterCustomizableInputTriggerLength.displayName="WithQuickSearchFilterCustomizableInputTriggerLength";const WithQuickSearchAsynchronousSuggestions=()=>{const[searching,setSearching]=(0,react.useState)(!1),[items,setItems]=(0,react.useState)([]),[value,setValue]=(0,react.useState)("");return(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,callbacks,onSubmit:(0,dist.XI)("onSubmit"),quickSearchInputProps:{value},quickSearchTypeaheadProps:{searching,items,onChange:(_,{value})=>{setValue(value),setSearching(!0),setTimeout(()=>{setItems([{title:"Search in...",suggestions:["in Name","in Email","in Position"].map(column=>value+" "+column)}]),setSearching(!1)},1e3)},debounceTimeout:800}})})};WithQuickSearchAsynchronousSuggestions.displayName="WithQuickSearchAsynchronousSuggestions",Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} callbacks={callbacks} onSubmit={action('onSubmit')} quickSearchInputProps={{\n    'data-feature': 'faceted-badge-name'\n  }} />}\n    </FacetedSearch.Faceted>",...Default.parameters?.docs?.source}}},Advanced.parameters={...Advanced.parameters,docs:{...Advanced.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n    </FacetedSearch.Faceted>",...Advanced.parameters?.docs?.source}}},Initialized.parameters={...Initialized.parameters,docs:{...Initialized.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgesFaceted} onSubmit={action('onSubmit')} callbacks={callbacks} />}\n    </FacetedSearch.Faceted>",...Initialized.parameters?.docs?.source}}},InitializedWithABadgeWhichIsNotVisibleInTheList.parameters={...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters,docs:{...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgesWithAll} callbacks={callbacks} onSubmit={action('onSubmit')} />}\n    </FacetedSearch.Faceted>",...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters?.docs?.source}}},Colored.parameters={...Colored.parameters,docs:{...Colored.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={set(cloneDeep(badgesFaceted), 'badges[0].properties.displayType', Badge.TYPES.VALUE)} onSubmit={action('onSubmit')} callbacks={callbacks} />}\n    </FacetedSearch.Faceted>",...Colored.parameters?.docs?.source}}},WithSpecialChars.parameters={...WithSpecialChars.parameters,docs:{...WithSpecialChars.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  const badge = cloneDeep(badgesFaceted.badges[0]);\n  Object.assign(badge.properties, {\n    value: '  text  ',\n    type: 'text',\n    displayType: Badge.TYPES.PATTERN\n  });\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[badge]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...WithSpecialChars.parameters?.docs?.source}}},DatePicker.parameters={...DatePicker.parameters,docs:{...DatePicker.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  const badge = cloneDeep(badgesFaceted.badges[0]);\n  Object.assign(badge.properties, {\n    value: Date.now(),\n    type: 'date'\n  });\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[badge]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...DatePicker.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[set(cloneDeep(badgesFaceted.badges[0]), 'properties.readOnly', true), set(cloneDeep(badgesFaceted.badges[0]), 'properties.removable', false)]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...ReadOnly.parameters?.docs?.source}}},WithExternalState.parameters={...WithExternalState.parameters,docs:{...WithExternalState.parameters?.docs,source:{originalSource:"() => {\n  const [state, setState] = useState(badgesFaceted);\n  const onSubmit = useCallback((_, badges) => setState(previousState => ({\n    ...previousState,\n    badges\n  })), [setState]);\n  return <div>\n            <button onClick={() => setState(badgesFaceted)}>Reset state</button>\n            <FacetedSearch.Faceted id=\"my-faceted-search\">\n                {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={state} onSubmit={onSubmit} callbacks={callbacks} />}\n            </FacetedSearch.Faceted>\n        </div>;\n}",...WithExternalState.parameters?.docs?.source}}},WithoutLabelOrOperatorButton.parameters={...WithoutLabelOrOperatorButton.parameters,docs:{...WithoutLabelOrOperatorButton.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={set(cloneDeep(badgesFaceted), 'badges[0].properties.label', '')} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...WithoutLabelOrOperatorButton.parameters?.docs?.source}}},BasicSearchWithLotOfBadgeDefinitions.parameters={...BasicSearchWithLotOfBadgeDefinitions.parameters,docs:{...BasicSearchWithLotOfBadgeDefinitions.parameters?.docs,source:{originalSource:"{\n  render: () => <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={lotsOfBadgesDefinitions} onSubmit={action('onSubmit')} callbacks={callbacks} />\n        </FacetedSearch.Faceted>,\n  play: async ({\n    canvasElement\n  }) => {\n    await userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n  }\n}",...BasicSearchWithLotOfBadgeDefinitions.parameters?.docs?.source}}},BasicSearchWithBadgeWithVeryLongName.parameters={...BasicSearchWithBadgeWithVeryLongName.parameters,docs:{...BasicSearchWithBadgeWithVeryLongName.parameters?.docs,source:{originalSource:"{\n  render: () => <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={[badgeWithVeryLongName, badgeConnectionType, badgeName, badgePrice]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n        </FacetedSearch.Faceted>,\n  play: async ({\n    canvasElement\n  }) => {\n    await userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n  }\n}",...BasicSearchWithBadgeWithVeryLongName.parameters?.docs?.source}}},BasicSearchWithBadgeWithAllSelector.parameters={...BasicSearchWithBadgeWithAllSelector.parameters,docs:{...BasicSearchWithBadgeWithAllSelector.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeConnectionTypeAllSelector]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithBadgeWithAllSelector.parameters?.docs?.source}}},BasicSearchInABadgeWithALotOfValues.parameters={...BasicSearchInABadgeWithALotOfValues.parameters,docs:{...BasicSearchInABadgeWithALotOfValues.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeEnumWithLotOfValues]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchInABadgeWithALotOfValues.parameters?.docs?.source}}},BasicSearchWithBadgesCategories.parameters={...BasicSearchWithBadgesCategories.parameters,docs:{...BasicSearchWithBadgesCategories.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeConnectionType, badgeName, badgePrice, badgeTags, badgeTextAsCustomAttribute, badgePriceAsCustomAttribute, badgeEnumsAsCustomAttribute, ...times(2, () => badgeTextAsCategory)]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithBadgesCategories.parameters?.docs?.source}}},BasicSearchWithAnEmptyLabelBadge.parameters={...BasicSearchWithAnEmptyLabelBadge.parameters,docs:{...BasicSearchWithAnEmptyLabelBadge.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeName, badgeEmptyLabel]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithAnEmptyLabelBadge.parameters?.docs?.source}}},BasicSearchWithSliderPopin.parameters={...BasicSearchWithSliderPopin.parameters,docs:{...BasicSearchWithSliderPopin.parameters?.docs,source:{originalSource:"{\n  render: ({\n    decimal,\n    withIcon\n  }) => {\n    const step = decimal ? 0.01 : 1;\n    const icon = withIcon ? badgeValid.properties.icon : undefined;\n    const overritenProperties = {\n      initialOperatorOpened: false,\n      initialValueOpened: true,\n      step,\n      decimal: true,\n      operator: {\n        label: 'Less than',\n        name: 'LessThan',\n        iconName: 'less-than'\n      },\n      icon,\n      operators: [{\n        label: 'Less than',\n        name: 'LessThan',\n        iconName: 'less-than'\n      }, {\n        label: 'Less than or equal',\n        name: 'LessThanOrEquals',\n        iconName: 'less-than-equal'\n      }]\n    };\n    const badgeFacetedCustom = {\n      badges: [{\n        ...badgeValid,\n        properties: {\n          ...badgeValid.properties,\n          ...overritenProperties\n        }\n      }]\n    };\n    return <FacetedSearch.Faceted id=\"my-faceted-search\">\n                <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgeFacetedCustom} callbacks={callbacks} onSubmit={action('onSubmit')} />\n            </FacetedSearch.Faceted>;\n  },\n  args: {\n    decimal: true,\n    withIcon: true\n  }\n}",...BasicSearchWithSliderPopin.parameters?.docs?.source}}},WithQuickSearchFilter.parameters={...WithQuickSearchFilter.parameters,docs:{...WithQuickSearchFilter.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <p>Quick search will only suggest facets matching input (Connection name, Author)</p>\n        <br />\n        <FacetedSearch.BasicSearch quickSearchFacetsFilter={(term, facets) => facets.filter(facet => facet.properties.label.includes(term))} badgesDefinitions={[badgeAuthor, badgeName, badgeConnectionName]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...WithQuickSearchFilter.parameters?.docs?.source}}},WithQuickSearchFilterCustomizableInputTriggerLength.parameters={...WithQuickSearchFilterCustomizableInputTriggerLength.parameters,docs:{...WithQuickSearchFilterCustomizableInputTriggerLength.parameters?.docs,source:{originalSource:"() => {\n  const badgeNameWithLength = {\n    properties: {\n      attribute: 'name',\n      initialOperatorOpened: true,\n      initialValueOpened: false,\n      label: 'Name',\n      operator: {},\n      operators: [],\n      type: 'text',\n      placeholder: 'Enter a dataset name'\n    },\n    metadata: {\n      isAvailableForQuickSearch: true,\n      isAvailableForFacetList: true,\n      badgePerFacet: 'N',\n      entitiesPerBadge: '1',\n      operators: ['containsIgnoreCase', 'notContainsIgnoreCase', 'equals', 'notEquals', 'match a regexp'],\n      'data-feature': 'faceted-badge-name',\n      minLength: 5\n    }\n  };\n  return <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <p>\n                Quick search will trigger after a minimum input length that can be customized based on badge\n                definition\n            </p>\n            <br />\n            <FacetedSearch.BasicSearch badgesDefinitions={[badgeNameWithLength]} callbacks={callbacks} onSubmit={action('onSubmit')} />\n        </FacetedSearch.Faceted>;\n}",...WithQuickSearchFilterCustomizableInputTriggerLength.parameters?.docs?.source}}},WithQuickSearchAsynchronousSuggestions.parameters={...WithQuickSearchAsynchronousSuggestions.parameters,docs:{...WithQuickSearchAsynchronousSuggestions.parameters?.docs,source:{originalSource:"() => {\n  const [searching, setSearching] = useState(false);\n  const [items, setItems] = useState([]);\n  const [value, setValue] = useState('');\n  const onChange = (_, {\n    value\n  }) => {\n    setValue(value);\n    setSearching(true);\n    setTimeout(() => {\n      setItems([{\n        title: 'Search in...',\n        suggestions: ['in Name', 'in Email', 'in Position'].map(column => value + ' ' + column)\n      }]);\n      setSearching(false);\n    }, 1000);\n  };\n  return <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} callbacks={callbacks} onSubmit={action('onSubmit')} quickSearchInputProps={{\n      value\n    }} quickSearchTypeaheadProps={{\n      searching,\n      items,\n      onChange,\n      debounceTimeout: 800\n    }} />\n        </FacetedSearch.Faceted>;\n}",...WithQuickSearchAsynchronousSuggestions.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Advanced","Initialized","InitializedWithABadgeWhichIsNotVisibleInTheList","Colored","WithSpecialChars","DatePicker","ReadOnly","WithExternalState","WithoutLabelOrOperatorButton","BasicSearchWithLotOfBadgeDefinitions","BasicSearchWithBadgeWithVeryLongName","BasicSearchWithBadgeWithAllSelector","BasicSearchInABadgeWithALotOfValues","BasicSearchWithBadgesCategories","BasicSearchWithAnEmptyLabelBadge","BasicSearchWithSliderPopin","WithQuickSearchFilter","WithQuickSearchFilterCustomizableInputTriggerLength","WithQuickSearchAsynchronousSuggestions"]},"?c95a":()=>{}}]);