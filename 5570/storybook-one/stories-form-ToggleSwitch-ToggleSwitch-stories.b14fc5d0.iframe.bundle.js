"use strict";(self.webpackChunk_talend_ui_storybook_one=self.webpackChunk_talend_ui_storybook_one||[]).push([[6027],{"../design-system/src/stories/form/ToggleSwitch/ToggleSwitch.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ToggleSwitchControlled:()=>ToggleSwitchControlled,ToggleSwitchInline:()=>ToggleSwitchInline,ToggleSwitchReactHooksForm:()=>ToggleSwitchReactHooksForm,ToggleSwitchStates:()=>ToggleSwitchStates,ToggleSwitchWithLongLabel:()=>ToggleSwitchWithLongLabel,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),react_hook_form__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/react-hook-form/dist/index.esm.mjs"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../design-system/lib-esm/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Form/Fields/ToggleSwitch",component:___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch},ToggleSwitchStates=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.xs,{gap:"M",justify:"stretch",align:"stretch",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch disabled",disabled:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch read-only",readOnly:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked",defaultChecked:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked disabled",defaultChecked:!0,disabled:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked read-only",defaultChecked:!0,readOnly:!0})]}),ToggleSwitchInline=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch inline",isInline:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span",{children:" "}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch inline",isInline:!0,defaultChecked:!0})]}),ToggleSwitchWithLongLabel=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{width:"200px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"Label with a lot of content, too much probably, and most certainly enough to generate a line break in this small box."})}),ToggleSwitchControlled=()=>{const{register,watch}=(0,react_hook_form__WEBPACK_IMPORTED_MODULE_3__.mN)(),optionA=watch("option-a");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Control switch state",required:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Toggle all",...register("option-a")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Controlled switch",checked:optionA,...register("option-b")})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.Buttons,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.$$,{onClick:()=>{},type:"submit",children:"Submit"})})]})},ToggleSwitchReactHooksForm=()=>{const{register,handleSubmit}=(0,react_hook_form__WEBPACK_IMPORTED_MODULE_3__.mN)(),[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV,{onSubmit:handleSubmit(setFormData),children:[formData&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.B$,{title:"Form data",description:JSON.stringify(formData,null,2),withBackground:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Enabled",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option a",...register("option-a")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option b",defaultChecked:!0,...register("option-b")})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Read only",readOnly:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option c",...register("option-c")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option d",defaultChecked:!0,...register("option-d")})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Disabled",disabled:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option e",disabled:!0,...register("option-e")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option f",defaultChecked:!0,disabled:!0,...register("option-f")})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.Buttons,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.$$,{onClick:()=>{},type:"submit",children:"Submit"})})]})};ToggleSwitchStates.parameters={...ToggleSwitchStates.parameters,docs:{...ToggleSwitchStates.parameters?.docs,source:{originalSource:'() => <StackVertical gap="M" justify="stretch" align="stretch">\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch" />\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch disabled" disabled />\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch read-only" readOnly />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked" defaultChecked />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked disabled" defaultChecked disabled />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked read-only" defaultChecked readOnly />\n    </StackVertical>',...ToggleSwitchStates.parameters?.docs?.source}}},ToggleSwitchInline.parameters={...ToggleSwitchInline.parameters,docs:{...ToggleSwitchInline.parameters?.docs,source:{originalSource:'() => <>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch inline" isInline />\n        <span> </span>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch inline" isInline defaultChecked />\n    </>',...ToggleSwitchInline.parameters?.docs?.source}}},ToggleSwitchWithLongLabel.parameters={...ToggleSwitchWithLongLabel.parameters,docs:{...ToggleSwitchWithLongLabel.parameters?.docs,source:{originalSource:'() => <div style={{\n  width: \'200px\'\n}}>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="Label with a lot of content, too much probably, and most certainly enough to generate a line break in this small box." />\n    </div>',...ToggleSwitchWithLongLabel.parameters?.docs?.source}}},ToggleSwitchControlled.parameters={...ToggleSwitchControlled.parameters,docs:{...ToggleSwitchControlled.parameters?.docs,source:{originalSource:'() => {\n  const {\n    register,\n    watch\n  } = useForm();\n  const optionA = watch(\'option-a\');\n  return <Form>\n            <Form.Fieldset legend="Control switch state" required>\n                <Form.ToggleSwitch label="Toggle all" {...register(\'option-a\')} />\n                <Form.ToggleSwitch label="Controlled switch" checked={optionA} {...register(\'option-b\')} />\n            </Form.Fieldset>\n            <Form.Buttons>\n                <ButtonPrimary onClick={() => {}} type="submit">\n                    Submit\n                </ButtonPrimary>\n            </Form.Buttons>\n        </Form>;\n}',...ToggleSwitchControlled.parameters?.docs?.source}}},ToggleSwitchReactHooksForm.parameters={...ToggleSwitchReactHooksForm.parameters,docs:{...ToggleSwitchReactHooksForm.parameters?.docs,source:{originalSource:'() => {\n  const {\n    register,\n    handleSubmit\n  } = useForm<Inputs>();\n  const [formData, setFormData] = useState<null | Inputs>();\n  return <Form onSubmit={handleSubmit(setFormData)}>\n            {formData && <InlineMessageInformation title={\'Form data\'} description={JSON.stringify(formData, null, 2)} withBackground />}\n            <Form.Fieldset legend="Enabled">\n                <Form.ToggleSwitch label="Option a" {...register(\'option-a\')} />\n                <Form.ToggleSwitch label="Option b" defaultChecked {...register(\'option-b\')} />\n            </Form.Fieldset>\n            <Form.Fieldset legend="Read only" readOnly>\n                <Form.ToggleSwitch label="Option c" {...register(\'option-c\')} />\n                <Form.ToggleSwitch label="Option d" defaultChecked {...register(\'option-d\')} />\n            </Form.Fieldset>\n            <Form.Fieldset legend="Disabled" disabled>\n                <Form.ToggleSwitch label="Option e" disabled {...register(\'option-e\')} />\n                <Form.ToggleSwitch label="Option f" defaultChecked disabled {...register(\'option-f\')} />\n            </Form.Fieldset>\n            <Form.Buttons>\n                <ButtonPrimary onClick={() => {}} type="submit">\n                    Submit\n                </ButtonPrimary>\n            </Form.Buttons>\n        </Form>;\n}',...ToggleSwitchReactHooksForm.parameters?.docs?.source}}};const __namedExportsOrder=["ToggleSwitchStates","ToggleSwitchInline","ToggleSwitchWithLongLabel","ToggleSwitchControlled","ToggleSwitchReactHooksForm"]}}]);