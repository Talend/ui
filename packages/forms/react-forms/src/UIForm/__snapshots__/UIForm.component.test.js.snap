// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UIForm component should render form 1`] = `
<form
  autoComplete="off"
  className="tf-uiform theme-uiform my-form-class"
  id="myFormId"
  noValidate={true}
  onReset={[MockFunction]}
  onSubmit={[Function]}
>
  <div
    className="theme-form-content"
  >
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "autoFocus": true,
          "description": "Hint: this is the last name",
          "key": Array [
            "lastname",
          ],
          "minlength": 10,
          "ngModelOptions": Object {},
          "schema": Object {
            "minLength": 10,
            "type": "string",
          },
          "title": "Last Name (with description)",
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "firstname",
          ],
          "ngModelOptions": Object {},
          "placeholder": "Enter your firstname here",
          "required": true,
          "schema": Object {
            "type": "string",
          },
          "title": "First Name (with placeholder)",
          "triggers": Array [
            "after",
          ],
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "check",
          ],
          "title": "Check the thing",
          "triggers": Array [
            "after",
          ],
          "widget": "button",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
  </div>
  <div
    className="theme-form-actions tf-actions-wrapper"
  >
    <Buttons
      className="form-actions"
      id="myFormId-actions"
      onClick={[Function]}
      onTrigger={[Function]}
      schema={
        Object {
          "items": Array [
            Object {
              "bsStyle": "primary",
              "label": "Submit",
              "position": "right",
              "type": "submit",
              "widget": "button",
            },
          ],
        }
      }
    />
  </div>
</form>
`;

exports[`UIForm component should render form in text display mode 1`] = `
<form
  autoComplete="off"
  className="tf-uiform theme-uiform my-form-class"
  id="myFormId"
  noValidate={true}
  onReset={[MockFunction]}
  onSubmit={[Function]}
>
  <dl
    className="theme-form-content"
  >
    <Widget
      displayMode="text"
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "autoFocus": true,
          "description": "Hint: this is the last name",
          "key": Array [
            "lastname",
          ],
          "minlength": 10,
          "ngModelOptions": Object {},
          "schema": Object {
            "minLength": 10,
            "type": "string",
          },
          "title": "Last Name (with description)",
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      displayMode="text"
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "firstname",
          ],
          "ngModelOptions": Object {},
          "placeholder": "Enter your firstname here",
          "required": true,
          "schema": Object {
            "type": "string",
          },
          "title": "First Name (with placeholder)",
          "triggers": Array [
            "after",
          ],
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      displayMode="text"
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "check",
          ],
          "title": "Check the thing",
          "triggers": Array [
            "after",
          ],
          "widget": "button",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
  </dl>
</form>
`;

exports[`UIForm component should render provided actions 1`] = `
<form
  autoComplete="off"
  className="tf-uiform theme-uiform my-form-class"
  id="myFormId"
  noValidate={true}
  onReset={[MockFunction]}
  onSubmit={[Function]}
>
  <div
    className="theme-form-content"
  >
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "autoFocus": true,
          "description": "Hint: this is the last name",
          "key": Array [
            "lastname",
          ],
          "minlength": 10,
          "ngModelOptions": Object {},
          "schema": Object {
            "minLength": 10,
            "type": "string",
          },
          "title": "Last Name (with description)",
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "firstname",
          ],
          "ngModelOptions": Object {},
          "placeholder": "Enter your firstname here",
          "required": true,
          "schema": Object {
            "type": "string",
          },
          "title": "First Name (with placeholder)",
          "triggers": Array [
            "after",
          ],
          "type": "text",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
    <Widget
      errors={Object {}}
      id="myFormId"
      onChange={[Function]}
      onFinish={[Function]}
      onTrigger={[Function]}
      properties={Object {}}
      schema={
        Object {
          "key": Array [
            "check",
          ],
          "title": "Check the thing",
          "triggers": Array [
            "after",
          ],
          "widget": "button",
        }
      }
      widgets={
        Object {
          "custom": [Function],
        }
      }
    />
  </div>
  <div
    className="theme-form-actions tf-actions-wrapper"
  >
    <Buttons
      className="form-actions"
      id="myFormId-actions"
      onClick={[Function]}
      onTrigger={[Function]}
      schema={
        Object {
          "items": Array [
            Object {
              "title": "Reset",
              "type": "reset",
              "widget": "button",
            },
            Object {
              "disabled": true,
              "title": "Disabled",
              "type": "button",
              "widget": "button",
            },
            Object {
              "inProgress": true,
              "title": "In progress",
              "type": "button",
              "widget": "button",
            },
            Object {
              "title": "Trigger",
              "triggers": Array [
                "test",
              ],
              "type": "button",
              "widget": "button",
            },
            Object {
              "bsStyle": "primary",
              "title": "Submit",
              "type": "submit",
              "widget": "button",
            },
          ],
        }
      }
    />
  </div>
</form>
`;
