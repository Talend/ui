// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comparator field should render default Comparator 1`] = `
<div>
  <Translate(ActionDropdown)
    id="context-dropdown-related-items"
    items={
      Array [
        Object {
          "id": "comparison-operator-0",
          "label": ">",
          "value": ">",
        },
        Object {
          "id": "comparison-operator-1",
          "label": "<",
          "value": "<",
        },
        Object {
          "id": "comparison-operator-2",
          "label": "=",
          "value": "=",
        },
      ]
    }
    label=">"
    onSelect={[Function]}
  />
  <Widget
    errors={Object {}}
    id="default"
    isValid={true}
    onChange={[MockFunction]}
    onFinish={[MockFunction]}
    schema={
      Object {
        "autoFocus": undefined,
        "disabled": undefined,
        "key": Array [
          "default",
          "value",
        ],
        "readOnly": undefined,
        "required": true,
        "schema": Object {
          "type": "string",
        },
        "title": "value",
        "type": "text",
      }
    }
    widgets={Object {}}
  />
</div>
`;

exports[`Comparator field should render disabled Comparator 1`] = `
<div>
  <Translate(ActionDropdown)
    disabled={true}
    id="context-dropdown-related-items"
    items={
      Array [
        Object {
          "id": "comparison-operator-0",
          "label": ">",
          "value": ">",
        },
        Object {
          "id": "comparison-operator-1",
          "label": "<",
          "value": "<",
        },
        Object {
          "id": "comparison-operator-2",
          "label": "=",
          "value": "=",
        },
      ]
    }
    label=">"
    onSelect={[Function]}
  />
  <Widget
    errors={Object {}}
    id="default"
    isValid={true}
    onChange={[MockFunction]}
    onFinish={[MockFunction]}
    schema={
      Object {
        "autoFocus": undefined,
        "disabled": true,
        "key": Array [
          "default",
          "value",
        ],
        "readOnly": undefined,
        "required": true,
        "schema": Object {
          "type": "string",
        },
        "title": "value",
        "type": "text",
      }
    }
    widgets={Object {}}
  />
</div>
`;
