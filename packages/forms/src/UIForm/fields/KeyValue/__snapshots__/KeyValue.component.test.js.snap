// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KeyValue field should render autoFocused KeyValue 1`] = `
<FieldTemplate
  description="This is the key/value field"
  errorMessage="This is wrong"
  id="my-key-value-field"
  isValid={true}
  label="Variable"
>
  <dl
    className="theme-key-value"
  >
    <dt>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": true,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "key",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="lol"
        widgets={{}}
      />
    </dt>
    <dd>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": true,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "value",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="mdr"
        widgets={{}}
      />
    </dd>
  </dl>
</FieldTemplate>
`;

exports[`KeyValue field should render customized KeyValue 1`] = `
<FieldTemplate
  description="This is the key/value field"
  errorMessage="This is wrong"
  id="my-key-value-field"
  isValid={true}
  label="Variable"
>
  <dl
    className="theme-key-value"
  >
    <dt>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": true,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "key",
            ],
            "readOnly": true,
            "required": true,
            "schema": {
              "type": "number",
            },
            "type": "number",
          }
        }
        value="lol"
        widgets={{}}
      />
    </dt>
    <dd>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "value",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="mdr"
        widgets={{}}
      />
    </dd>
  </dl>
</FieldTemplate>
`;

exports[`KeyValue field should render default KeyValue 1`] = `
<FieldTemplate
  description="This is the key/value field"
  errorMessage="This is wrong"
  id="my-key-value-field"
  isValid={true}
  label="Variable"
>
  <dl
    className="theme-key-value"
  >
    <dt>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "key",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="lol"
        widgets={{}}
      />
    </dt>
    <dd>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "value",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="mdr"
        widgets={{}}
      />
    </dd>
  </dl>
</FieldTemplate>
`;

exports[`KeyValue field should render disabled KeyValue 1`] = `
<FieldTemplate
  description="This is the key/value field"
  errorMessage="This is wrong"
  id="my-key-value-field"
  isValid={true}
  label="Variable"
>
  <dl
    className="theme-key-value"
  >
    <dt>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": true,
            "key": [
              "infos",
              "variable",
              "key",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="lol"
        widgets={{}}
      />
    </dt>
    <dd>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": true,
            "key": [
              "infos",
              "variable",
              "value",
            ],
            "readOnly": undefined,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="mdr"
        widgets={{}}
      />
    </dd>
  </dl>
</FieldTemplate>
`;

exports[`KeyValue field should render readOnly KeyValue 1`] = `
<FieldTemplate
  description="This is the key/value field"
  errorMessage="This is wrong"
  id="my-key-value-field"
  isValid={true}
  label="Variable"
>
  <dl
    className="theme-key-value"
  >
    <dt>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "key",
            ],
            "readOnly": true,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="lol"
        widgets={{}}
      />
    </dt>
    <dd>
      <Widget
        onChange={[MockFunction]}
        onFinish={[MockFunction]}
        schema={
          {
            "autoFocus": undefined,
            "disabled": undefined,
            "key": [
              "infos",
              "variable",
              "value",
            ],
            "readOnly": true,
            "schema": {
              "type": "string",
            },
            "type": "text",
          }
        }
        value="mdr"
        widgets={{}}
      />
    </dd>
  </dl>
</FieldTemplate>
`;
