// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ObjectViewer.List should render List with props data as an array 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ul
    className="undefined tc-object-viewer list-unstyled"
>
    <li>
        <JSONLike
            data={
                Object {
                    "field0": "header1",
                  }
            }
            flat={true}
            jsonpath="$[0]"
        />
    </li>
    <li>
        <JSONLike
            data={
                Object {
                    "field1": "header2",
                  }
            }
            flat={true}
            jsonpath="$[1]"
        />
    </li>
</ul>,
  "nodes": Array [
    <ul
      className="undefined tc-object-viewer list-unstyled"
>
      <li>
            <JSONLike
                  data={
                        Object {
                              "field0": "header1",
                            }
                  }
                  flat={true}
                  jsonpath="$[0]"
            />
      </li>
      <li>
            <JSONLike
                  data={
                        Object {
                              "field1": "header2",
                            }
                  }
                  flat={true}
                  jsonpath="$[1]"
            />
      </li>
</ul>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <List
        data={
                Array [
                        Object {
                          "field0": "header1",
                        },
                        Object {
                          "field1": "header2",
                        },
                      ]
        }
        flat={true}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "data": Array [
            Object {
              "field0": "header1",
            },
            Object {
              "field1": "header2",
            },
          ],
          "flat": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ul
          className="undefined tc-object-viewer list-unstyled"
>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field0": "header1",
                                                }
                              }
                              flat={true}
                              jsonpath="$[0]"
                    />
          </li>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field1": "header2",
                                                }
                              }
                              flat={true}
                              jsonpath="$[1]"
                    />
          </li>
</ul>,
        "_debugID": 4,
        "_renderedOutput": <ul
          className="undefined tc-object-viewer list-unstyled"
>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field0": "header1",
                                                }
                              }
                              flat={true}
                              jsonpath="$[0]"
                    />
          </li>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field1": "header2",
                                                }
                              }
                              flat={true}
                              jsonpath="$[1]"
                    />
          </li>
</ul>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <List
    data={
        Array [
            Object {
              "field0": "header1",
            },
            Object {
              "field1": "header2",
            },
          ]
    }
    flat={true}
/>,
}
`;

exports[`ObjectViewer.List should render List with props data as an object 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ul
    className="undefined tc-object-viewer list-unstyled"
>
    <li>
        <JSONLike
            data={
                Object {
                    "field0": "header1",
                  }
            }
            flat={true}
            jsonpath="$[0]"
        />
    </li>
    <li>
        <JSONLike
            data={
                Object {
                    "field1": "header2",
                  }
            }
            flat={true}
            jsonpath="$[1]"
        />
    </li>
</ul>,
  "nodes": Array [
    <ul
      className="undefined tc-object-viewer list-unstyled"
>
      <li>
            <JSONLike
                  data={
                        Object {
                              "field0": "header1",
                            }
                  }
                  flat={true}
                  jsonpath="$[0]"
            />
      </li>
      <li>
            <JSONLike
                  data={
                        Object {
                              "field1": "header2",
                            }
                  }
                  flat={true}
                  jsonpath="$[1]"
            />
      </li>
</ul>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <List
        data={
                Object {
                        "dataset": Array [
                          Object {
                            "field0": "header1",
                          },
                          Object {
                            "field1": "header2",
                          },
                        ],
                        "schema": Map {
                          "field0" => "type1",
                          "field1" => "type2",
                        },
                      }
        }
        flat={true}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "data": Object {
            "dataset": Array [
              Object {
                "field0": "header1",
              },
              Object {
                "field1": "header2",
              },
            ],
            "schema": Map {
              "field0" => "type1",
              "field1" => "type2",
            },
          },
          "flat": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ul
          className="undefined tc-object-viewer list-unstyled"
>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field0": "header1",
                                                }
                              }
                              flat={true}
                              jsonpath="$[0]"
                    />
          </li>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field1": "header2",
                                                }
                              }
                              flat={true}
                              jsonpath="$[1]"
                    />
          </li>
</ul>,
        "_debugID": 2,
        "_renderedOutput": <ul
          className="undefined tc-object-viewer list-unstyled"
>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field0": "header1",
                                                }
                              }
                              flat={true}
                              jsonpath="$[0]"
                    />
          </li>
          <li>
                    <JSONLike
                              data={
                                        Object {
                                                  "field1": "header2",
                                                }
                              }
                              flat={true}
                              jsonpath="$[1]"
                    />
          </li>
</ul>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <List
    data={
        Object {
            "dataset": Array [
              Object {
                "field0": "header1",
              },
              Object {
                "field1": "header2",
              },
            ],
            "schema": Map {
              "field0" => "type1",
              "field1" => "type2",
            },
          }
    }
    flat={true}
/>,
}
`;
