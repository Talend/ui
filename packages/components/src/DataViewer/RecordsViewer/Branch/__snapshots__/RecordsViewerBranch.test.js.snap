// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecordsViewerBranch should render the branch with children 1`] = `
<div
  className="theme-tc-records-viewer-branch tc-records-viewer-branch"
>
  <span
    className="theme-tc-records-viewer-branch-content tc-records-viewer-branch-content"
    onClick={[Function]}
    onKeyDown={[Function]}
    role="button"
    tabIndex="0"
  >
    <withI18nextTranslation(TreeBranchIcon)
      dataKey="myDataKey"
      getIcon={[MockFunction]}
      index={0}
      jsonpath="$"
      onToggle={[MockFunction]}
      opened={true}
      style={
        Object {
          "marginLeft": -10,
        }
      }
      t={[Function]}
      useCustomIcon={false}
      value={
        Object {
          "schema": Object {
            "@talend-quality@": Object {
              "-1": 346,
              "0": 33,
              "1": 655,
              "total": 1034,
            },
            "doc": "Id",
            "name": "id",
            "type": Object {
              "type": "integer",
            },
          },
        }
      }
    />
    <span
      className="theme-tc-records-viewer-branch-text tc-records-viewer-branch-text"
    >
      myDataKey
    </span>
  </span>
</div>
`;

exports[`RecordsViewerBranch should render the branch with length badge 1`] = `
<div
  className="theme-tc-records-viewer-branch tc-records-viewer-branch"
>
  <span
    className="theme-tc-records-viewer-branch-content tc-records-viewer-branch-content"
    onClick={[Function]}
    onKeyDown={[Function]}
    role="button"
    tabIndex="0"
  >
    <withI18nextTranslation(TreeBranchIcon)
      dataKey="myDataKey"
      getIcon={[MockFunction]}
      index={0}
      jsonpath="$"
      onToggle={[MockFunction]}
      style={
        Object {
          "marginLeft": -10,
        }
      }
      t={[Function]}
      useCustomIcon={false}
      value={
        Object {
          "schema": Object {
            "@talend-quality@": Object {
              "-1": 346,
              "0": 33,
              "1": 655,
              "total": 1034,
            },
            "doc": "Id",
            "name": "id",
            "type": Object {
              "type": "integer",
            },
          },
        }
      }
    />
    <span
      className="theme-tc-records-viewer-branch-text tc-records-viewer-branch-text"
    >
      myDataKey
    </span>
    <LengthBadge
      lengthValue={2}
    />
    <TooltipTrigger
      label="Contains invalid value(s)"
    >
      <span
        className="theme-tc-records-viewer-branch-quality tc-records-viewer-branch-quality"
      >
        <QualityDot />
      </span>
    </TooltipTrigger>
  </span>
</div>
`;

exports[`RecordsViewerBranch should render the branch with quality dot 1`] = `
<div
  className="theme-tc-records-viewer-branch tc-records-viewer-branch"
>
  <span
    className="theme-tc-records-viewer-branch-content tc-records-viewer-branch-content"
    onClick={[Function]}
    onKeyDown={[Function]}
    role="button"
    tabIndex="0"
  >
    <withI18nextTranslation(TreeBranchIcon)
      dataKey="myDataKey"
      getIcon={[MockFunction]}
      index={0}
      jsonpath="$"
      onToggle={[MockFunction]}
      opened={false}
      style={
        Object {
          "marginLeft": -10,
        }
      }
      t={[Function]}
      useCustomIcon={false}
      value={
        Object {
          "schema": Object {
            "@talend-quality@": Object {
              "-1": 346,
              "0": 33,
              "1": 655,
              "total": 1034,
            },
            "doc": "Id",
            "name": "id",
            "type": Object {
              "type": "integer",
            },
          },
        }
      }
    />
    <span
      className="theme-tc-records-viewer-branch-text tc-records-viewer-branch-text"
    >
      myDataKey
    </span>
    <TooltipTrigger
      label="Contains invalid value(s)"
    >
      <span
        className="theme-tc-records-viewer-branch-quality tc-records-viewer-branch-quality"
      >
        <QualityDot />
      </span>
    </TooltipTrigger>
  </span>
</div>
`;
