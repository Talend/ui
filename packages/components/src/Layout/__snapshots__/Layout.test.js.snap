// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout should render Layout OneColumn 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <header
    className="tc-layout-header theme-header"
    role="banner"
  >
    <h1>
      Header
    </h1>
  </header>
  <div
    className="tc-layout-one-column theme-main"
  >
    <div
      className="theme-tc-with-drawer"
    >
      <div
        style={
          Object {
            "display": "flex",
            "flexDirection": "column",
            "height": "100%",
            "overflow": "auto",
          }
        }
      >
        <h1>
          Column one
        </h1>
      </div>
      <div
        className="theme-tc-with-drawer-container"
      />
    </div>
  </div>
</div>
`;

exports[`Layout should render Layout TwoColumns 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <header
    className="tc-layout-header theme-header"
    role="banner"
  >
    <h1>
      Header
    </h1>
  </header>
  <div
    className="tc-layout-two-columns theme-container"
  >
    <div
      className="tc-layout-two-columns-left theme-sidemenu"
    >
      <h1>
        Column one
      </h1>
    </div>
    <div
      className="tc-layout-two-columns-main theme-main"
    >
      <div
        className="theme-tc-with-drawer"
      >
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "100%",
              "overflow": "auto",
            }
          }
        >
          <h1>
            Column two
          </h1>
        </div>
        <div
          className="theme-tc-with-drawer-container"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`Layout should render layout with Drawer component 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <header
    className="tc-layout-header theme-header"
    role="banner"
  >
    <h1>
      Header
    </h1>
  </header>
  <div
    className="tc-layout-two-columns theme-container"
  >
    <div
      className="tc-layout-two-columns-left theme-sidemenu"
    >
      <h1>
        Column one
      </h1>
    </div>
    <div
      className="tc-layout-two-columns-main theme-main"
    >
      <div
        className="theme-tc-with-drawer"
      >
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "100%",
              "overflow": "auto",
            }
          }
        >
          <h1>
            Column two
          </h1>
        </div>
        <div
          className="theme-tc-with-drawer-container"
        >
          <div
            className="tc-with-drawer-wrapper"
            onTransitionEnd={[Function]}
            style={
              Object {
                "transform": "translateX(100%)",
              }
            }
          >
            <span
              style={
                Object {
                  "opacity": 0.9,
                }
              }
            />
            <div
              style={
                Object {
                  "width": 500,
                }
              }
              transitioned={false}
            >
              <h1>
                Hello drawers
              </h1>
              <p>
                You should not being able to read this because I'm first
              </p>
            </div>
          </div>
          <div
            className="tc-with-drawer-wrapper"
            onTransitionEnd={[Function]}
            style={
              Object {
                "transform": "translateX(100%)",
              }
            }
          >
            <span
              style={
                Object {
                  "opacity": 0.9,
                }
              }
            />
            <div
              style={
                Object {
                  "width": 400,
                }
              }
              transitioned={false}
            >
              <h1>
                Hello drawers
              </h1>
              <p>
                The content dictate the width
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Layout should render layout with SubHeader 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubHeaderBar
    onGoBack={[Function]}
    t={[Function]}
    title="defaultTitle"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <ActionBar
          className="theme-tc-subheader-navbar tc-subheader-navbar"
>
          <SubHeaderBarActions
                    left={true}
          >
                    <Action
                              bsStyle="link"
                              className="theme-tc-subheader-back-button tc-subheader-back-button"
                              hideLabel={true}
                              icon="talend-arrow-left"
                              id="backArrow"
                              label="Go Back"
                              onClick={[Function]}
                    />
                    <InputTitleSubHeader
                              editMode={false}
                              inProgress={false}
                              loading={false}
                              t={[Function]}
                              title="defaultTitle"
                    />
          </SubHeaderBarActions>
</ActionBar>,
        null,
      ],
      "className": "theme-tc-subheader tc-subheader",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            null,
            <SubHeaderBarActions
              left={true}
>
              <Action
                            bsStyle="link"
                            className="theme-tc-subheader-back-button tc-subheader-back-button"
                            hideLabel={true}
                            icon="talend-arrow-left"
                            id="backArrow"
                            label="Go Back"
                            onClick={[Function]}
              />
              <InputTitleSubHeader
                            editMode={false}
                            inProgress={false}
                            loading={false}
                            t={[Function]}
                            title="defaultTitle"
              />
</SubHeaderBarActions>,
            false,
            null,
            false,
            null,
            false,
            null,
          ],
          "className": "theme-tc-subheader-navbar tc-subheader-navbar",
        },
        "ref": null,
        "rendered": Array [
          null,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                null,
                <Action
                  bsStyle="link"
                  className="theme-tc-subheader-back-button tc-subheader-back-button"
                  hideLabel={true}
                  icon="talend-arrow-left"
                  id="backArrow"
                  label="Go Back"
                  onClick={[Function]}
/>,
                null,
                <InputTitleSubHeader
                  editMode={false}
                  inProgress={false}
                  loading={false}
                  t={[Function]}
                  title="defaultTitle"
/>,
                null,
              ],
              "left": true,
            },
            "ref": null,
            "rendered": Array [
              null,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "bsStyle": "link",
                  "className": "theme-tc-subheader-back-button tc-subheader-back-button",
                  "hideLabel": true,
                  "icon": "talend-arrow-left",
                  "id": "backArrow",
                  "label": "Go Back",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              null,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "editMode": false,
                  "inProgress": false,
                  "loading": false,
                  "t": [Function],
                  "title": "defaultTitle",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              null,
            ],
            "type": [Function],
          },
          false,
          null,
          false,
          null,
          false,
          null,
        ],
        "type": [Function],
      },
      null,
    ],
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <ActionBar
            className="theme-tc-subheader-navbar tc-subheader-navbar"
>
            <SubHeaderBarActions
                        left={true}
            >
                        <Action
                                    bsStyle="link"
                                    className="theme-tc-subheader-back-button tc-subheader-back-button"
                                    hideLabel={true}
                                    icon="talend-arrow-left"
                                    id="backArrow"
                                    label="Go Back"
                                    onClick={[Function]}
                        />
                        <InputTitleSubHeader
                                    editMode={false}
                                    inProgress={false}
                                    loading={false}
                                    t={[Function]}
                                    title="defaultTitle"
                        />
            </SubHeaderBarActions>
</ActionBar>,
          null,
        ],
        "className": "theme-tc-subheader tc-subheader",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              null,
              <SubHeaderBarActions
                left={true}
>
                <Action
                                bsStyle="link"
                                className="theme-tc-subheader-back-button tc-subheader-back-button"
                                hideLabel={true}
                                icon="talend-arrow-left"
                                id="backArrow"
                                label="Go Back"
                                onClick={[Function]}
                />
                <InputTitleSubHeader
                                editMode={false}
                                inProgress={false}
                                loading={false}
                                t={[Function]}
                                title="defaultTitle"
                />
</SubHeaderBarActions>,
              false,
              null,
              false,
              null,
              false,
              null,
            ],
            "className": "theme-tc-subheader-navbar tc-subheader-navbar",
          },
          "ref": null,
          "rendered": Array [
            null,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  null,
                  <Action
                    bsStyle="link"
                    className="theme-tc-subheader-back-button tc-subheader-back-button"
                    hideLabel={true}
                    icon="talend-arrow-left"
                    id="backArrow"
                    label="Go Back"
                    onClick={[Function]}
/>,
                  null,
                  <InputTitleSubHeader
                    editMode={false}
                    inProgress={false}
                    loading={false}
                    t={[Function]}
                    title="defaultTitle"
/>,
                  null,
                ],
                "left": true,
              },
              "ref": null,
              "rendered": Array [
                null,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "bsStyle": "link",
                    "className": "theme-tc-subheader-back-button tc-subheader-back-button",
                    "hideLabel": true,
                    "icon": "talend-arrow-left",
                    "id": "backArrow",
                    "label": "Go Back",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                null,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "editMode": false,
                    "inProgress": false,
                    "loading": false,
                    "t": [Function],
                    "title": "defaultTitle",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                null,
              ],
              "type": [Function],
            },
            false,
            null,
            false,
            null,
            false,
            null,
          ],
          "type": [Function],
        },
        null,
      ],
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Layout should render layout with TabBar component 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <header
    className="tc-layout-header theme-header"
    role="banner"
  >
    <h1>
      Header
    </h1>
  </header>
  <div
    className="tc-layout-two-columns theme-container"
  >
    <div
      className="tc-layout-two-columns-left theme-sidemenu"
    >
      <h1>
        Column one
      </h1>
    </div>
    <div
      className="tc-layout-two-columns-main theme-main"
    >
      <div
        className="theme-tc-with-drawer"
      >
        <nav
          className="nav tc-tab-bar theme-tc-tab-bar"
        >
          <ul
            className="nav nav-tabs tc-tab-bar-actions"
          >
            <li
              className="tc-tab-bar-action"
            >
              <button
                className="btn btn-link"
                disabled={false}
                id="tab-bar-action-1"
                onClick={[Function]}
                onMouseDown={[Function]}
                role={null}
                type="button"
              >
                <span>
                  Tab1
                </span>
              </button>
            </li>
            <li
              className="tc-tab-bar-action active"
            >
              <button
                className="btn btn-link"
                disabled={false}
                id="tab-bar-action-2"
                onClick={[Function]}
                onMouseDown={[Function]}
                role={null}
                type="button"
              >
                <span>
                  Tab2
                </span>
              </button>
            </li>
            <li
              className="tc-tab-bar-action"
            >
              <button
                className="btn btn-link"
                disabled={false}
                id="tab-bar-action-3"
                onClick={[Function]}
                onMouseDown={[Function]}
                role={null}
                type="button"
              >
                <span>
                  Tab3
                </span>
              </button>
            </li>
          </ul>
        </nav>
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "100%",
              "overflow": "auto",
            }
          }
        >
          <h1>
            Column two
          </h1>
        </div>
        <div
          className="theme-tc-with-drawer-container"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`Layout should render layout with footer component 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <header
    className="tc-layout-header theme-header"
    role="banner"
  >
    <h1>
      Header
    </h1>
  </header>
  <div
    className="tc-layout-one-column theme-main"
  >
    <div
      className="theme-tc-with-drawer"
    >
      <div
        style={
          Object {
            "display": "flex",
            "flexDirection": "column",
            "height": "100%",
            "overflow": "auto",
          }
        }
      >
        <h1>
          Column one
        </h1>
      </div>
      <div
        className="theme-tc-with-drawer-container"
      />
    </div>
  </div>
  <footer
    className="tc-layout-footer theme-footer"
    role="contentinfo"
  >
    <h3>
      Footer
    </h3>
  </footer>
</div>
`;

exports[`Layout should render layout without header 1`] = `
<div
  className="tc-layout theme-layout"
  id={undefined}
>
  <div
    className="tc-layout-one-column theme-main"
  >
    <div
      className="theme-tc-with-drawer"
    >
      <div
        style={
          Object {
            "display": "flex",
            "flexDirection": "column",
            "height": "100%",
            "overflow": "auto",
          }
        }
      >
        <h1>
          Column one
        </h1>
      </div>
      <div
        className="theme-tc-with-drawer-container"
      />
    </div>
  </div>
</div>
`;
