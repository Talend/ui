// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List DisplayMode should render 1`] = `
<ListDisplayMode
  displayModesOptions={
    Array [
      "table",
      "large",
    ]
  }
  id="myDisplayMode"
>
  <div
    className="tc-display-mode-toggle theme-tc-display-mode-toggle"
  >
    <Memo()
      displayMode="table"
      displayModeOption="table"
      icon="talend-table"
      id="myDisplayMode"
      key="table"
      onSelect={[Function]}
    >
      <ActionIconToggle
        active={true}
        disabled={true}
        icon="talend-table"
        id="myDisplayMode-table"
        key="table"
        label="Set Table as current display mode."
        onClick={[Function]}
        tick={false}
        tooltipPlacement="top"
      >
        <TooltipTrigger
          label="Set Table as current display mode."
          tooltipPlacement="top"
        >
          <Button
            active={false}
            aria-describedby="42"
            aria-label="Set Table as current display mode."
            aria-pressed={true}
            block={false}
            bsClass="btn"
            bsStyle="link"
            className="tc-icon-toggle theme-tc-icon-toggle theme-active active"
            disabled={true}
            id="myDisplayMode-table"
            key=".0"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyPress={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <button
              aria-describedby="42"
              aria-label="Set Table as current display mode."
              aria-pressed={true}
              className="tc-icon-toggle theme-tc-icon-toggle theme-active active btn btn-link"
              disabled={true}
              id="myDisplayMode-table"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
              type="button"
            >
              <ForwardRef
                name="talend-table"
              >
                <styled.svg
                  aria-hidden="true"
                  className="tc-svg-icon tc-icon-name-talend-table"
                  focusable="false"
                >
                  <StyledComponent
                    aria-hidden="true"
                    className="tc-svg-icon tc-icon-name-talend-table"
                    focusable="false"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "dQOrnx",
                          "rules": Array [
                            "
	width: ",
                            "1.6rem",
                            ";
	height: ",
                            "1.6rem",
                            ";
	transform-origin: center;

	circle,
	path,
	polygon,
	polyline {
		",
                            [Function],
                            ";
		",
                            [Function],
                            ";
	}

	.ti-background {
		",
                            [Function],
                            ";
	}

	.ti-border {
		",
                            [Function],
                            ";
	}

	&.spin {
		animation-name: svg-spin;
		animation-duration: 2s;
		animation-iteration-count: infinite;
		animation-timing-function: linear;
	}
	&.rotate-45 {
		transform: rotate(45deg);
	}
	&.rotate-90 {
		transform: rotate(90deg);
	}
	&.rotate-180 {
		transform: rotate(180deg);
	}
	&.rotate-270 {
		transform: rotate(270deg);
	}
	&.flip-vertical {
		transform: scaleY(-1);
	}
	&.flip-horizontal {
		transform: scaleX(-1);
	}
	@keyframes svg-spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
",
                          ],
                        },
                        "displayName": "styled.svg",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "svg",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={
                      Object {
                        "current": <svg
                          aria-hidden="true"
                          class="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-table"
                          focusable="false"
                        />,
                      }
                    }
                  >
                    <svg
                      aria-hidden="true"
                      className="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-table"
                      focusable="false"
                    />
                  </StyledComponent>
                </styled.svg>
              </ForwardRef>
            </button>
          </Button>
        </TooltipTrigger>
      </ActionIconToggle>
    </Memo()>
    <Memo()
      displayMode="table"
      displayModeOption="large"
      icon="talend-expanded"
      id="myDisplayMode"
      key="large"
      onSelect={[Function]}
    >
      <ActionIconToggle
        active={false}
        disabled={false}
        icon="talend-expanded"
        id="myDisplayMode-large"
        key="large"
        label="Set Expanded as current display mode."
        onClick={[Function]}
        tick={false}
        tooltipPlacement="top"
      >
        <TooltipTrigger
          label="Set Expanded as current display mode."
          tooltipPlacement="top"
        >
          <Button
            active={false}
            aria-describedby="42"
            aria-label="Set Expanded as current display mode."
            aria-pressed={false}
            block={false}
            bsClass="btn"
            bsStyle="link"
            className="tc-icon-toggle theme-tc-icon-toggle"
            disabled={false}
            id="myDisplayMode-large"
            key=".0"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyPress={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <button
              aria-describedby="42"
              aria-label="Set Expanded as current display mode."
              aria-pressed={false}
              className="tc-icon-toggle theme-tc-icon-toggle btn btn-link"
              disabled={false}
              id="myDisplayMode-large"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
              type="button"
            >
              <ForwardRef
                name="talend-expanded"
              >
                <styled.svg
                  aria-hidden="true"
                  className="tc-svg-icon tc-icon-name-talend-expanded"
                  focusable="false"
                >
                  <StyledComponent
                    aria-hidden="true"
                    className="tc-svg-icon tc-icon-name-talend-expanded"
                    focusable="false"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "dQOrnx",
                          "rules": Array [
                            "
	width: ",
                            "1.6rem",
                            ";
	height: ",
                            "1.6rem",
                            ";
	transform-origin: center;

	circle,
	path,
	polygon,
	polyline {
		",
                            [Function],
                            ";
		",
                            [Function],
                            ";
	}

	.ti-background {
		",
                            [Function],
                            ";
	}

	.ti-border {
		",
                            [Function],
                            ";
	}

	&.spin {
		animation-name: svg-spin;
		animation-duration: 2s;
		animation-iteration-count: infinite;
		animation-timing-function: linear;
	}
	&.rotate-45 {
		transform: rotate(45deg);
	}
	&.rotate-90 {
		transform: rotate(90deg);
	}
	&.rotate-180 {
		transform: rotate(180deg);
	}
	&.rotate-270 {
		transform: rotate(270deg);
	}
	&.flip-vertical {
		transform: scaleY(-1);
	}
	&.flip-horizontal {
		transform: scaleX(-1);
	}
	@keyframes svg-spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
",
                          ],
                        },
                        "displayName": "styled.svg",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "svg",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={
                      Object {
                        "current": <svg
                          aria-hidden="true"
                          class="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-expanded"
                          focusable="false"
                        />,
                      }
                    }
                  >
                    <svg
                      aria-hidden="true"
                      className="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-expanded"
                      focusable="false"
                    />
                  </StyledComponent>
                </styled.svg>
              </ForwardRef>
            </button>
          </Button>
        </TooltipTrigger>
      </ActionIconToggle>
    </Memo()>
  </div>
</ListDisplayMode>
`;
