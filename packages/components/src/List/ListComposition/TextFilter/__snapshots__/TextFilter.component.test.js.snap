// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextFilter should render text filter component 1`] = `
<TextFilter
  id="myTextFilter"
  initialDocked={true}
>
  <withI18nextTranslation(FilterBar)
    autoFocus={true}
    className=""
    debounceTimeout={300}
    disabled={false}
    dockable={true}
    docked={true}
    focus={false}
    id="myTextFilter"
    navbar={true}
    onFilter={[Function]}
    onToggle={[Function]}
    t={[Function]}
    value=""
  >
    <Action
      bsStyle="link"
      className=""
      hideLabel={true}
      icon="talend-search"
      id="myTextFilter"
      label="Toggle filter"
      onClick={[Function]}
      role="search"
    >
      <withI18nextTranslation(ActionButton)
        available={true}
        bsStyle="link"
        className=""
        disabled={false}
        hideLabel={true}
        icon="talend-search"
        id="myTextFilter"
        inProgress={false}
        label="Toggle filter"
        loading={false}
        onClick={[Function]}
        role="search"
        t={[Function]}
        tooltipPlacement="top"
      >
        <TooltipTrigger
          label="Toggle filter"
          tooltipPlacement="top"
        >
          <Button
            active={false}
            aria-describedby="42"
            aria-label="Toggle filter"
            block={false}
            bsClass="btn"
            bsStyle="link"
            className="btn-icon-only"
            disabled={false}
            id="myTextFilter"
            key=".0"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyPress={[Function]}
            onMouseDown={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
            role="search"
          >
            <button
              aria-describedby="42"
              aria-label="Toggle filter"
              className="btn-icon-only btn btn-link"
              disabled={false}
              id="myTextFilter"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              onMouseDown={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
              role="search"
              type="button"
            >
              <ForwardRef
                key="icon"
                name="talend-search"
              >
                <styled.svg
                  aria-hidden="true"
                  className="tc-svg-icon tc-icon-name-talend-search"
                  focusable="false"
                >
                  <StyledComponent
                    aria-hidden="true"
                    className="tc-svg-icon tc-icon-name-talend-search"
                    focusable="false"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "dQOrnx",
                          "rules": Array [
                            "
	width: ",
                            "1.6rem",
                            ";
	height: ",
                            "1.6rem",
                            ";
	transform-origin: center;

	circle,
	path,
	polygon,
	polyline {
		",
                            [Function],
                            ";
		",
                            [Function],
                            ";
	}

	.ti-background {
		",
                            [Function],
                            ";
	}

	.ti-border {
		",
                            [Function],
                            ";
	}

	&.spin {
		animation-name: svg-spin;
		animation-duration: 2s;
		animation-iteration-count: infinite;
		animation-timing-function: linear;
	}
	&.rotate-45 {
		transform: rotate(45deg);
	}
	&.rotate-90 {
		transform: rotate(90deg);
	}
	&.rotate-180 {
		transform: rotate(180deg);
	}
	&.rotate-270 {
		transform: rotate(270deg);
	}
	&.flip-vertical {
		transform: scaleY(-1);
	}
	&.flip-horizontal {
		transform: scaleX(-1);
	}
	@keyframes svg-spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
",
                          ],
                        },
                        "displayName": "styled.svg",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "svg",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={
                      Object {
                        "current": <svg
                          aria-hidden="true"
                          class="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-search"
                          focusable="false"
                        />,
                      }
                    }
                  >
                    <svg
                      aria-hidden="true"
                      className="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-search"
                      focusable="false"
                    />
                  </StyledComponent>
                </styled.svg>
              </ForwardRef>
            </button>
          </Button>
        </TooltipTrigger>
      </withI18nextTranslation(ActionButton)>
    </Action>
  </withI18nextTranslation(FilterBar)>
</TextFilter>
`;

exports[`TextFilter should render text filter component with defined docked state 1`] = `
<TextFilter
  docked={true}
  id="myTextFilter"
  initialDocked={true}
>
  <withI18nextTranslation(FilterBar)
    autoFocus={true}
    className=""
    debounceTimeout={300}
    disabled={false}
    dockable={true}
    docked={true}
    focus={false}
    id="myTextFilter"
    navbar={true}
    onFilter={[Function]}
    onToggle={[Function]}
    t={[Function]}
    value=""
  >
    <Action
      bsStyle="link"
      className=""
      hideLabel={true}
      icon="talend-search"
      id="myTextFilter"
      label="Toggle filter"
      onClick={[Function]}
      role="search"
    >
      <withI18nextTranslation(ActionButton)
        available={true}
        bsStyle="link"
        className=""
        disabled={false}
        hideLabel={true}
        icon="talend-search"
        id="myTextFilter"
        inProgress={false}
        label="Toggle filter"
        loading={false}
        onClick={[Function]}
        role="search"
        t={[Function]}
        tooltipPlacement="top"
      >
        <TooltipTrigger
          label="Toggle filter"
          tooltipPlacement="top"
        >
          <Button
            active={false}
            aria-describedby="42"
            aria-label="Toggle filter"
            block={false}
            bsClass="btn"
            bsStyle="link"
            className="btn-icon-only"
            disabled={false}
            id="myTextFilter"
            key=".0"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyPress={[Function]}
            onMouseDown={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
            role="search"
          >
            <button
              aria-describedby="42"
              aria-label="Toggle filter"
              className="btn-icon-only btn btn-link"
              disabled={false}
              id="myTextFilter"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              onMouseDown={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
              role="search"
              type="button"
            >
              <ForwardRef
                key="icon"
                name="talend-search"
              >
                <styled.svg
                  aria-hidden="true"
                  className="tc-svg-icon tc-icon-name-talend-search"
                  focusable="false"
                >
                  <StyledComponent
                    aria-hidden="true"
                    className="tc-svg-icon tc-icon-name-talend-search"
                    focusable="false"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "dQOrnx",
                          "rules": Array [
                            "
	width: ",
                            "1.6rem",
                            ";
	height: ",
                            "1.6rem",
                            ";
	transform-origin: center;

	circle,
	path,
	polygon,
	polyline {
		",
                            [Function],
                            ";
		",
                            [Function],
                            ";
	}

	.ti-background {
		",
                            [Function],
                            ";
	}

	.ti-border {
		",
                            [Function],
                            ";
	}

	&.spin {
		animation-name: svg-spin;
		animation-duration: 2s;
		animation-iteration-count: infinite;
		animation-timing-function: linear;
	}
	&.rotate-45 {
		transform: rotate(45deg);
	}
	&.rotate-90 {
		transform: rotate(90deg);
	}
	&.rotate-180 {
		transform: rotate(180deg);
	}
	&.rotate-270 {
		transform: rotate(270deg);
	}
	&.flip-vertical {
		transform: scaleY(-1);
	}
	&.flip-horizontal {
		transform: scaleX(-1);
	}
	@keyframes svg-spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
",
                          ],
                        },
                        "displayName": "styled.svg",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "svg",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={
                      Object {
                        "current": <svg
                          aria-hidden="true"
                          class="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-search"
                          focusable="false"
                        />,
                      }
                    }
                  >
                    <svg
                      aria-hidden="true"
                      className="sc-EHOje dQOrnx tc-svg-icon tc-icon-name-talend-search"
                      focusable="false"
                    />
                  </StyledComponent>
                </styled.svg>
              </ForwardRef>
            </button>
          </Button>
        </TooltipTrigger>
      </withI18nextTranslation(ActionButton)>
    </Action>
  </withI18nextTranslation(FilterBar)>
</TextFilter>
`;
