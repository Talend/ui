// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List should not render the toolbar without toolbar props 1`] = `
<div
  className="tc-list theme-list"
>
  <ListToolbar
    components={Object {}}
    displayMode="table"
    list={
      Object {
        "columns": Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ],
        "itemProps": Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        },
        "items": Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ],
        "titleProps": Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        },
      }
    }
  />
  <div
    className="tc-list-display-virtualized"
  >
    <ListToVirtualizedList
      columns={
        Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ]
      }
      displayMode="table"
      itemProps={
        Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        }
      }
      items={
        Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ]
      }
      titleProps={
        Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        }
      }
    >
      <VirtualizedList
        collection={
          Array [
            Object {
              "id": 1,
              "name": "Hello world",
            },
            Object {
              "id": 2,
              "name": "Foo",
            },
            Object {
              "id": 3,
              "name": "Bar",
            },
          ]
        }
        defaultHeight={250}
        isSelected={[Function]}
        onRowDoubleClick={[MockFunction]}
        onToggleAll={[MockFunction]}
        selectionToggle={[MockFunction]}
        sort={null}
        sortDirection="ASC"
        type="TABLE"
      >
        <AutoSizer
          disableHeight={false}
          disableWidth={false}
          onResize={[Function]}
          style={Object {}}
        >
          <div
            style={
              Object {
                "height": 0,
                "overflow": "visible",
                "width": 0,
              }
            }
          >
            <VirtualizedList(RendererSelector)
              collection={
                Array [
                  Object {
                    "id": 1,
                    "name": "Hello world",
                  },
                  Object {
                    "id": 2,
                    "name": "Foo",
                  },
                  Object {
                    "id": 3,
                    "name": "Bar",
                  },
                ]
              }
              height={250}
              isSelected={[Function]}
              noRowsRenderer={[Function]}
              onRowDoubleClick={[MockFunction]}
              sort={null}
              sortDirection="ASC"
              type="TABLE"
              width={0}
            >
              <VirtualizedList(ListTable)
                collection={
                  Array [
                    Object {
                      "id": 1,
                      "name": "Hello world",
                    },
                    Object {
                      "id": 2,
                      "name": "Foo",
                    },
                    Object {
                      "id": 3,
                      "name": "Bar",
                    },
                  ]
                }
                disableHeader={false}
                height={250}
                isSelected={[Function]}
                noRowsRenderer={[Function]}
                onRowDoubleClick={[MockFunction]}
                rowHeight={50}
                sort={null}
                sortDirection="ASC"
                width={0}
              >
                <Table
                  className="tc-list-table theme-tc-list-table"
                  disableHeader={false}
                  estimatedRowSize={30}
                  gridClassName="theme-grid tc-dropdown-container"
                  headerHeight={40}
                  headerRowRenderer={[Function]}
                  headerStyle={Object {}}
                  height={250}
                  noRowsRenderer={[Function]}
                  onRowDoubleClick={[Function]}
                  onRowsRendered={[Function]}
                  onScroll={[Function]}
                  overscanIndicesGetter={[Function]}
                  overscanRowCount={10}
                  rowClassName={[Function]}
                  rowCount={3}
                  rowGetter={[Function]}
                  rowHeight={50}
                  rowRenderer={[Function]}
                  rowStyle={Object {}}
                  scrollToAlignment="auto"
                  scrollToIndex={-1}
                  sort={null}
                  sortDirection="ASC"
                  style={Object {}}
                  width={0}
                >
                  <div
                    aria-colcount={3}
                    aria-rowcount={3}
                    className="ReactVirtualized__Table tc-list-table theme-tc-list-table"
                    role="grid"
                    style={Object {}}
                  >
                    <div
                      className="ReactVirtualized__Table__headerRow tc-list-item theme-row theme-row"
                      role="row"
                      style={
                        Object {
                          "height": 40,
                          "overflow": "hidden",
                          "paddingRight": 0,
                          "width": 0,
                        }
                      }
                    >
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-"
                        id="tc-list-internal-row-selector"
                        key="Header-Col0"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 0 35px",
                            "flex": "0 0 35px",
                            "msFlex": "0 0 35px",
                          }
                        }
                      >
                        <VirtualizedList(HeaderCheckbox)
                          columnData={
                            Object {
                              "collection": Array [
                                Object {
                                  "id": 1,
                                  "name": "Hello world",
                                },
                                Object {
                                  "id": 2,
                                  "name": "Foo",
                                },
                                Object {
                                  "id": 3,
                                  "name": "Bar",
                                },
                              ],
                              "id": undefined,
                              "isSelected": [Function],
                              "label": "Select this element",
                              "onChange": [MockFunction],
                              "onToggleAll": [MockFunction],
                            }
                          }
                          dataKey=""
                          disableSort={true}
                          label=""
                          sortDirection="ASC"
                          t={[Function]}
                        >
                          <form
                            className="tc-list-checkbox theme-tc-list-checkbox"
                          >
                            <div
                              className="checkbox"
                              title="Select All"
                            >
                              <label>
                                <input
                                  checked={false}
                                  disabled={false}
                                  onChange={[MockFunction]}
                                  type="checkbox"
                                />
                                <span
                                  className="sr-only"
                                >
                                  Select All
                                </span>
                              </label>
                            </div>
                          </form>
                        </VirtualizedList(HeaderCheckbox)>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-id"
                        key="Header-Col1"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Id"
                        >
                          Id
                        </span>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-name"
                        key="Header-Col2"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Name"
                        >
                          Name
                        </span>
                      </div>
                    </div>
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={true}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      className="ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                      columnCount={1}
                      columnWidth={0}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      disableHeader={false}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      gridClassName="theme-grid tc-dropdown-container"
                      headerHeight={40}
                      headerRowRenderer={[Function]}
                      headerStyle={Object {}}
                      height={210}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      noRowsRenderer={[Function]}
                      onRowDoubleClick={[Function]}
                      onRowsRendered={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="rowgroup"
                      rowClassName={[Function]}
                      rowCount={3}
                      rowGetter={[Function]}
                      rowHeight={50}
                      rowRenderer={[Function]}
                      rowStyle={Object {}}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToIndex={-1}
                      scrollToRow={-1}
                      scrollbarWidth={0}
                      scrollingResetTimeInterval={150}
                      sort={null}
                      sortDirection="ASC"
                      style={
                        Object {
                          "overflowX": "hidden",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                        onScroll={[Function]}
                        role="rowgroup"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 210,
                            "overflowX": "hidden",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": 0,
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </Table>
              </VirtualizedList(ListTable)>
            </VirtualizedList(RendererSelector)>
          </div>
        </AutoSizer>
      </VirtualizedList>
    </ListToVirtualizedList>
  </div>
</div>
`;

exports[`List should render 1`] = `
<div
  className="tc-list theme-list"
>
  <ListToolbar
    components={Object {}}
    displayMode="table"
    list={
      Object {
        "columns": Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ],
        "itemProps": Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        },
        "items": Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ],
        "titleProps": Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        },
      }
    }
    toolbar={
      Object {
        "display": Object {
          "mode": "table",
          "onChange": [MockFunction],
        },
        "filter": Object {
          "onFilter": [MockFunction],
          "onToggle": [MockFunction],
        },
        "pagination": Object {
          "itemsPerPage": 5,
          "onChange": [MockFunction],
          "startIndex": 6,
          "totalResults": 13,
        },
        "sort": Object {
          "field": "name",
          "onChange": [MockFunction],
          "options": Array [
            Object {
              "id": "id",
              "name": "Id",
            },
            Object {
              "id": "name",
              "name": "Name",
            },
          ],
        },
      }
    }
  >
    <Translate(Toolbar)
      components={Object {}}
      display={
        Object {
          "mode": "table",
          "onChange": [MockFunction],
        }
      }
      filter={
        Object {
          "onFilter": [MockFunction],
          "onToggle": [MockFunction],
        }
      }
      pagination={
        Object {
          "itemsPerPage": 5,
          "onChange": [MockFunction],
          "startIndex": 6,
          "totalResults": 13,
        }
      }
      sort={
        Object {
          "field": "name",
          "onChange": [MockFunction],
          "options": Array [
            Object {
              "id": "id",
              "name": "Id",
            },
            Object {
              "id": "name",
              "name": "Name",
            },
          ],
        }
      }
    >
      <I18n
        bindI18n="languageChanged loaded"
        bindStore="added removed"
        components={Object {}}
        display={
          Object {
            "mode": "table",
            "onChange": [MockFunction],
          }
        }
        filter={
          Object {
            "onFilter": [MockFunction],
            "onToggle": [MockFunction],
          }
        }
        i18n={Object {}}
        ns={
          Array [
            "tui-components",
          ]
        }
        nsMode="default"
        omitBoundRerender={true}
        pagination={
          Object {
            "itemsPerPage": 5,
            "onChange": [MockFunction],
            "startIndex": 6,
            "totalResults": 13,
          }
        }
        sort={
          Object {
            "field": "name",
            "onChange": [MockFunction],
            "options": Array [
              Object {
                "id": "id",
                "name": "Id",
              },
              Object {
                "id": "name",
                "name": "Name",
              },
            ],
          }
        }
        translateFuncName="t"
        usePureComponent={false}
        wait={false}
        withRef={false}
      >
        <Toolbar
          components={Object {}}
          display={
            Object {
              "mode": "table",
              "onChange": [MockFunction],
            }
          }
          filter={
            Object {
              "onFilter": [MockFunction],
              "onToggle": [MockFunction],
            }
          }
          i18n={Object {}}
          lng="en"
          pagination={
            Object {
              "itemsPerPage": 5,
              "onChange": [MockFunction],
              "startIndex": 6,
              "totalResults": 13,
            }
          }
          sort={
            Object {
              "field": "name",
              "onChange": [MockFunction],
              "options": Array [
                Object {
                  "id": "id",
                  "name": "Id",
                },
                Object {
                  "id": "name",
                  "name": "Name",
                },
              ],
            }
          }
          t={[Function]}
          tReady={false}
        >
          <div
            className="theme-tc-list-toolbar tc-list-toolbar"
          />
        </Toolbar>
      </I18n>
    </Translate(Toolbar)>
  </ListToolbar>
  <div
    className="tc-list-display-virtualized"
  >
    <ListToVirtualizedList
      columns={
        Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ]
      }
      displayMode="table"
      itemProps={
        Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        }
      }
      items={
        Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ]
      }
      titleProps={
        Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        }
      }
    >
      <VirtualizedList
        collection={
          Array [
            Object {
              "id": 1,
              "name": "Hello world",
            },
            Object {
              "id": 2,
              "name": "Foo",
            },
            Object {
              "id": 3,
              "name": "Bar",
            },
          ]
        }
        defaultHeight={250}
        isSelected={[Function]}
        onRowDoubleClick={[MockFunction]}
        onToggleAll={[MockFunction]}
        selectionToggle={[MockFunction]}
        sort={null}
        sortDirection="ASC"
        type="TABLE"
      >
        <AutoSizer
          disableHeight={false}
          disableWidth={false}
          onResize={[Function]}
          style={Object {}}
        >
          <div
            style={
              Object {
                "height": 0,
                "overflow": "visible",
                "width": 0,
              }
            }
          >
            <VirtualizedList(RendererSelector)
              collection={
                Array [
                  Object {
                    "id": 1,
                    "name": "Hello world",
                  },
                  Object {
                    "id": 2,
                    "name": "Foo",
                  },
                  Object {
                    "id": 3,
                    "name": "Bar",
                  },
                ]
              }
              height={250}
              isSelected={[Function]}
              noRowsRenderer={[Function]}
              onRowDoubleClick={[MockFunction]}
              sort={null}
              sortDirection="ASC"
              type="TABLE"
              width={0}
            >
              <VirtualizedList(ListTable)
                collection={
                  Array [
                    Object {
                      "id": 1,
                      "name": "Hello world",
                    },
                    Object {
                      "id": 2,
                      "name": "Foo",
                    },
                    Object {
                      "id": 3,
                      "name": "Bar",
                    },
                  ]
                }
                disableHeader={false}
                height={250}
                isSelected={[Function]}
                noRowsRenderer={[Function]}
                onRowDoubleClick={[MockFunction]}
                rowHeight={50}
                sort={null}
                sortDirection="ASC"
                width={0}
              >
                <Table
                  className="tc-list-table theme-tc-list-table"
                  disableHeader={false}
                  estimatedRowSize={30}
                  gridClassName="theme-grid tc-dropdown-container"
                  headerHeight={40}
                  headerRowRenderer={[Function]}
                  headerStyle={Object {}}
                  height={250}
                  noRowsRenderer={[Function]}
                  onRowDoubleClick={[Function]}
                  onRowsRendered={[Function]}
                  onScroll={[Function]}
                  overscanIndicesGetter={[Function]}
                  overscanRowCount={10}
                  rowClassName={[Function]}
                  rowCount={3}
                  rowGetter={[Function]}
                  rowHeight={50}
                  rowRenderer={[Function]}
                  rowStyle={Object {}}
                  scrollToAlignment="auto"
                  scrollToIndex={-1}
                  sort={null}
                  sortDirection="ASC"
                  style={Object {}}
                  width={0}
                >
                  <div
                    aria-colcount={3}
                    aria-rowcount={3}
                    className="ReactVirtualized__Table tc-list-table theme-tc-list-table"
                    role="grid"
                    style={Object {}}
                  >
                    <div
                      className="ReactVirtualized__Table__headerRow tc-list-item theme-row theme-row"
                      role="row"
                      style={
                        Object {
                          "height": 40,
                          "overflow": "hidden",
                          "paddingRight": 0,
                          "width": 0,
                        }
                      }
                    >
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-"
                        id="tc-list-internal-row-selector"
                        key="Header-Col0"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 0 35px",
                            "flex": "0 0 35px",
                            "msFlex": "0 0 35px",
                          }
                        }
                      >
                        <VirtualizedList(HeaderCheckbox)
                          columnData={
                            Object {
                              "collection": Array [
                                Object {
                                  "id": 1,
                                  "name": "Hello world",
                                },
                                Object {
                                  "id": 2,
                                  "name": "Foo",
                                },
                                Object {
                                  "id": 3,
                                  "name": "Bar",
                                },
                              ],
                              "id": undefined,
                              "isSelected": [Function],
                              "label": "Select this element",
                              "onChange": [MockFunction],
                              "onToggleAll": [MockFunction],
                            }
                          }
                          dataKey=""
                          disableSort={true}
                          label=""
                          sortDirection="ASC"
                          t={[Function]}
                        >
                          <form
                            className="tc-list-checkbox theme-tc-list-checkbox"
                          >
                            <div
                              className="checkbox"
                              title="Select All"
                            >
                              <label>
                                <input
                                  checked={false}
                                  disabled={false}
                                  onChange={[MockFunction]}
                                  type="checkbox"
                                />
                                <span
                                  className="sr-only"
                                >
                                  Select All
                                </span>
                              </label>
                            </div>
                          </form>
                        </VirtualizedList(HeaderCheckbox)>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-id"
                        key="Header-Col1"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Id"
                        >
                          Id
                        </span>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-name"
                        key="Header-Col2"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Name"
                        >
                          Name
                        </span>
                      </div>
                    </div>
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={true}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      className="ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                      columnCount={1}
                      columnWidth={0}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      disableHeader={false}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      gridClassName="theme-grid tc-dropdown-container"
                      headerHeight={40}
                      headerRowRenderer={[Function]}
                      headerStyle={Object {}}
                      height={210}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      noRowsRenderer={[Function]}
                      onRowDoubleClick={[Function]}
                      onRowsRendered={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="rowgroup"
                      rowClassName={[Function]}
                      rowCount={3}
                      rowGetter={[Function]}
                      rowHeight={50}
                      rowRenderer={[Function]}
                      rowStyle={Object {}}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToIndex={-1}
                      scrollToRow={-1}
                      scrollbarWidth={0}
                      scrollingResetTimeInterval={150}
                      sort={null}
                      sortDirection="ASC"
                      style={
                        Object {
                          "overflowX": "hidden",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                        onScroll={[Function]}
                        role="rowgroup"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 210,
                            "overflowX": "hidden",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": 0,
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </Table>
              </VirtualizedList(ListTable)>
            </VirtualizedList(RendererSelector)>
          </div>
        </AutoSizer>
      </VirtualizedList>
    </ListToVirtualizedList>
  </div>
</div>
`;

exports[`List should render id if provided 1`] = `
<div
  className="tc-list theme-list"
>
  <ListToolbar
    components={Object {}}
    displayMode="table"
    id="context"
    list={
      Object {
        "columns": Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ],
        "itemProps": Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        },
        "items": Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ],
        "titleProps": Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        },
      }
    }
    toolbar={
      Object {
        "display": Object {
          "mode": "table",
          "onChange": [MockFunction],
        },
        "filter": Object {
          "onFilter": [MockFunction],
          "onToggle": [MockFunction],
        },
        "pagination": Object {
          "itemsPerPage": 5,
          "onChange": [MockFunction],
          "startIndex": 6,
          "totalResults": 13,
        },
        "sort": Object {
          "field": "name",
          "onChange": [MockFunction],
          "options": Array [
            Object {
              "id": "id",
              "name": "Id",
            },
            Object {
              "id": "name",
              "name": "Name",
            },
          ],
        },
      }
    }
  >
    <Translate(Toolbar)
      components={Object {}}
      display={
        Object {
          "mode": "table",
          "onChange": [MockFunction],
        }
      }
      filter={
        Object {
          "onFilter": [MockFunction],
          "onToggle": [MockFunction],
        }
      }
      id="context"
      pagination={
        Object {
          "itemsPerPage": 5,
          "onChange": [MockFunction],
          "startIndex": 6,
          "totalResults": 13,
        }
      }
      sort={
        Object {
          "field": "name",
          "onChange": [MockFunction],
          "options": Array [
            Object {
              "id": "id",
              "name": "Id",
            },
            Object {
              "id": "name",
              "name": "Name",
            },
          ],
        }
      }
    >
      <I18n
        bindI18n="languageChanged loaded"
        bindStore="added removed"
        components={Object {}}
        display={
          Object {
            "mode": "table",
            "onChange": [MockFunction],
          }
        }
        filter={
          Object {
            "onFilter": [MockFunction],
            "onToggle": [MockFunction],
          }
        }
        i18n={Object {}}
        id="context"
        ns={
          Array [
            "tui-components",
          ]
        }
        nsMode="default"
        omitBoundRerender={true}
        pagination={
          Object {
            "itemsPerPage": 5,
            "onChange": [MockFunction],
            "startIndex": 6,
            "totalResults": 13,
          }
        }
        sort={
          Object {
            "field": "name",
            "onChange": [MockFunction],
            "options": Array [
              Object {
                "id": "id",
                "name": "Id",
              },
              Object {
                "id": "name",
                "name": "Name",
              },
            ],
          }
        }
        translateFuncName="t"
        usePureComponent={false}
        wait={false}
        withRef={false}
      >
        <Toolbar
          components={Object {}}
          display={
            Object {
              "mode": "table",
              "onChange": [MockFunction],
            }
          }
          filter={
            Object {
              "onFilter": [MockFunction],
              "onToggle": [MockFunction],
            }
          }
          i18n={Object {}}
          id="context"
          lng="en"
          pagination={
            Object {
              "itemsPerPage": 5,
              "onChange": [MockFunction],
              "startIndex": 6,
              "totalResults": 13,
            }
          }
          sort={
            Object {
              "field": "name",
              "onChange": [MockFunction],
              "options": Array [
                Object {
                  "id": "id",
                  "name": "Id",
                },
                Object {
                  "id": "name",
                  "name": "Name",
                },
              ],
            }
          }
          t={[Function]}
          tReady={false}
        >
          <div
            className="theme-tc-list-toolbar tc-list-toolbar"
          />
        </Toolbar>
      </I18n>
    </Translate(Toolbar)>
  </ListToolbar>
  <div
    className="tc-list-display-virtualized"
  >
    <ListToVirtualizedList
      columns={
        Array [
          Object {
            "key": "id",
            "label": "Id",
          },
          Object {
            "key": "name",
            "label": "Name",
          },
        ]
      }
      displayMode="table"
      id="context"
      itemProps={
        Object {
          "isSelected": [Function],
          "onToggle": [MockFunction],
          "onToggleAll": [MockFunction],
        }
      }
      items={
        Array [
          Object {
            "id": 1,
            "name": "Hello world",
          },
          Object {
            "id": 2,
            "name": "Foo",
          },
          Object {
            "id": 3,
            "name": "Bar",
          },
        ]
      }
      titleProps={
        Object {
          "actionsKey": "actions",
          "onClick": [MockFunction],
          "persistentActionsKey": "persistentActions",
        }
      }
    >
      <VirtualizedList
        collection={
          Array [
            Object {
              "id": 1,
              "name": "Hello world",
            },
            Object {
              "id": 2,
              "name": "Foo",
            },
            Object {
              "id": 3,
              "name": "Bar",
            },
          ]
        }
        defaultHeight={250}
        id="context"
        isSelected={[Function]}
        onRowDoubleClick={[MockFunction]}
        onToggleAll={[MockFunction]}
        selectionToggle={[MockFunction]}
        sort={null}
        sortDirection="ASC"
        type="TABLE"
      >
        <AutoSizer
          disableHeight={false}
          disableWidth={false}
          onResize={[Function]}
          style={Object {}}
        >
          <div
            style={
              Object {
                "height": 0,
                "overflow": "visible",
                "width": 0,
              }
            }
          >
            <VirtualizedList(RendererSelector)
              collection={
                Array [
                  Object {
                    "id": 1,
                    "name": "Hello world",
                  },
                  Object {
                    "id": 2,
                    "name": "Foo",
                  },
                  Object {
                    "id": 3,
                    "name": "Bar",
                  },
                ]
              }
              height={250}
              id="context"
              isSelected={[Function]}
              noRowsRenderer={[Function]}
              onRowDoubleClick={[MockFunction]}
              sort={null}
              sortDirection="ASC"
              type="TABLE"
              width={0}
            >
              <VirtualizedList(ListTable)
                collection={
                  Array [
                    Object {
                      "id": 1,
                      "name": "Hello world",
                    },
                    Object {
                      "id": 2,
                      "name": "Foo",
                    },
                    Object {
                      "id": 3,
                      "name": "Bar",
                    },
                  ]
                }
                disableHeader={false}
                height={250}
                id="context"
                isSelected={[Function]}
                noRowsRenderer={[Function]}
                onRowDoubleClick={[MockFunction]}
                rowHeight={50}
                sort={null}
                sortDirection="ASC"
                width={0}
              >
                <Table
                  className="tc-list-table theme-tc-list-table"
                  disableHeader={false}
                  estimatedRowSize={30}
                  gridClassName="theme-grid tc-dropdown-container"
                  headerHeight={40}
                  headerRowRenderer={[Function]}
                  headerStyle={Object {}}
                  height={250}
                  id="context"
                  noRowsRenderer={[Function]}
                  onRowDoubleClick={[Function]}
                  onRowsRendered={[Function]}
                  onScroll={[Function]}
                  overscanIndicesGetter={[Function]}
                  overscanRowCount={10}
                  rowClassName={[Function]}
                  rowCount={3}
                  rowGetter={[Function]}
                  rowHeight={50}
                  rowRenderer={[Function]}
                  rowStyle={Object {}}
                  scrollToAlignment="auto"
                  scrollToIndex={-1}
                  sort={null}
                  sortDirection="ASC"
                  style={Object {}}
                  width={0}
                >
                  <div
                    aria-colcount={3}
                    aria-rowcount={3}
                    className="ReactVirtualized__Table tc-list-table theme-tc-list-table"
                    id="context"
                    role="grid"
                    style={Object {}}
                  >
                    <div
                      className="ReactVirtualized__Table__headerRow tc-list-item theme-row theme-row"
                      role="row"
                      style={
                        Object {
                          "height": 40,
                          "overflow": "hidden",
                          "paddingRight": 0,
                          "width": 0,
                        }
                      }
                    >
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-"
                        id="tc-list-internal-row-selector"
                        key="Header-Col0"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 0 35px",
                            "flex": "0 0 35px",
                            "msFlex": "0 0 35px",
                          }
                        }
                      >
                        <VirtualizedList(HeaderCheckbox)
                          columnData={
                            Object {
                              "collection": Array [
                                Object {
                                  "id": 1,
                                  "name": "Hello world",
                                },
                                Object {
                                  "id": 2,
                                  "name": "Foo",
                                },
                                Object {
                                  "id": 3,
                                  "name": "Bar",
                                },
                              ],
                              "id": "context",
                              "isSelected": [Function],
                              "label": "Select this element",
                              "onChange": [MockFunction],
                              "onToggleAll": [MockFunction],
                            }
                          }
                          dataKey=""
                          disableSort={true}
                          label=""
                          sortDirection="ASC"
                          t={[Function]}
                        >
                          <form
                            className="tc-list-checkbox theme-tc-list-checkbox"
                          >
                            <div
                              className="checkbox"
                              title="Select All"
                            >
                              <label
                                htmlFor="context-header-check"
                              >
                                <input
                                  checked={false}
                                  disabled={false}
                                  id="context-header-check"
                                  onChange={[MockFunction]}
                                  type="checkbox"
                                />
                                <span
                                  className="sr-only"
                                >
                                  Select All
                                </span>
                              </label>
                            </div>
                          </form>
                        </VirtualizedList(HeaderCheckbox)>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-id"
                        key="Header-Col1"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Id"
                        >
                          Id
                        </span>
                      </div>
                      <div
                        className="ReactVirtualized__Table__headerColumn theme-header tc-list-cell-name"
                        key="Header-Col2"
                        role="columnheader"
                        style={
                          Object {
                            "WebkitFlex": "0 1 -1px",
                            "flex": "0 1 -1px",
                            "msFlex": "0 1 -1px",
                          }
                        }
                      >
                        <span
                          className="ReactVirtualized__Table__headerTruncatedText"
                          key="label"
                          title="Name"
                        >
                          Name
                        </span>
                      </div>
                    </div>
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={true}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      className="ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                      columnCount={1}
                      columnWidth={0}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      disableHeader={false}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      gridClassName="theme-grid tc-dropdown-container"
                      headerHeight={40}
                      headerRowRenderer={[Function]}
                      headerStyle={Object {}}
                      height={210}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      noRowsRenderer={[Function]}
                      onRowDoubleClick={[Function]}
                      onRowsRendered={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="rowgroup"
                      rowClassName={[Function]}
                      rowCount={3}
                      rowGetter={[Function]}
                      rowHeight={50}
                      rowRenderer={[Function]}
                      rowStyle={Object {}}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToIndex={-1}
                      scrollToRow={-1}
                      scrollbarWidth={0}
                      scrollingResetTimeInterval={150}
                      sort={null}
                      sortDirection="ASC"
                      style={
                        Object {
                          "overflowX": "hidden",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid ReactVirtualized__Table__Grid theme-grid tc-dropdown-container"
                        onScroll={[Function]}
                        role="rowgroup"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 210,
                            "overflowX": "hidden",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": 0,
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </Table>
              </VirtualizedList(ListTable)>
            </VirtualizedList(RendererSelector)>
          </div>
        </AutoSizer>
      </VirtualizedList>
    </ListToVirtualizedList>
  </div>
</div>
`;
