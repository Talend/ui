// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dialog should render 1`] = `
<Modal
  animation={true}
  aria-labelledby={null}
  aria-modal="true"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  className=""
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
</Modal>
`;

exports[`Dialog should render action 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  className=""
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Action
      label="OK"
      onClick={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`Dialog should render error 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  className=""
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
    <h3
      className="error modal-subtitle"
    >
      Vestibulum molestie id massa eu pretium.
    </h3>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
</Modal>
`;

exports[`Dialog should render header 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  className=""
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
</Modal>
`;

exports[`Dialog should render large 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={false}
  bsClass="modal"
  bsSize="large"
  className=""
  dialogClassName="customDialogClassName"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Action
      label="OK"
      onClick={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`Dialog should render small 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={false}
  bsClass="modal"
  bsSize="small"
  className=""
  dialogClassName="customDialogClassName"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Action
      label="OK"
      onClick={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`Dialog should render subtitle 1`] = `
<Modal
  animation={true}
  aria-labelledby="tc-dialog-header"
  aria-modal="true"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  className=""
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    className=""
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="tc-dialog-header"
    >
      Hello world
    </ModalTitle>
    <h3
      className="modal-subtitle"
    >
      Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    </h3>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <div>
      BODY
    </div>
  </ModalBody>
</Modal>
`;
