// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Action should apply transformation on icon 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  disabled={false}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <Icon
    name="talend-caret-down"
    transform="rotate-180"
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should display a Progress indicator if set 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  className="navbar-btn"
  disabled={true}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <CircularProgress
    size="small"
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should display a disabled Icon 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  className="navbar-btn"
  disabled={true}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <Icon
    name="talend-caret-down"
    transform={undefined}
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should pass all props to the Button 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  className="navbar-btn"
  disabled={false}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <Icon
    name="talend-caret-down"
    transform={undefined}
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should render a button 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  disabled={false}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <Icon
    name="talend-caret-down"
    transform={undefined}
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should render action with html property name = props.name if set 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  disabled={false}
  name="custom_name"
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <Icon
    name="talend-caret-down"
    transform={undefined}
  />
  <span>
    Click me
  </span>
</Button>
`;

exports[`Action should render action with overlayp provider 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": null,
  "nodes": Array [
    null,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <ActionButton
        available={false}
        bsStyle="default"
        disabled={false}
        inProgress={false}
        overlayComponent={
                <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsStyle="default"
                        disabled={false}
                >
                        Test button popover
                </Button>
        }
        overlayPlacement="top"
        tooltipPlacement="top"
/>,
      "_debugID": 21,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "available": false,
          "bsStyle": "default",
          "disabled": false,
          "inProgress": false,
          "overlayComponent": <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
>
            Test button popover
</Button>,
          "overlayPlacement": "top",
          "tooltipPlacement": "top",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 11,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": null,
        "_debugID": 22,
        "_renderedOutput": null,
      },
      "_renderedNodeType": 2,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ActionButton
    available={false}
    bsStyle="default"
    disabled={false}
    inProgress={false}
    overlayComponent={
        <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
        >
            Test button popover
        </Button>
    }
    overlayPlacement="top"
    tooltipPlacement="top"
/>,
}
`;

exports[`Action should reverse icon/label 1`] = `
<Button
  active={false}
  block={false}
  bsClass="btn"
  bsStyle="default"
  disabled={false}
  onClick={[Function]}
  onMouseDown={[Function]}
  role={null}
>
  <span>
    Click me
  </span>
  <Icon
    name="talend-caret-down"
    transform={undefined}
  />
</Button>
`;
