// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RowLarge should render large row 1`] = `
<Translate(VirtualizedList(RowLarge))
  className="my-class-names"
  index={1}
  onKeyDown={[Function]}
  parent={
    Object {
      "props": Object {
        "children": Array [
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            dataKey="id"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Id"
            style={Object {}}
            width={50}
          />,
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            cellType="title"
            className="tc-list-title-cell"
            columnData={
              Object {
                "actionsKey": "titleActions",
                "displayModeKey": "display",
                "iconKey": "icon",
              }
            }
            dataKey="name"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Name"
            style={Object {}}
            width={350}
          />,
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            dataKey="name"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Description"
            style={Object {}}
            width={350}
          />,
        ],
        "collection": Array [
          Object {
            "description": "This comes from first element in collection",
            "id": 0,
            "name": "Title from first item",
            "titleActions": Array [
              Object {
                "icon": "talend-pencil",
                "label": "edit",
                "onClick": [MockFunction],
              },
              Object {
                "icon": "talend-trash",
                "label": "delete",
                "onClick": [MockFunction],
              },
            ],
          },
          Object {
            "description": "This comes from second element in collection",
            "id": 1,
            "name": "Title from second item",
            "titleActions": Array [
              Object {
                "icon": "talend-pencil",
                "label": "edit",
                "onClick": [MockFunction],
              },
              Object {
                "icon": "talend-trash",
                "label": "delete",
                "onClick": [MockFunction],
              },
            ],
          },
        ],
        "id": "my-list",
        "rowGetter": [Function],
      },
    }
  }
  style={
    Object {
      "background": "red",
    }
  }
/>
`;

exports[`RowLarge should render large with empty data 1`] = `
<ListGesture(Translate(VirtualizedList(RowLarge)))
  className="my-class-names"
  index={1}
  parent={
    Object {
      "props": Object {
        "children": Array [
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            dataKey="id"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Id"
            style={Object {}}
            width={50}
          />,
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            cellType="title"
            className="tc-list-title-cell"
            columnData={
              Object {
                "actionsKey": "titleActions",
                "displayModeKey": "display",
                "iconKey": "icon",
              }
            }
            dataKey="name"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Name"
            style={Object {}}
            width={350}
          />,
          <Content
            cellDataGetter={[Function]}
            cellRenderer={[Function]}
            dataKey="name"
            defaultSortDirection="ASC"
            flexGrow={0}
            flexShrink={0}
            headerRenderer={[Function]}
            label="Description"
            style={Object {}}
            width={350}
          />,
        ],
        "collection": Array [
          Object {
            "description": "This comes from first element in collection",
            "id": 0,
            "name": "Title from first item",
            "titleActions": Array [
              Object {
                "icon": "talend-pencil",
                "label": "edit",
                "onClick": [MockFunction],
              },
              Object {
                "icon": "talend-trash",
                "label": "delete",
                "onClick": [MockFunction],
              },
            ],
          },
          Object {
            "description": "This comes from second element in collection",
            "id": 1,
            "name": "Title from second item",
            "titleActions": Array [
              Object {
                "icon": "talend-pencil",
                "label": "edit",
                "onClick": [MockFunction],
              },
              Object {
                "icon": "talend-trash",
                "label": "delete",
                "onClick": [MockFunction],
              },
            ],
          },
        ],
        "id": "my-list",
        "rowGetter": [Function],
      },
    }
  }
  style={
    Object {
      "background": "red",
    }
  }
>
  <Translate(VirtualizedList(RowLarge))
    className="my-class-names"
    index={1}
    onKeyDown={[Function]}
    parent={
      Object {
        "props": Object {
          "children": Array [
            <Content
              cellDataGetter={[Function]}
              cellRenderer={[Function]}
              dataKey="id"
              defaultSortDirection="ASC"
              flexGrow={0}
              flexShrink={0}
              headerRenderer={[Function]}
              label="Id"
              style={Object {}}
              width={50}
            />,
            <Content
              cellDataGetter={[Function]}
              cellRenderer={[Function]}
              cellType="title"
              className="tc-list-title-cell"
              columnData={
                Object {
                  "actionsKey": "titleActions",
                  "displayModeKey": "display",
                  "iconKey": "icon",
                }
              }
              dataKey="name"
              defaultSortDirection="ASC"
              flexGrow={0}
              flexShrink={0}
              headerRenderer={[Function]}
              label="Name"
              style={Object {}}
              width={350}
            />,
            <Content
              cellDataGetter={[Function]}
              cellRenderer={[Function]}
              dataKey="name"
              defaultSortDirection="ASC"
              flexGrow={0}
              flexShrink={0}
              headerRenderer={[Function]}
              label="Description"
              style={Object {}}
              width={350}
            />,
          ],
          "collection": Array [
            Object {
              "description": "This comes from first element in collection",
              "id": 0,
              "name": "Title from first item",
              "titleActions": Array [
                Object {
                  "icon": "talend-pencil",
                  "label": "edit",
                  "onClick": [MockFunction],
                },
                Object {
                  "icon": "talend-trash",
                  "label": "delete",
                  "onClick": [MockFunction],
                },
              ],
            },
            Object {
              "description": "This comes from second element in collection",
              "id": 1,
              "name": "Title from second item",
              "titleActions": Array [
                Object {
                  "icon": "talend-pencil",
                  "label": "edit",
                  "onClick": [MockFunction],
                },
                Object {
                  "icon": "talend-trash",
                  "label": "delete",
                  "onClick": [MockFunction],
                },
              ],
            },
          ],
          "id": "my-list",
          "rowGetter": [Function],
        },
      }
    }
    style={
      Object {
        "background": "red",
      }
    }
  >
    <I18n
      bindI18n="languageChanged loaded"
      bindStore="added removed"
      className="my-class-names"
      i18n={Object {}}
      index={1}
      ns={
        Array [
          "tui-components",
        ]
      }
      nsMode="default"
      omitBoundRerender={true}
      onKeyDown={[Function]}
      parent={
        Object {
          "props": Object {
            "children": Array [
              <Content
                cellDataGetter={[Function]}
                cellRenderer={[Function]}
                dataKey="id"
                defaultSortDirection="ASC"
                flexGrow={0}
                flexShrink={0}
                headerRenderer={[Function]}
                label="Id"
                style={Object {}}
                width={50}
              />,
              <Content
                cellDataGetter={[Function]}
                cellRenderer={[Function]}
                cellType="title"
                className="tc-list-title-cell"
                columnData={
                  Object {
                    "actionsKey": "titleActions",
                    "displayModeKey": "display",
                    "iconKey": "icon",
                  }
                }
                dataKey="name"
                defaultSortDirection="ASC"
                flexGrow={0}
                flexShrink={0}
                headerRenderer={[Function]}
                label="Name"
                style={Object {}}
                width={350}
              />,
              <Content
                cellDataGetter={[Function]}
                cellRenderer={[Function]}
                dataKey="name"
                defaultSortDirection="ASC"
                flexGrow={0}
                flexShrink={0}
                headerRenderer={[Function]}
                label="Description"
                style={Object {}}
                width={350}
              />,
            ],
            "collection": Array [
              Object {
                "description": "This comes from first element in collection",
                "id": 0,
                "name": "Title from first item",
                "titleActions": Array [
                  Object {
                    "icon": "talend-pencil",
                    "label": "edit",
                    "onClick": [MockFunction],
                  },
                  Object {
                    "icon": "talend-trash",
                    "label": "delete",
                    "onClick": [MockFunction],
                  },
                ],
              },
              Object {
                "description": "This comes from second element in collection",
                "id": 1,
                "name": "Title from second item",
                "titleActions": Array [
                  Object {
                    "icon": "talend-pencil",
                    "label": "edit",
                    "onClick": [MockFunction],
                  },
                  Object {
                    "icon": "talend-trash",
                    "label": "delete",
                    "onClick": [MockFunction],
                  },
                ],
              },
            ],
            "id": "my-list",
            "rowGetter": [Function],
          },
        }
      }
      style={
        Object {
          "background": "red",
        }
      }
      translateFuncName="t"
      usePureComponent={false}
      wait={false}
      withRef={false}
    >
      <VirtualizedList(RowLarge)
        className="my-class-names"
        i18n={Object {}}
        index={1}
        lng="en"
        onKeyDown={[Function]}
        parent={
          Object {
            "props": Object {
              "children": Array [
                <Content
                  cellDataGetter={[Function]}
                  cellRenderer={[Function]}
                  dataKey="id"
                  defaultSortDirection="ASC"
                  flexGrow={0}
                  flexShrink={0}
                  headerRenderer={[Function]}
                  label="Id"
                  style={Object {}}
                  width={50}
                />,
                <Content
                  cellDataGetter={[Function]}
                  cellRenderer={[Function]}
                  cellType="title"
                  className="tc-list-title-cell"
                  columnData={
                    Object {
                      "actionsKey": "titleActions",
                      "displayModeKey": "display",
                      "iconKey": "icon",
                    }
                  }
                  dataKey="name"
                  defaultSortDirection="ASC"
                  flexGrow={0}
                  flexShrink={0}
                  headerRenderer={[Function]}
                  label="Name"
                  style={Object {}}
                  width={350}
                />,
                <Content
                  cellDataGetter={[Function]}
                  cellRenderer={[Function]}
                  dataKey="name"
                  defaultSortDirection="ASC"
                  flexGrow={0}
                  flexShrink={0}
                  headerRenderer={[Function]}
                  label="Description"
                  style={Object {}}
                  width={350}
                />,
              ],
              "collection": Array [
                Object {
                  "description": "This comes from first element in collection",
                  "id": 0,
                  "name": "Title from first item",
                  "titleActions": Array [
                    Object {
                      "icon": "talend-pencil",
                      "label": "edit",
                      "onClick": [MockFunction],
                    },
                    Object {
                      "icon": "talend-trash",
                      "label": "delete",
                      "onClick": [MockFunction],
                    },
                  ],
                },
                Object {
                  "description": "This comes from second element in collection",
                  "id": 1,
                  "name": "Title from second item",
                  "titleActions": Array [
                    Object {
                      "icon": "talend-pencil",
                      "label": "edit",
                      "onClick": [MockFunction],
                    },
                    Object {
                      "icon": "talend-trash",
                      "label": "delete",
                      "onClick": [MockFunction],
                    },
                  ],
                },
              ],
              "id": "my-list",
              "rowGetter": [Function],
            },
          }
        }
        style={
          Object {
            "background": "red",
          }
        }
        t={[Function]}
        tReady={false}
      >
        <div
          aria-posinset={2}
          className="tc-list-item tc-list-large-row tc-list-large theme-tc-list-large theme-row my-class-names"
          id="my-list-1"
          onKeyDown={[Function]}
          role="listitem"
          style={
            Object {
              "background": "red",
            }
          }
          tabIndex="0"
        >
          <div
            className="tc-list-large-inner-box theme-inner-box"
            key="inner-box"
          >
            <LargeInnerRowLoading
              columns={3}
              rows={3}
            >
              <div
                className="theme-loading-large-column-wrapper"
              >
                <div
                  className="theme-loading-inner-column"
                >
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                </div>
                <div
                  className="theme-loading-inner-column"
                >
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                </div>
                <div
                  className="theme-loading-inner-column"
                >
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                  <RandomSizeSkeleton>
                    <Translate(Skeleton)
                      size="large"
                    >
                      <I18n
                        bindI18n="languageChanged loaded"
                        bindStore="added removed"
                        i18n={Object {}}
                        ns={
                          Array [
                            "tui-components",
                          ]
                        }
                        nsMode="default"
                        omitBoundRerender={true}
                        size="large"
                        translateFuncName="t"
                        usePureComponent={false}
                        wait={false}
                        withRef={false}
                      >
                        <Skeleton
                          heartbeat={true}
                          i18n={Object {}}
                          lng="en"
                          size="large"
                          t={[Function]}
                          tReady={false}
                          type="text"
                        >
                          <span
                            aria-label="text (loading)"
                            className="tc-skeleton theme-tc-skeleton tc-skeleton-text theme-tc-skeleton-text tc-skeleton-text-large theme-tc-skeleton-text-large tc-skeleton-heartbeat theme-tc-skeleton-heartbeat"
                            style={
                              Object {
                                "height": undefined,
                                "width": undefined,
                              }
                            }
                          />
                        </Skeleton>
                      </I18n>
                    </Translate(Skeleton)>
                  </RandomSizeSkeleton>
                </div>
              </div>
            </LargeInnerRowLoading>
          </div>
        </div>
      </VirtualizedList(RowLarge)>
    </I18n>
  </Translate(VirtualizedList(RowLarge))>
</ListGesture(Translate(VirtualizedList(RowLarge)))>
`;
