{"remainingRequest":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/ComponentForm.sagas.js","dependencies":[{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/ComponentForm.sagas.js","mtime":1570436226806},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/cache-loader/dist/cjs.js","mtime":1581407659958},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js","mtime":1581407659368}],"contextDependencies":[],"result":["var _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(fetchDefinition),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(onDidMount),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(onFormSubmit),\n    _marked4 =\n/*#__PURE__*/\nregeneratorRuntime.mark(handleSetDirtyState),\n    _marked5 =\n/*#__PURE__*/\nregeneratorRuntime.mark(handle);\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { call, put, select, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport cmf from '@talend/react-cmf';\nimport { fromJS } from 'immutable';\nimport get from 'lodash/get';\nimport Component from './ComponentForm.component';\nimport { COMPONENT_FORM_SET_DIRTY } from './ComponentForm.actions';\n/**\n * @param {Action{definitionURL: String, uiSpecPath: String, componentId: String }} action\n */\n\nexport function fetchDefinition(action) {\n  var _ref, data, response, formSpec;\n\n  return regeneratorRuntime.wrap(function fetchDefinition$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(cmf.sagas.http.get, action.definitionURL);\n\n        case 2:\n          _ref = _context.sent;\n          data = _ref.data;\n          response = _ref.response;\n\n          if (response.ok) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(Component.setStateAction(function (prev) {\n            return prev.set('jsonSchema').set('uiSchema').set('response', response).set('dirty', false);\n          }, action.componentId));\n\n        case 8:\n          _context.next = 18;\n          break;\n\n        case 10:\n          if (!action.uiSpecPath) {\n            _context.next = 16;\n            break;\n          }\n\n          formSpec = get(data, action.uiSpecPath);\n          _context.next = 14;\n          return put(Component.setStateAction(_objectSpread({\n            definition: data,\n            initialState: formSpec\n          }, formSpec), action.componentId));\n\n        case 14:\n          _context.next = 18;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return put(Component.setStateAction(_objectSpread({\n            initialState: data\n          }, data), action.componentId));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function onDidMount(_ref2) {\n  var _ref2$componentId, componentId, definitionURL, uiSpecPath, jsonSchema;\n\n  return regeneratorRuntime.wrap(function onDidMount$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$componentId = _ref2.componentId, componentId = _ref2$componentId === void 0 ? 'default' : _ref2$componentId, definitionURL = _ref2.definitionURL, uiSpecPath = _ref2.uiSpecPath;\n          _context2.next = 3;\n          return select(function (state) {\n            return Component.getState(state, componentId).get('jsonSchema');\n          });\n\n        case 3:\n          jsonSchema = _context2.sent;\n\n          if (jsonSchema) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 7;\n          return fetchDefinition({\n            definitionURL: definitionURL,\n            componentId: componentId,\n            uiSpecPath: uiSpecPath\n          });\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function onFormSubmit(componentId, submitURL, action) {\n  var prevState, getReduxState, _ref3, response, data;\n\n  return regeneratorRuntime.wrap(function onFormSubmit$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          getReduxState = function _ref4() {\n            return prevState;\n          };\n\n          if (!(action.componentId !== componentId)) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 3:\n          _context3.next = 5;\n          return select();\n\n        case 5:\n          prevState = _context3.sent;\n          _context3.next = 8;\n          return put(Component.setStateAction(function (prev) {\n            return prev.setIn(['initialState', 'jsonSchema'], prev.get('jsonSchema')).setIn(['initialState', 'uiSchema'], prev.get('uiSchema')).setIn(['initialState', 'properties'], fromJS(action.properties));\n          }, componentId)(undefined, getReduxState));\n\n        case 8:\n          if (submitURL) {\n            _context3.next = 10;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 10:\n          _context3.next = 12;\n          return call(cmf.sagas.http.post, submitURL, action.properties);\n\n        case 12:\n          _ref3 = _context3.sent;\n          response = _ref3.response;\n          data = _ref3.data;\n          _context3.next = 17;\n          return put({\n            type: response.ok ? Component.ON_SUBMIT_SUCCEED : Component.ON_SUBMIT_FAILED,\n            data: data,\n            formData: action.properties,\n            response: response,\n            componentId: componentId\n          });\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n/**\n * check that the formId and action type match with the provided actions\n * @param {String} componentId\n * @return {(Action{type: String, componentid: String}) => Bool}\n */\n\nexport function checkFormComponentId(componentId, actionType) {\n  return function matchActionComponentid(action) {\n    return action.type === actionType && action.componentId === componentId;\n  };\n}\n/**\n * This function handle a change of the dirty state for a given component form id\n * @param {object} reduxAction with a componentId (string) & the dirtyState (boolean) to apply\n */\n\nexport function handleSetDirtyState(_ref5) {\n  var componentId, dirty, componentFormState;\n  return regeneratorRuntime.wrap(function handleSetDirtyState$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          componentId = _ref5.componentId, dirty = _ref5.dirty;\n          _context4.next = 3;\n          return select(Component.getState, componentId);\n\n        case 3:\n          componentFormState = _context4.sent;\n          _context4.next = 6;\n          return put(Component.setStateAction(componentFormState.set('dirty', !!dirty), componentId));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function handle(props) {\n  return regeneratorRuntime.wrap(function handle$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return call(onDidMount, props);\n\n        case 2:\n          _context5.next = 4;\n          return takeLatest(COMPONENT_FORM_SET_DIRTY, handleSetDirtyState);\n\n        case 4:\n          _context5.next = 6;\n          return takeEvery(checkFormComponentId(props.componentId, Component.ON_DEFINITION_URL_CHANGED), fetchDefinition);\n\n        case 6:\n          _context5.next = 8;\n          return takeLatest(Component.ON_SUBMIT, onFormSubmit, props.componentId, props.submitURL);\n\n        case 8:\n          _context5.next = 10;\n          return take('DO_NOT_QUIT');\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default {\n  'ComponentForm#default': handle\n};",{"version":3,"sources":["/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/ComponentForm.sagas.js"],"names":["fetchDefinition","onDidMount","onFormSubmit","handleSetDirtyState","handle","call","put","select","take","takeEvery","takeLatest","cmf","fromJS","get","Component","COMPONENT_FORM_SET_DIRTY","action","sagas","http","definitionURL","data","response","ok","setStateAction","prev","set","componentId","uiSpecPath","formSpec","definition","initialState","state","getState","jsonSchema","submitURL","getReduxState","prevState","setIn","properties","undefined","post","type","ON_SUBMIT_SUCCEED","ON_SUBMIT_FAILED","formData","checkFormComponentId","actionType","matchActionComponentid","dirty","componentFormState","props","ON_DEFINITION_URL_CHANGED","ON_SUBMIT"],"mappings":"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","sourcesContent":["import { call, put, select, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport cmf from '@talend/react-cmf';\nimport { fromJS } from 'immutable';\nimport get from 'lodash/get';\nimport Component from './ComponentForm.component';\nimport { COMPONENT_FORM_SET_DIRTY } from './ComponentForm.actions';\n\n/**\n * @param {Action{definitionURL: String, uiSpecPath: String, componentId: String }} action\n */\nexport function* fetchDefinition(action) {\n\tconst { data, response } = yield call(cmf.sagas.http.get, action.definitionURL);\n\tif (!response.ok) {\n\t\tyield put(\n\t\t\tComponent.setStateAction(\n\t\t\t\tprev =>\n\t\t\t\t\tprev\n\t\t\t\t\t\t.set('jsonSchema')\n\t\t\t\t\t\t.set('uiSchema')\n\t\t\t\t\t\t.set('response', response)\n\t\t\t\t\t\t.set('dirty', false),\n\t\t\t\taction.componentId,\n\t\t\t),\n\t\t);\n\t} else if (action.uiSpecPath) {\n\t\tconst formSpec = get(data, action.uiSpecPath);\n\t\tyield put(\n\t\t\tComponent.setStateAction(\n\t\t\t\t{\n\t\t\t\t\tdefinition: data,\n\t\t\t\t\tinitialState: formSpec,\n\t\t\t\t\t...formSpec,\n\t\t\t\t},\n\t\t\t\taction.componentId,\n\t\t\t),\n\t\t);\n\t} else {\n\t\tyield put(Component.setStateAction({ initialState: data, ...data }, action.componentId));\n\t}\n}\n\nexport function* onDidMount({ componentId = 'default', definitionURL, uiSpecPath }) {\n\tconst jsonSchema = yield select(state =>\n\t\tComponent.getState(state, componentId).get('jsonSchema'),\n\t);\n\tif (!jsonSchema) {\n\t\tyield fetchDefinition({ definitionURL, componentId, uiSpecPath });\n\t}\n}\n\nexport function* onFormSubmit(componentId, submitURL, action) {\n\tif (action.componentId !== componentId) {\n\t\treturn;\n\t}\n\t/**\n\t * below is a workaround, Component.setStateAction when called with a function as parameter\n\t * doesn't produce an object as result but a function.\n\t * a function that require as second parameter a function that uppon call return the state\n\t */\n\tconst prevState = yield select();\n\tfunction getReduxState() {\n\t\treturn prevState;\n\t}\n\tyield put(\n\t\tComponent.setStateAction(\n\t\t\tprev =>\n\t\t\t\tprev\n\t\t\t\t\t.setIn(['initialState', 'jsonSchema'], prev.get('jsonSchema'))\n\t\t\t\t\t.setIn(['initialState', 'uiSchema'], prev.get('uiSchema'))\n\t\t\t\t\t.setIn(['initialState', 'properties'], fromJS(action.properties)),\n\t\t\tcomponentId,\n\t\t)(undefined, getReduxState),\n\t);\n\tif (!submitURL) {\n\t\treturn;\n\t}\n\tconst { response, data } = yield call(cmf.sagas.http.post, submitURL, action.properties);\n\tyield put({\n\t\ttype: response.ok ? Component.ON_SUBMIT_SUCCEED : Component.ON_SUBMIT_FAILED,\n\t\tdata,\n\t\tformData: action.properties,\n\t\tresponse,\n\t\tcomponentId,\n\t});\n}\n\n/**\n * check that the formId and action type match with the provided actions\n * @param {String} componentId\n * @return {(Action{type: String, componentid: String}) => Bool}\n */\nexport function checkFormComponentId(componentId, actionType) {\n\treturn function matchActionComponentid(action) {\n\t\treturn action.type === actionType && action.componentId === componentId;\n\t};\n}\n\n/**\n * This function handle a change of the dirty state for a given component form id\n * @param {object} reduxAction with a componentId (string) & the dirtyState (boolean) to apply\n */\nexport function* handleSetDirtyState({ componentId, dirty }) {\n\tconst componentFormState = yield select(Component.getState, componentId);\n\tyield put(Component.setStateAction(componentFormState.set('dirty', !!dirty), componentId));\n}\n\nexport function* handle(props) {\n\tyield call(onDidMount, props);\n\tyield takeLatest(COMPONENT_FORM_SET_DIRTY, handleSetDirtyState);\n\tyield takeEvery(\n\t\tcheckFormComponentId(props.componentId, Component.ON_DEFINITION_URL_CHANGED),\n\t\tfetchDefinition,\n\t);\n\tyield takeLatest(Component.ON_SUBMIT, onFormSubmit, props.componentId, props.submitURL);\n\tyield take('DO_NOT_QUIT');\n}\n\nexport default {\n\t'ComponentForm#default': handle,\n};\n"]}]}