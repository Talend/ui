{"remainingRequest":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/NameResolver/NameResolver.component.js","dependencies":[{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/NameResolver/NameResolver.component.js","mtime":1540280569843},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/cache-loader/dist/cjs.js","mtime":1581407659958},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js","mtime":1581407659368}],"contextDependencies":[],"result":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getValue } from '@talend/react-forms/lib/UIForm//utils/properties';\nexport default function withNameResolver(WrappedComponent) {\n  function NameResolver(props) {\n    function resolveName(value) {\n      // create schema to get entry name from internal properties\n      var key = Array.from(props.schema.key);\n      key[key.length - 1] = \"$\".concat(key[key.length - 1], \"_name\");\n\n      var nameSchema = _objectSpread({}, props.schema, {\n        key: key\n      });\n\n      return getValue(props.properties, nameSchema) || value;\n    }\n\n    return React.createElement(WrappedComponent, _extends({}, props, {\n      resolveName: resolveName\n    }));\n  }\n\n  NameResolver.displayName = \"NameResolver(\".concat(WrappedComponent.displayName, \")\");\n  NameResolver.propTypes = {\n    properties: PropTypes.object,\n    schema: PropTypes.shape({\n      key: PropTypes.array\n    })\n  };\n  return NameResolver;\n}",{"version":3,"sources":["/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/NameResolver/NameResolver.component.js"],"names":["React","PropTypes","getValue","withNameResolver","WrappedComponent","NameResolver","props","resolveName","value","key","Array","from","schema","length","nameSchema","properties","displayName","propTypes","object","shape","array"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,kDAAzB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,gBAA1B,EAA4C;AAC1D,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC5B,aAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC3B;AACA,UAAMC,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,MAAN,CAAaH,GAAxB,CAAZ;AACAA,MAAAA,GAAG,CAACA,GAAG,CAACI,MAAJ,GAAa,CAAd,CAAH,cAA0BJ,GAAG,CAACA,GAAG,CAACI,MAAJ,GAAa,CAAd,CAA7B;;AAEA,UAAMC,UAAU,qBAAQR,KAAK,CAACM,MAAd;AAAsBH,QAAAA,GAAG,EAAHA;AAAtB,QAAhB;;AACA,aAAOP,QAAQ,CAACI,KAAK,CAACS,UAAP,EAAmBD,UAAnB,CAAR,IAA0CN,KAAjD;AACA;;AAED,WAAO,oBAAC,gBAAD,eAAsBF,KAAtB;AAA6B,MAAA,WAAW,EAAEC;AAA1C,OAAP;AACA;;AACDF,EAAAA,YAAY,CAACW,WAAb,0BAA2CZ,gBAAgB,CAACY,WAA5D;AACAX,EAAAA,YAAY,CAACY,SAAb,GAAyB;AACxBF,IAAAA,UAAU,EAAEd,SAAS,CAACiB,MADE;AAExBN,IAAAA,MAAM,EAAEX,SAAS,CAACkB,KAAV,CAAgB;AACvBV,MAAAA,GAAG,EAAER,SAAS,CAACmB;AADQ,KAAhB;AAFgB,GAAzB;AAMA,SAAOf,YAAP;AACA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getValue } from '@talend/react-forms/lib/UIForm//utils/properties';\n\nexport default function withNameResolver(WrappedComponent) {\n\tfunction NameResolver(props) {\n\t\tfunction resolveName(value) {\n\t\t\t// create schema to get entry name from internal properties\n\t\t\tconst key = Array.from(props.schema.key);\n\t\t\tkey[key.length - 1] = `$${key[key.length - 1]}_name`;\n\n\t\t\tconst nameSchema = { ...props.schema, key };\n\t\t\treturn getValue(props.properties, nameSchema) || value;\n\t\t}\n\n\t\treturn <WrappedComponent {...props} resolveName={resolveName} />;\n\t}\n\tNameResolver.displayName = `NameResolver(${WrappedComponent.displayName})`;\n\tNameResolver.propTypes = {\n\t\tproperties: PropTypes.object,\n\t\tschema: PropTypes.shape({\n\t\t\tkey: PropTypes.array,\n\t\t}),\n\t};\n\treturn NameResolver;\n}\n"]}]}