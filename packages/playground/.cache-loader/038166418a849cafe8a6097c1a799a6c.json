{"remainingRequest":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/MultiSelect/displayMode/TextMode.component.js","dependencies":[{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/MultiSelect/displayMode/TextMode.component.js","mtime":1564558237590},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/cache-loader/dist/cjs.js","mtime":1581407659958},{"path":"/Users/jmfrancois/github/talend/ui/packages/containers/sandbox/node_modules/babel-loader/lib/index.js","mtime":1581407659368}],"contextDependencies":[],"result":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Badge from '@talend/react-components/lib/Badge';\nimport { TextMode as FieldTemplate } from '@talend/react-forms/lib/UIForm/fields/FieldTemplate';\nimport VirtualizedList from '@talend/react-components/lib/VirtualizedList';\nimport { getRowData } from '@talend/react-components/lib/VirtualizedList/utils/gridrow';\n\nfunction renderItem(props) {\n  var item = getRowData(props.parent, props.index);\n  return React.createElement(Badge, {\n    style: props.style,\n    key: props.index,\n    label: item.name,\n    selected: true\n  });\n}\n\nrenderItem.height = 35;\nrenderItem.propTypes = {\n  parent: PropTypes.object,\n  style: PropTypes.object,\n  index: PropTypes.number\n};\nexport default function MultiSelectTextMode(props) {\n  var names = props.resolveName(props.value);\n  var titleMap = props.value.map(function (nextVal, index) {\n    return {\n      name: names[index],\n      value: nextVal\n    };\n  });\n  return React.createElement(FieldTemplate, {\n    id: props.id,\n    label: props.schema.title\n  }, React.createElement(\"div\", {\n    style: {\n      height: 300\n    }\n  }, React.createElement(VirtualizedList, {\n    type: \"tc-multiselect\",\n    rowHeight: props.itemViewRender.rowHeight,\n    rowRenderers: {\n      'tc-multiselect': props.itemViewRender\n    },\n    collection: titleMap\n  })));\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  MultiSelectTextMode.propTypes = {\n    itemViewRender: PropTypes.func,\n    id: PropTypes.string,\n    resolveName: PropTypes.func,\n    schema: PropTypes.shape({\n      title: PropTypes.string,\n      titleMap: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n      }))\n    }).isRequired,\n    value: PropTypes.arrayOf(PropTypes.string)\n  };\n}\n\nMultiSelectTextMode.defaultProps = {\n  value: [],\n  itemViewRender: renderItem,\n  resolveName: function resolveName(value) {\n    return value;\n  }\n};",{"version":3,"sources":["/Users/jmfrancois/github/talend/ui/packages/containers/src/ComponentForm/fields/MultiSelect/displayMode/TextMode.component.js"],"names":["PropTypes","React","Badge","TextMode","FieldTemplate","VirtualizedList","getRowData","renderItem","props","item","parent","index","style","name","height","propTypes","object","number","MultiSelectTextMode","names","resolveName","value","titleMap","map","nextVal","id","schema","title","itemViewRender","rowHeight","process","env","NODE_ENV","func","string","shape","arrayOf","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Badge from '@talend/react-components/lib/Badge';\nimport { TextMode as FieldTemplate } from '@talend/react-forms/lib/UIForm/fields/FieldTemplate';\nimport VirtualizedList from '@talend/react-components/lib/VirtualizedList';\nimport { getRowData } from '@talend/react-components/lib/VirtualizedList/utils/gridrow';\n\nfunction renderItem(props) {\n\tconst item = getRowData(props.parent, props.index);\n\treturn <Badge style={props.style} key={props.index} label={item.name} selected />;\n}\nrenderItem.height = 35;\nrenderItem.propTypes = {\n\tparent: PropTypes.object,\n\tstyle: PropTypes.object,\n\tindex: PropTypes.number,\n};\n\nexport default function MultiSelectTextMode(props) {\n\tconst names = props.resolveName(props.value);\n\tconst titleMap = props.value.map((nextVal, index) => ({\n\t\tname: names[index],\n\t\tvalue: nextVal,\n\t}));\n\treturn (\n\t\t<FieldTemplate id={props.id} label={props.schema.title}>\n\t\t\t<div style={{ height: 300 }}>\n\t\t\t\t<VirtualizedList\n\t\t\t\t\ttype=\"tc-multiselect\"\n\t\t\t\t\trowHeight={props.itemViewRender.rowHeight}\n\t\t\t\t\trowRenderers={{ 'tc-multiselect': props.itemViewRender }}\n\t\t\t\t\tcollection={titleMap}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</FieldTemplate>\n\t);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n\tMultiSelectTextMode.propTypes = {\n\t\titemViewRender: PropTypes.func,\n\t\tid: PropTypes.string,\n\t\tresolveName: PropTypes.func,\n\t\tschema: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t\ttitleMap: PropTypes.arrayOf(\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\tname: PropTypes.string.isRequired,\n\t\t\t\t\tvalue: PropTypes.string.isRequired,\n\t\t\t\t}),\n\t\t\t),\n\t\t}).isRequired,\n\t\tvalue: PropTypes.arrayOf(PropTypes.string),\n\t};\n}\n\nMultiSelectTextMode.defaultProps = {\n\tvalue: [],\n\titemViewRender: renderItem,\n\tresolveName: value => value,\n};\n"]}]}