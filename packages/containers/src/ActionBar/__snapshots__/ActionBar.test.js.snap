// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Container ActionBar should compute props using CMF with array of string 1`] = `
{
  "actions": {
    "left": [
      {
        "actionId": "menu:demo",
      },
      {
        "actionId": "menu:article",
      },
      {
        "actions": [
          "menu:demo",
          "menu:article",
        ],
        "displayMode": "btnGroup",
      },
    ],
    "right": [
      {
        "displayMode": "splitDropdown",
        "items": [
          "menu:article",
        ],
        "name": "menu:demo",
      },
    ],
  },
  "deleteState": [Function],
  "dispatch": [Function],
  "dispatchActionCreator": [Function],
  "getComponent": [Function],
  "initState": [Function],
  "renderers": {
    "Action": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "DISPLAY_MODE_DROPDOWN": "dropdown",
      "DISPLAY_MODE_FILE": "file",
      "DISPLAY_MODE_ICON_TOGGLE": "iconToggle",
      "DISPLAY_MODE_SPLIT_DROPDOWN": "splitDropdown",
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "ActionDropdown": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "ActionSplitDropdown": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "Actions": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
  },
  "setState": [Function],
  "state": undefined,
  "updateState": [Function],
}
`;

exports[`Container ActionBar should pass the props 1`] = `
{
  "actions": {
    "left": [
      {
        "bsStyle": "primary",
        "icon": "fa fa-asterisk",
        "label": "Preparations",
        "onClick": [MockFunction],
      },
      {
        "displayMode": "dropdown",
        "icon": "fa fa-file-excel-o",
        "items": [
          {
            "label": "document 1",
            "onClick": [MockFunction],
          },
          {
            "label": "document 2",
            "onClick": [MockFunction],
          },
        ],
        "label": "related items",
      },
    ],
    "right": [
      {
        "icon": "fa fa-file-excel-o",
        "label": "Datasets",
        "onClick": [MockFunction],
      },
      {
        "icon": "fa fa-star",
        "label": "Favorites",
        "onClick": [MockFunction],
      },
      {
        "actions": [
          {
            "label": "document 1",
            "onClick": [MockFunction],
          },
          {
            "label": "document 2",
            "onClick": [MockFunction],
          },
        ],
        "displayMode": "btnGroup",
      },
    ],
  },
  "deleteState": [Function],
  "dispatch": [Function],
  "dispatchActionCreator": [Function],
  "getComponent": [Function],
  "initState": [Function],
  "renderers": {
    "Action": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "DISPLAY_MODE_DROPDOWN": "dropdown",
      "DISPLAY_MODE_FILE": "file",
      "DISPLAY_MODE_ICON_TOGGLE": "iconToggle",
      "DISPLAY_MODE_SPLIT_DROPDOWN": "splitDropdown",
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "ActionDropdown": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "ActionSplitDropdown": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
    "Actions": {
      "$$typeof": Symbol(react.memo),
      "CMFContainer": [Function],
      "WrappedComponent": [Function],
      "compare": null,
      "getState": [Function],
      "setStateAction": [Function],
      "type": [Function],
    },
  },
  "setState": [Function],
  "state": undefined,
  "updateState": [Function],
}
`;
