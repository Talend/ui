/// Define button colors based on its background
/// @access public
/// @param {Color} $btn-bg [$btn-default-bg] - button background color to tint
@mixin btn-colors($btn-bg: $btn-default-bg) {
	box-shadow: 0 (-1 * $btn-box-shadow-width) 0 rgba(0, 0, 0, 0.15) inset;

	&:focus,
	&.focus,
	&:hover {
		background-color: $btn-bg;
		border-color: $btn-bg;
	}

	&:hover {
		opacity: 0.8;
	}

	&:active,
	&.active,
	.open > &.dropdown-toggle {
		&,
		&.focus,
		&:focus,
		&:hover {
			opacity: 1;
			background-color: shade($btn-bg, 12%);
			border-color: shade($btn-bg, 12%);
			box-shadow: none;
		}
	}

	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&,
		&:hover,
		&:focus,
		&.focus {
			opacity: 0.4;
		}
	}
}

/// Define inverse button colors based on the button color
/// @access public
/// @param {Color} $btn-color [$btn-default-bg] - button background color to tint
@mixin btn-inverse-colors($btn-color: $btn-default-bg) {
	// we have a border but we cannot use box-sizing: border-box because we don't have a height.
	// so we change the line-height and the min-height to match 3.5rem ($btn-line-height) - borders
	$border-width: 1.5px;
	$btn-inverse-line-height: calc(#{$btn-line-height} - (2 * #{$border-width}));

	&.btn-inverse {
		background-color: $white;
		color: $btn-color;
		box-shadow: none;
		border: $border-width solid $btn-color;
		line-height: $btn-inverse-line-height;
		min-height: $btn-inverse-line-height;

		&:active,
		&.active,
		.open > &.dropdown-toggle {
			&,
			&.focus,
			&:focus,
			&:hover {
				background-color: $white;
				color: shade($btn-color, 12%);
				border-color: shade($btn-color, 12%);
			}
		}
	}
}

/// Dropdown caret default color
/// @access public
/// @content Borders and box-shadow color variation
/// @param {Color} dropdown-caret-color - Caret color
@mixin dropdown-caret-color($dropdown-caret-color) {
	border-top-color: $dropdown-caret-color;
	border-right-color: $dropdown-caret-color;
	box-shadow: 1px -1px 0 $dropdown-caret-color;
}

/// Define gradient based webapp layouts
/// @access public
/// @param {Color} $brand-primary - primary color of product
/// @param {Color} $brand-secondary [$brand-primary] - secondary color of product
@mixin layout-colors($brand-primary, $brand-secondary: $brand-primary) {
	$logo-size: 31rem !default;

	[role='banner'] {
		nav {
			$gradient-angle: 'to right';
			background: linear-gradient(#{$gradient-angle}, $regal-blue 20%, $brand-primary 80%);
		}

		[role='heading'] span:last-of-type {
			display: inline-flex;
			align-items: center;

			&:before {
				display: block;
				content: '';
				margin-right: $padding-small;
				height: $navbar-brand-logo-height;
				width: $navbar-brand-logo-height;
				background-repeat: no-repeat;
			}
		}

		[role='presentation'] {
			// Sorry, Bootstrap customization sucks
			:global(.btn),
			:global(.btn.open),
			:global(.dropdown.open .btn) {
				&,
				&:hover {
					background: none;
				}
			}

			:global(.btn) {
				&:hover,
				&:focus {
					box-shadow: 0 200px 100px -100px rgba(255, 255, 255, 0.12) inset;
				}
			}
		}
	}

	[role='navigation'] {
		$gradient-angle: 'to bottom';
		position: relative;
		height: 100%;
		overflow: hidden;
		background: linear-gradient(#{$gradient-angle}, $st-tropaz, $brand-primary 95%);

		.nav-inverse {
			background-color: transparent;
		}

		&:before {
			content: '';
			position: absolute;
			left: 0;
			bottom: -50px;
			height: $logo-size;
			width: $logo-size;
			background-repeat: no-repeat;
		}

		&[aria-expanded='false']:before {
			content: none;
		}

		[role='presentation'] {
			&[aria-current] {
				$gradient-angle: 'to right';
				background: linear-gradient(#{$gradient-angle}, $green-talend -15%, $brand-secondary 45%);
			}

			&:hover {
				&:not([aria-current]) {
					background: none;
					box-shadow: 0 200px 100px -100px rgba(255, 255, 255, 0.12) inset;
				}
			}
		}
	}
}
