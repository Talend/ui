"use strict";(self.webpackChunk_talend_ui_storybook_one=self.webpackChunk_talend_ui_storybook_one||[]).push([[1194],{"../components/src/List/ListComposition.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,DisplayModeControlled:()=>DisplayModeControlled,DisplayModeUncontrolled:()=>DisplayModeUncontrolled,LazyLoading:()=>LazyLoading,LotsOfActionsLayoutRenderUncontrolled:()=>LotsOfActionsLayoutRenderUncontrolled,SelectableItems:()=>SelectableItems,SelectableItemsActionBar:()=>SelectableItemsActionBar,SelectableItemsTotalItems:()=>SelectableItemsTotalItems,SelectableItemsWithDisabledItems:()=>SelectableItemsWithDisabledItems,SortByAndResizableColumnUncontrolled:()=>SortByAndResizableColumnUncontrolled,SortByControlled:()=>SortByControlled,SortByUncontrolled:()=>SortByUncontrolled,SortByUncontrolledInLargeMode:()=>SortByUncontrolledInLargeMode,TableWithColumnChooser:()=>TableWithColumnChooser,TableWithColumnChooserAndInitialVisibleColumns:()=>TableWithColumnChooserAndInitialVisibleColumns,TableWithColumnChooserAndLockedColumns:()=>TableWithColumnChooserAndLockedColumns,TableWithColumnChooserPersisted:()=>TableWithColumnChooserPersisted,TextFilterControlled:()=>TextFilterControlled,TextFilterUncontrolled:()=>TextFilterUncontrolled,TotalItems:()=>TotalItems,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ListComposition_stories});var dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),List_component=__webpack_require__("../components/src/List/List.component.js"),ListComposition=__webpack_require__("../components/src/List/ListComposition/index.js");Object.entries(ListComposition.A).forEach(([key,value])=>{List_component.A[key]=value}),List_component.A.hooks=ListComposition.J;const List=List_component.A;var ActionBar=__webpack_require__("../components/src/ActionBar/index.js"),lodash=__webpack_require__("../../node_modules/lodash/lodash.js");const fewTitleActions=[{id:"edit",label:"Edit","data-feature":"list.item.edit",icon:"talend-pencil",onClick:(0,dist.XI)("onEdit"),hideLabel:!0},{id:"delete",label:"Delete","data-feature":"list.item.delete",icon:"talend-trash",onClick:(0,dist.XI)("onDelete"),hideLabel:!0}],lotOfTitleActions=[{id:"edit",label:"Edit","data-feature":"list.item.edit",icon:"talend-pencil",onClick:(0,dist.XI)("onEdit")},{id:"delete",label:"Delete","data-feature":"list.item.delete",icon:"talend-trash",onClick:(0,dist.XI)("onDelete")},{id:"copy",label:"Copy","data-feature":"list.item.copy",icon:"talend-files-o",onClick:(0,dist.XI)("onCopy")},{id:"parameters",label:"Edit parameters","data-feature":"list.item.params",icon:"talend-cog",onClick:(0,dist.XI)("onEditParameters")}],titleActions=[{id:"edit",label:"edit","data-feature":"list.item.edit",icon:"talend-pencil",onClick:(0,dist.XI)("onEdit")},{id:"delete",label:"delete","data-feature":"list.item.delete",icon:"talend-trash",onClick:(0,dist.XI)("onDelete")},{id:"copy",label:"copy","data-feature":"list.item.copy",icon:"talend-files-o",onClick:(0,dist.XI)("onCopy")},{id:"parameters",label:"edit parameters","data-feature":"list.item.params",icon:"talend-cog",onClick:(0,dist.XI)("onEditParameters")},{id:"related",displayMode:"dropdown",label:"related items",icon:"talend-folder",items:[{label:"document 1","data-feature":"list.item.related",onClick:(0,dist.XI)("document 1 click")},{label:"document 2","data-feature":"list.item.related",onClick:(0,dist.XI)("document 2 click")},{label:"document 3","data-feature":"list.item.related",onClick:(0,dist.XI)("document 3 click")},{label:"document 4","data-feature":"list.item.related",onClick:(0,dist.XI)("document 4 click")},{label:"document 5","data-feature":"list.item.related",onClick:(0,dist.XI)("document 5 click")},{label:"document 6","data-feature":"list.item.related",onClick:(0,dist.XI)("document 6 click")},{label:"document 7","data-feature":"list.item.related",onClick:(0,dist.XI)("document 7 click")},{label:"document 8","data-feature":"list.item.related",onClick:(0,dist.XI)("document 8 click")},{label:"document 9","data-feature":"list.item.related",onClick:(0,dist.XI)("document 9 click")},{label:"document 10","data-feature":"list.item.related",onClick:(0,dist.XI)("document 10 click")}],pullRight:!0}],persistentActions=[{label:"favorite",icon:"talend-star",className:"favorite","data-feature":"list.item.favorite",onClick:(0,dist.XI)("onFavorite")},{label:"certify",icon:"talend-badge",className:"certify","data-feature":"list.item.certify",onClick:(0,dist.XI)("onCertify")}],complexCollection=[{id:0,iconAndText:{icon:"talend-list",label:"list"},name:"Title with few actions",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Simple row with few actions",author:"Jean-Pierre DUPONT",display:"text",className:"item-0-class",titleActions:fewTitleActions},{id:1,iconAndText:{icon:"talend-list",label:"list"},name:"Title with lot of actions",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Simple row with lot of actions",display:"text",className:"item-1-class",titleActions:lotOfTitleActions},{id:2,iconAndText:{icon:"talend-list",label:"list"},name:"Title with persistant actions",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Simple row with icon and actions",author:"Jean-Pierre DUPONT",display:"text",className:"item-2-class",persistentActions},{id:3,iconAndText:{icon:"talend-list",label:"list"},name:"Title with icon",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Simple row without icon",author:"",icon:"talend-file-xls-o",display:"text",className:"item-3-class"},{id:4,iconAndText:{icon:"talend-list",label:"list"},name:"Title in input mode",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Simple row with title in edit mode",author:"Jean-Pierre DUPONT",icon:"talend-file-json-o",display:"input",className:"item-4-class"},{id:5,iconAndText:{icon:"talend-list",label:"list"},name:"Title with long long long long long long long long long long long text",tag:"test",created:"2016-09-22",modified:"2016-09-22",description:"Row with a super super long text to show the ellipsis",author:"Jean-Pierre DUPONT with super super super super super super super super super super super super super super super super super super super super super super super long name, but there was not enough long text",icon:"talend-file-json-o",className:"item-5-class"}];for(let i=complexCollection.length;i<100;i+=1)complexCollection.push({id:i,iconAndText:{icon:"talend-list",label:"list"},name:`Title with icon and actions ${i}`,tag:"test",created:1474495200,modified:1474495200,description:"Simple row with icon and actions",author:"Jean-Pierre DUPONT",icon:"talend-file-xls-o",display:"text",className:"item-0-class",persistentActions,titleActions});const simpleCollection=[];for(let i=0;i<100;i+=1)simpleCollection.push({id:i,iconAndText:{icon:"talend-list",label:"list"},iconAndTextWithGetter:"icon from getter",name:`Title with icon and actions ${i}`,isValid1:[!0,!1,void 0][(0,lodash.random)(2)],isValid2:[!0,!1,void 0][(0,lodash.random)(2)],tag:"test",created:14744952e5,modified:14744952e5,description:`Simple row with icon and actions${[" (crème brûlée)",""][(0,lodash.random)(1)]}`,author:"Jean-Pierre DUPONT",icon:"talend-file-xls-o",display:"text",className:"item-0-class",persistentActions,titleActions,quality:{invalid:1,empty:2,valid:3,na:4,onClick:(0,dist.XI)("onQualityClick")},tagLabel:{label:"incorrect",style:"warning"}});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const titleProps=rowData=>({onClick:(0,dist.XI)("onTitleClick"),"data-feature":`list.item.title.${rowData.id}`,actionsKey:"titleActions",persistentActionsKey:"persistentActions",displayModeKey:"display",iconKey:"icon",onEditCancel:(0,dist.XI)("cancel-edit"),onEditSubmit:(0,dist.XI)("submit-edit"),iconTooltip:"TDP"});function CustomList(props){return(0,jsx_runtime.jsxs)(List.VList,{id:"my-vlist",...props,children:[(0,jsx_runtime.jsx)(List.VList.Text,{label:"Id",dataKey:"id"}),(0,jsx_runtime.jsx)(List.VList.Title,{label:"Name",dataKey:"name",columnData:titleProps}),(0,jsx_runtime.jsx)(List.VList.IconText,{label:"IconText",dataKey:"iconAndText"}),(0,jsx_runtime.jsx)(List.VList.IconText,{label:"IconText",columnData:{getIcon:()=>"talend-tdp-colored",getIconTooltip:({iconAndTextWithGetter})=>`${iconAndTextWithGetter}--icon tooltip`},dataKey:"iconAndTextWithGetter"}),(0,jsx_runtime.jsx)(List.VList.Boolean,{label:"Valid",dataKey:"isValid1"}),(0,jsx_runtime.jsx)(List.VList.Boolean,{label:"ValidWithIcon",dataKey:"isValid2",columnData:{displayMode:List.VList.Boolean.displayMode.ICON}}),(0,jsx_runtime.jsx)(List.VList.QualityBar,{label:"Quality",dataKey:"quality"}),(0,jsx_runtime.jsx)(List.VList.Label,{label:"TagLabel",dataKey:"tagLabel"}),(0,jsx_runtime.jsx)(List.VList.Badge,{label:"Tag",dataKey:"tag",columnData:{selected:!0},disableSort:!0}),(0,jsx_runtime.jsx)(List.VList.Text,{label:"Description",dataKey:"description",disableSort:!0}),(0,jsx_runtime.jsx)(List.VList.Text,{label:"Author",dataKey:"author"}),(0,jsx_runtime.jsx)(List.VList.Datetime,{label:"Created",dataKey:"created",columnData:{mode:"ago"}}),(0,jsx_runtime.jsx)(List.VList.Datetime,{label:"Modified",dataKey:"modified",columnData:{mode:"format"}})]})}function CustomListResizable(props){return(0,jsx_runtime.jsxs)(List.VList,{id:"my-vlist",...props,children:[(0,jsx_runtime.jsx)(List.VList.Text,{label:"Id",dataKey:"id",resizable:!0,width:400,headerRenderer:List.VList.headerDictionary.resizable}),(0,jsx_runtime.jsx)(List.VList.Title,{label:"Name",dataKey:"name",columnData:titleProps,resizable:!0,width:400,headerRenderer:List.VList.headerDictionary.resizable}),(0,jsx_runtime.jsx)(List.VList.Badge,{label:"Tag",dataKey:"tag",columnData:{selected:!0},disableSort:!0,resizable:!0,width:400})]})}function CustomListLazyLoading(props){return(0,jsx_runtime.jsxs)(List.LazyLoadingList,{id:"my-infinite-scroll-list",...props,children:[(0,jsx_runtime.jsx)(List.VList.Text,{label:"Id",dataKey:"id"}),(0,jsx_runtime.jsx)(List.VList.Title,{label:"Name",dataKey:"name",columnData:titleProps}),(0,jsx_runtime.jsx)(List.VList.Badge,{label:"Tag",dataKey:"tag",columnData:{selected:!0},disableSort:!0}),(0,jsx_runtime.jsx)(List.VList.Text,{label:"Description",dataKey:"description",disableSort:!0}),(0,jsx_runtime.jsx)(List.VList.Text,{label:"Author",dataKey:"author"}),(0,jsx_runtime.jsx)(List.VList.Datetime,{label:"Created",dataKey:"created",columnData:{mode:"format"}}),(0,jsx_runtime.jsx)(List.VList.Datetime,{label:"Modified",dataKey:"modified",columnData:{mode:"format"}})]})}const ListComposition_stories={title:"Components/List/List Composition",parameters:{chromatic:{disableSnapshot:!0}}},Default=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"Default list"}),(0,jsx_runtime.jsx)("p",{children:"By default List doesn't come with any feature"}),(0,jsx_runtime.jsx)("pre",{children:'\n<List.Manager id="my-list" collection={simpleCollection}>\n    <List.VList id="my-vlist">\n        <List.VList.Text label="Id" dataKey="id" />\n        <List.VList.Title\n            label="Name"\n            dataKey="name"\n            columnData={titleProps}\n            {...CellTitle}\n        />\n        ...\n        <List.VList.Datetime label="Modified" dataKey="modified" />\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,children:(0,jsx_runtime.jsx)(CustomList,{})})})]}),DisplayModeUncontrolled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with display mode change"}),(0,jsx_runtime.jsx)("p",{children:"You can change display mode by adding the selector in toolbar"}),(0,jsx_runtime.jsx)("pre",{children:'\n<List.Manager id="my-list" collection={collection} initialDisplayMode="table">\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.DisplayMode id="my-list-displayMode" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.DisplayMode,{id:"my-list-displayMode"})})}),(0,jsx_runtime.jsx)(CustomList,{})]})})]}),DisplayModeControlled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with display mode change"}),(0,jsx_runtime.jsxs)("p",{children:["You can control the display mode by",(0,jsx_runtime.jsx)("br",{}),"- passing the display mode to List.DisplayMode and List.VList",(0,jsx_runtime.jsx)("br",{}),"- handling the display mode change via List.DisplayMode onChange prop"]}),(0,jsx_runtime.jsx)("pre",{children:'\n<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.DisplayMode\n                id="my-list-displayMode"\n                selectedDisplayMode="table"\n                onChange={(event, displayMode) => changeDisplayMode(displayMode)}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.DisplayMode,{id:"my-list-displayMode",onChange:(0,dist.XI)("onDisplayModeChange"),selectedDisplayMode:"table"})})}),(0,jsx_runtime.jsx)(CustomList,{type:"TABLE"})]})})]}),TotalItems=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"Total items"}),(0,jsx_runtime.jsx)("p",{children:"You can show the total number of elements in the list by adding the ItemsNumber component"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.ItemsNumber totalItems="100" label="100 users" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.ItemsNumber,{totalItems:simpleCollection.length,label:`${simpleCollection.length} users`})})}),(0,jsx_runtime.jsx)(CustomList,{type:"TABLE"})]})})]}),TextFilterUncontrolled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"Text Filter"}),(0,jsx_runtime.jsx)("p",{children:"You can filter the dataset with the text by adding the component and let it work itself"}),(0,jsx_runtime.jsxs)("p",{children:["You can manually restrict the filter scope to specific columns, by passing the dataKey, here it equals to ",(0,jsx_runtime.jsx)("code",{children:"name"})," and ",(0,jsx_runtime.jsx)("code",{children:"description"}),", but it's optional."]}),(0,jsx_runtime.jsx)("p",{children:"Note that the Column Chooser will impact the results, we can filter only on what we see!"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.TextFilter id="my-list-textFilter" applyOn={[\'name\', \'description\']} />\n            <List.ColumnChooser />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,initialVisibleColumns:["id","name"],children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsxs)(List.Toolbar.Right,{children:[(0,jsx_runtime.jsx)(List.TextFilter,{id:"my-list-textFilter",applyOn:["name","description"]}),(0,jsx_runtime.jsx)(List.ColumnChooser,{onSubmit:(0,dist.XI)("onSubmit")})]})}),(0,jsx_runtime.jsx)(CustomList,{type:"TABLE"})]})})]}),TextFilterControlled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"Text Filter"}),(0,jsx_runtime.jsxs)("p",{children:["You can control the filter feature by providing callbacks to",(0,jsx_runtime.jsx)("br",{}),"- handle the text filter value change and filter data",(0,jsx_runtime.jsx)("br",{}),"- handle the text filter's docked status"]}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.TextFilter id="my-list-textFilter" docked={false} onChange={action(\'onChange\')} onToggle={action(\'onToggle\')} />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.TextFilter,{id:"my-list-textFilter",docked:!1,onChange:(0,dist.XI)("onChange"),onToggle:(0,dist.XI)("onToggle")})})}),(0,jsx_runtime.jsx)(CustomList,{type:"TABLE"})]})})]}),SortByUncontrolled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with sorting feature"}),(0,jsx_runtime.jsx)("p",{children:"You can change the sorting criteria by adding the component in the toolbar"}),(0,jsx_runtime.jsx)("pre",{children:"\n<List.Manager id=\"my-list\" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.SortBy\n            id=\"my-list-sortBy\"\n            options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n            initialValue={{ sortBy: 'id', isDescending: true }}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\">\n        ...\n    </List.VList>\n</List.Manager>\n"}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{collection:simpleCollection,id:"my-list",initialSortParams:{sortBy:"id",isDescending:!0},children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.SortBy,{id:"my-list-sortBy",options:[{key:"id",label:"Id"},{key:"name",label:"Name"}]})})}),(0,jsx_runtime.jsx)(CustomList,{})]})})]}),SortByUncontrolledInLargeMode=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with sorting feature"}),(0,jsx_runtime.jsx)("p",{children:"You can change the sorting criteria by adding the component in the toolbar"}),(0,jsx_runtime.jsx)("pre",{children:"\n                <List.Manager id=\"my-list\" collection={simpleCollection}>\n                    <List.Toolbar>\n                        <List.SortBy\n                        id=\"my-list-sortBy\"\n                        options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n                        initialValue={{ sortBy: 'id', isDescending: true }}\n                        />\n                        <List.DisplayMode id=\"my-list-displayMode\" initialDisplayMode=\"large\" />\n                    </List.Toolbar>\n                    <List.VList id=\"my-vlist\">\n                        ...\n                    </List.VList>\n                </List.Manager>\n        "}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{collection:simpleCollection,id:"my-list",initialSortParams:{sortBy:"id",isDescending:!0},children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsxs)(List.Toolbar.Right,{children:[(0,jsx_runtime.jsx)(List.SortBy,{id:"my-list-sortBy",options:[{key:"id",label:"Id"},{key:"name",label:"Name"}]}),(0,jsx_runtime.jsx)(List.DisplayMode,{id:"my-list-displayMode",initialDisplayMode:"large"})]})}),(0,jsx_runtime.jsx)(CustomList,{})]})})]}),SortByControlled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with sorting feature"}),(0,jsx_runtime.jsx)("p",{children:"You can control the sorting feature by providing both onChange and onOrderChange props (functions) to the SortBy component."}),(0,jsx_runtime.jsx)("pre",{children:"\n<List.Manager id=\"my-list\" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.SortBy\n            id=\"my-list-sortBy\"\n            options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n            onChange={action('onSortChange')}\n            value={{ sortBy: 'name', isDescending: false }}\n        />\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\">\n        ...\n    </List.VList>\n</List.Manager>\n"}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.SortBy,{id:"my-list-sortBy",options:[{key:"name",label:"Name"},{key:"id",label:"Id"}],value:{sortBy:"name",isDescending:!1},onChange:(0,dist.XI)("onSortChange")})})}),(0,jsx_runtime.jsx)(CustomList,{})]})})]}),SortByAndResizableColumnUncontrolled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with sorting feature and resizing column"}),(0,jsx_runtime.jsx)("p",{children:"You can change the sorting criteria by adding the component in the toolbar"}),(0,jsx_runtime.jsx)("p",{children:"You can add the resizing column by adding the properties resizable, a width and use the headerRenderer \"'resizable'\" (note: the last column don't need to have the headerRenderer)"}),(0,jsx_runtime.jsx)("pre",{children:'\n<List.Manager id="my-list" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.SortBy\n            id="my-list-sortBy"\n            options={[{ key: \'name\', label: \'Name\' }, { key: \'id\', label: \'Id\' }]}\n            initialValue={{ sortBy: \'id\', isDescending: true }}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist">\n        <List.VList.Text\n            label="Id"\n            dataKey="id"\n            resizable\n            width={400}\n            headerRenderer={List.VList.headerDictionary[\'resizable\']}\n        />\n        <List.VList.Title\n            label="Name"\n            dataKey="name"\n            columnData={titleProps}\n            resizable\n            width={400}\n            headerRenderer={List.VList.headerDictionary[\'resizable\']}\n        />\n        <List.VList.Badge\n            label="Tag"\n            dataKey="tag"\n            columnData={{ selected: true }}\n            disableSort\n            resizable\n            width={400}\n        />\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{collection:simpleCollection,id:"my-list",initialSortParams:{sortBy:"id",isDescending:!0},children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.SortBy,{id:"my-list-sortBy",options:[{key:"id",label:"Id"},{key:"name",label:"Name"}]})})}),(0,jsx_runtime.jsx)(CustomListResizable,{})]})})]}),LotsOfActionsLayoutRenderUncontrolled=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with multiple right actions"}),(0,jsx_runtime.jsx)("p",{children:"With multiple actions the Right component will align the actions to the right, and add a separator between each."}),(0,jsx_runtime.jsx)("pre",{children:"\n                            <List.Manager id=\"my-list\" collection={simpleCollection}>\n                            <List.Toolbar>\n                                <List.Toolbar.Right>\n                                    <List.TextFilter id=\"my-list-textFilter\" />\n                                    <List.SortBy\n                                        id=\"my-list-sortBy\"\n                                        options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n                                        initialValue={{ sortBy: 'id', isDescending: true }}\n                                    />\n                                    <List.DisplayMode id=\"my-list-displayMode\" />\n                                </List.Toolbar.Right>\n                            </List.Toolbar>\n                            <CustomList />\n                        </List.Manager>\n\n"}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsxs)(List.Toolbar,{children:[(0,jsx_runtime.jsx)(ActionBar.A,{actions:{left:[{icon:"talend-cog",label:"Foo",onClick:(0,dist.XI)("foo")},{icon:"talend-cog",label:"Bar",onClick:(0,dist.XI)("bar")}]}}),(0,jsx_runtime.jsxs)(List.Toolbar.Right,{children:[(0,jsx_runtime.jsx)(List.TextFilter,{id:"my-list-textFilter"}),(0,jsx_runtime.jsx)(List.SortBy,{id:"my-list-sortBy",options:[{key:"name",label:"Name"},{key:"id",label:"Id"}],initialValue:{sortBy:"id",isDescending:!0}}),(0,jsx_runtime.jsx)(List.DisplayMode,{id:"my-list-displayMode"})]})]}),(0,jsx_runtime.jsx)(CustomList,{})]})})]}),LazyLoading=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List supporting Lazy Loding"}),(0,jsx_runtime.jsxs)("p",{children:["The LazyLoadingList list component allows to create lists that supports lazy loading feature.",(0,jsx_runtime.jsx)("br",{}),"It requires :",(0,jsx_runtime.jsx)("br",{}),"- ",(0,jsx_runtime.jsx)("code",{children:"loadMoreRows"})," prop triggered when data loading is required",(0,jsx_runtime.jsx)("br",{}),"- ",(0,jsx_runtime.jsx)("code",{children:"rowCount"})," prop representing the collection's total number of items",(0,jsx_runtime.jsx)("br",{}),"Skeleton rows are rendered when data is missing, while they are being fetched."]}),(0,jsx_runtime.jsx)("pre",{children:'\n<List.Manager id="my-list" collection={collection}>\n    <List.LazyLoadingList id="my-infinite-scroll-list" loadMoreRows={loadMoreRows} rowCount={totalRowCount}>\n        <List.VList.Text label="Id" dataKey="id" width={-1} />\n            ...\n    </List.LazyLoadingList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("h2",{children:"Table mode"}),(0,jsx_runtime.jsx)("section",{style:{height:"30vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-table-list",collection:[simpleCollection[0]],children:(0,jsx_runtime.jsx)(CustomListLazyLoading,{type:"TABLE",loadMoreRows:(0,dist.XI)("onLoadMoreRows"),rowCount:simpleCollection.length,onRowsRendered:(0,dist.XI)("onRowsRendered")})})}),(0,jsx_runtime.jsx)("h2",{children:"Large mode"}),(0,jsx_runtime.jsx)("section",{style:{height:"30vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-large-list",collection:[simpleCollection[0]],children:(0,jsx_runtime.jsx)(CustomListLazyLoading,{type:"LARGE",loadMoreRows:(0,dist.XI)("onLoadMoreRows"),rowCount:simpleCollection.length})})}),(0,jsx_runtime.jsx)("h2",{children:"Collapsible panel mode"}),(0,jsx_runtime.jsx)("section",{style:{height:"30vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-collapsible-panels-list",collection:[{id:"status-header",header:[{displayMode:"status",actions:[],status:"successful",label:"Successful",icon:"talend-check"}],content:[{label:"Content1",description:"Description1"},{label:"Content2",description:"Description2"}],expanded:!0,children:(0,jsx_runtime.jsx)("div",{children:"HELLO WORLD"})}],children:(0,jsx_runtime.jsx)(CustomListLazyLoading,{type:"COLLAPSIBLE_PANEL",loadMoreRows:(0,dist.XI)("onLoadMoreRows"),rowCount:50})})})]}),SelectableItems=()=>{const{isSelected,onToggleAll,onToggleItem}=List.hooks.useCollectionSelection(simpleCollection,[],"id");return(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with selectable items"}),(0,jsx_runtime.jsx)("p",{children:"The list also supports items selection, when using the proper hook."}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,children:(0,jsx_runtime.jsx)(CustomList,{isSelected,onToggleAll,selectionToggle:(_,group)=>onToggleItem(group)})})})]})},SelectableItemsWithDisabledItems=()=>{const{isSelected,onToggleAll,onToggleItem}=List.hooks.useCollectionSelection(simpleCollection,[],"id"),getRowState=item=>1===item.id?{disabled:!0}:{};return(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with selection disabled items"}),(0,jsx_runtime.jsxs)("p",{children:["You can pass ",(0,jsx_runtime.jsx)("b",{children:"getRowState"})," for disable a certain row. ",(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)("b",{children:"isToggleAllDisabled"}),' is used for disable "Select all" checkbox']}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,children:(0,jsx_runtime.jsx)(CustomList,{isSelected,onToggleAll,selectionToggle:(_,group)=>onToggleItem(group),getRowState,isToggleAllDisabled:items=>{for(let i=0;i<items.length;i++)if(getRowState(items[i]).disabled)return!0;return!1}})})})]})},SelectableItemsActionBar=()=>{const{isSelected,onToggleAll,onToggleItem}=List.hooks.useCollectionSelection(simpleCollection,[1,2],"id");return(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with selectable items + an ActionBar"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <ActionBar\n            selected={2}\n            multiSelectActions={{...}}\n        />\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsx)(List.Toolbar,{children:(0,jsx_runtime.jsx)(ActionBar.A,{selected:2,multiSelectActions:{left:[{id:"remove-items",icon:"talend-trash",label:"Delete"}]}})}),(0,jsx_runtime.jsx)(CustomList,{isSelected,onToggleAll,selectionToggle:(_,group)=>onToggleItem(group)})]})})]})},SelectableItemsTotalItems=()=>{const{isSelected,onToggleAll,onToggleItem}=List.hooks.useCollectionSelection(simpleCollection,[1,2],"id");return(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with selectable items + total number of items"}),(0,jsx_runtime.jsx)("p",{children:"The number of selected items is available in the right toolbar"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <ActionBar\n            selected={2}\n            hideCount\t\t<== the number of selected items must be hidden in the ActionBar\n            multiSelectActions={{...}}\n        />\n        <List.Toolbar.Right>\n            <List.ItemsNumber totalItems="100" selected="2" label="100 users" labelSelected="2/100 users" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsxs)(List.Manager,{id:"my-list",collection:simpleCollection,children:[(0,jsx_runtime.jsxs)(List.Toolbar,{children:[(0,jsx_runtime.jsx)(ActionBar.A,{selected:2,hideCount:!0,multiSelectActions:{left:[{id:"remove-items",icon:"talend-trash",label:"Delete"}]}}),(0,jsx_runtime.jsx)(List.Toolbar.Right,{children:(0,jsx_runtime.jsx)(List.ItemsNumber,{totalItems:simpleCollection.length,selected:2,label:`${simpleCollection.length} users`,labelSelected:`2/${simpleCollection.length} users`})})]}),(0,jsx_runtime.jsx)(CustomList,{isSelected,onToggleAll,selectionToggle:(_,group)=>onToggleItem(group)})]})})]})},TableWithColumnChooser=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with Column chooser in header"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.VList id="my-vlist" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,children:(0,jsx_runtime.jsx)(CustomList,{columnChooser:!0})})})]}),TableWithColumnChooserAndInitialVisibleColumns=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with Column chooser in header with initialized visible columns"}),(0,jsx_runtime.jsx)("pre",{children:"<List.Manager\n    id=\"my-list\"\n    collection={collection}\n    initialVisibleColumns={['id', 'name', 'quality']}\n>\n    <List.VList id=\"my-vlist\" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n"}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,initialVisibleColumns:["id","name","quality"],children:(0,jsx_runtime.jsx)(CustomList,{columnChooser:!0})})})]}),TableWithColumnChooserAndLockedColumns=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with Column chooser in header and locked columns"}),(0,jsx_runtime.jsx)("p",{children:"You can pass any column chooser properties from VList columnChooser property"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.VList id="my-vlist" columnChooser={{ nbLockedLeftItems: 2 }}>\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,children:(0,jsx_runtime.jsx)(CustomList,{columnChooser:{nbLockedLeftItems:2}})})})]}),TableWithColumnChooserPersisted=()=>(0,jsx_runtime.jsxs)("div",{className:"virtualized-list",children:[(0,jsx_runtime.jsx)("h1",{children:"List with Column chooser and persisted visibility in local storage"}),(0,jsx_runtime.jsx)("p",{children:"You only have to provide the storage key to List manager to enable persistance"}),(0,jsx_runtime.jsx)("pre",{children:'<List.Manager\n    id="my-list"\n    collection={collection}\n    columnsVisibilityStorageKey="my-list-column-visibility"\n>\n    <List.VList id="my-vlist" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n'}),(0,jsx_runtime.jsx)("section",{style:{height:"50vh"},children:(0,jsx_runtime.jsx)(List.Manager,{id:"my-list",collection:simpleCollection,columnsVisibilityStorageKey:"my-list-column-visibility",children:(0,jsx_runtime.jsx)(CustomList,{columnChooser:!0})})})]});Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>Default list</h1>\n        <p>By default List doesn\'t come with any feature</p>\n        <pre>\n            {`\n<List.Manager id="my-list" collection={simpleCollection}>\n    <List.VList id="my-vlist">\n        <List.VList.Text label="Id" dataKey="id" />\n        <List.VList.Title\n            label="Name"\n            dataKey="name"\n            columnData={titleProps}\n            {...CellTitle}\n        />\n        ...\n        <List.VList.Datetime label="Modified" dataKey="modified" />\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>',...Default.parameters?.docs?.source}}},DisplayModeUncontrolled.parameters={...DisplayModeUncontrolled.parameters,docs:{...DisplayModeUncontrolled.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>List with display mode change</h1>\n        <p>You can change display mode by adding the selector in toolbar</p>\n        <pre>\n            {`\n<List.Manager id="my-list" collection={collection} initialDisplayMode="table">\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.DisplayMode id="my-list-displayMode" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.DisplayMode id="my-list-displayMode" />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>',...DisplayModeUncontrolled.parameters?.docs?.source}}},DisplayModeControlled.parameters={...DisplayModeControlled.parameters,docs:{...DisplayModeControlled.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>List with display mode change</h1>\n        <p>\n            You can control the display mode by\n            <br />\n            - passing the display mode to List.DisplayMode and List.VList\n            <br />- handling the display mode change via List.DisplayMode onChange prop\n        </p>\n        <pre>\n            {`\n<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.DisplayMode\n                id="my-list-displayMode"\n                selectedDisplayMode="table"\n                onChange={(event, displayMode) => changeDisplayMode(displayMode)}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.DisplayMode id="my-list-displayMode" onChange={action(\'onDisplayModeChange\')} selectedDisplayMode="table" />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList type="TABLE" />\n            </List.Manager>\n        </section>\n    </div>',...DisplayModeControlled.parameters?.docs?.source}}},TotalItems.parameters={...TotalItems.parameters,docs:{...TotalItems.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>Total items</h1>\n        <p>You can show the total number of elements in the list by adding the ItemsNumber component</p>\n        <pre>\n            {`<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.ItemsNumber totalItems="100" label="100 users" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.ItemsNumber totalItems={simpleCollection.length} label={`${simpleCollection.length} users`} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList type="TABLE" />\n            </List.Manager>\n        </section>\n    </div>',...TotalItems.parameters?.docs?.source}}},TextFilterUncontrolled.parameters={...TextFilterUncontrolled.parameters,docs:{...TextFilterUncontrolled.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>Text Filter</h1>\n        <p>You can filter the dataset with the text by adding the component and let it work itself</p>\n        <p>\n            You can manually restrict the filter scope to specific columns, by passing the dataKey, here\n            it equals to <code>name</code> and <code>description</code>, but it's optional.\n        </p>\n        <p>Note that the Column Chooser will impact the results, we can filter only on what we see!</p>\n        <pre>\n            {`<List.Manager\n    id=\"my-list\"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.TextFilter id=\"my-list-textFilter\" applyOn={['name', 'description']} />\n            <List.ColumnChooser />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\" type=\"TABLE\">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager id=\"my-list\" collection={simpleCollection} initialVisibleColumns={['id', 'name']}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.TextFilter id=\"my-list-textFilter\" applyOn={['name', 'description']} />\n                        <List.ColumnChooser onSubmit={action('onSubmit')} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList type=\"TABLE\" />\n            </List.Manager>\n        </section>\n    </div>",...TextFilterUncontrolled.parameters?.docs?.source}}},TextFilterControlled.parameters={...TextFilterControlled.parameters,docs:{...TextFilterControlled.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>Text Filter</h1>\n        <p>\n            You can control the filter feature by providing callbacks to\n            <br />\n            - handle the text filter value change and filter data\n            <br />- handle the text filter\'s docked status\n        </p>\n        <pre>\n            {`<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.TextFilter id="my-list-textFilter" docked={false} onChange={action(\'onChange\')} onToggle={action(\'onToggle\')} />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.TextFilter id="my-list-textFilter" docked={false} onChange={action(\'onChange\')} onToggle={action(\'onToggle\')} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList type="TABLE" />\n            </List.Manager>\n        </section>\n    </div>',...TextFilterControlled.parameters?.docs?.source}}},SortByUncontrolled.parameters={...SortByUncontrolled.parameters,docs:{...SortByUncontrolled.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with sorting feature</h1>\n        <p>You can change the sorting criteria by adding the component in the toolbar</p>\n        <pre>\n            {`\n<List.Manager id=\"my-list\" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.SortBy\n            id=\"my-list-sortBy\"\n            options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n            initialValue={{ sortBy: 'id', isDescending: true }}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager collection={simpleCollection} id=\"my-list\" initialSortParams={{\n      sortBy: 'id',\n      isDescending: true\n    }}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.SortBy id=\"my-list-sortBy\" options={[{\n            key: 'id',\n            label: 'Id'\n          }, {\n            key: 'name',\n            label: 'Name'\n          }]} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>",...SortByUncontrolled.parameters?.docs?.source}}},SortByUncontrolledInLargeMode.parameters={...SortByUncontrolledInLargeMode.parameters,docs:{...SortByUncontrolledInLargeMode.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with sorting feature</h1>\n        <p>You can change the sorting criteria by adding the component in the toolbar</p>\n        <pre>\n            {`\n                <List.Manager id=\"my-list\" collection={simpleCollection}>\n                    <List.Toolbar>\n                        <List.SortBy\n                        id=\"my-list-sortBy\"\n                        options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n                        initialValue={{ sortBy: 'id', isDescending: true }}\n                        />\n                        <List.DisplayMode id=\"my-list-displayMode\" initialDisplayMode=\"large\" />\n                    </List.Toolbar>\n                    <List.VList id=\"my-vlist\">\n                        ...\n                    </List.VList>\n                </List.Manager>\n        `}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager collection={simpleCollection} id=\"my-list\" initialSortParams={{\n      sortBy: 'id',\n      isDescending: true\n    }}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.SortBy id=\"my-list-sortBy\" options={[{\n            key: 'id',\n            label: 'Id'\n          }, {\n            key: 'name',\n            label: 'Name'\n          }]} />\n                        <List.DisplayMode id=\"my-list-displayMode\" initialDisplayMode=\"large\" />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>",...SortByUncontrolledInLargeMode.parameters?.docs?.source}}},SortByControlled.parameters={...SortByControlled.parameters,docs:{...SortByControlled.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with sorting feature</h1>\n        <p>\n            You can control the sorting feature by providing both onChange and onOrderChange props\n            (functions) to the SortBy component.\n        </p>\n        <pre>\n            {`\n<List.Manager id=\"my-list\" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.SortBy\n            id=\"my-list-sortBy\"\n            options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n            onChange={action('onSortChange')}\n            value={{ sortBy: 'name', isDescending: false }}\n        />\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager id=\"my-list\" collection={simpleCollection}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.SortBy id=\"my-list-sortBy\" options={[{\n            key: 'name',\n            label: 'Name'\n          }, {\n            key: 'id',\n            label: 'Id'\n          }]} value={{\n            sortBy: 'name',\n            isDescending: false\n          }} onChange={action('onSortChange')} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>",...SortByControlled.parameters?.docs?.source}}},SortByAndResizableColumnUncontrolled.parameters={...SortByAndResizableColumnUncontrolled.parameters,docs:{...SortByAndResizableColumnUncontrolled.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with sorting feature and resizing column</h1>\n        <p>You can change the sorting criteria by adding the component in the toolbar</p>\n        <p>\n            You can add the resizing column by adding the properties resizable, a width and use the\n            headerRenderer \"'resizable'\" (note: the last column don't need to have the headerRenderer)\n        </p>\n        <pre>\n            {`\n<List.Manager id=\"my-list\" collection={simpleCollection}>\n    <List.Toolbar>\n        <List.Toolbar.Right>\n            <List.SortBy\n            id=\"my-list-sortBy\"\n            options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n            initialValue={{ sortBy: 'id', isDescending: true }}\n            />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\">\n        <List.VList.Text\n            label=\"Id\"\n            dataKey=\"id\"\n            resizable\n            width={400}\n            headerRenderer={List.VList.headerDictionary['resizable']}\n        />\n        <List.VList.Title\n            label=\"Name\"\n            dataKey=\"name\"\n            columnData={titleProps}\n            resizable\n            width={400}\n            headerRenderer={List.VList.headerDictionary['resizable']}\n        />\n        <List.VList.Badge\n            label=\"Tag\"\n            dataKey=\"tag\"\n            columnData={{ selected: true }}\n            disableSort\n            resizable\n            width={400}\n        />\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager collection={simpleCollection} id=\"my-list\" initialSortParams={{\n      sortBy: 'id',\n      isDescending: true\n    }}>\n                <List.Toolbar>\n                    <List.Toolbar.Right>\n                        <List.SortBy id=\"my-list-sortBy\" options={[{\n            key: 'id',\n            label: 'Id'\n          }, {\n            key: 'name',\n            label: 'Name'\n          }]} />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomListResizable />\n            </List.Manager>\n        </section>\n    </div>",...SortByAndResizableColumnUncontrolled.parameters?.docs?.source}}},LotsOfActionsLayoutRenderUncontrolled.parameters={...LotsOfActionsLayoutRenderUncontrolled.parameters,docs:{...LotsOfActionsLayoutRenderUncontrolled.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with multiple right actions</h1>\n        <p>\n            With multiple actions the Right component will align the actions to the right, and add a\n            separator between each.\n        </p>\n        <pre>\n            {`\n                            <List.Manager id=\"my-list\" collection={simpleCollection}>\n                            <List.Toolbar>\n                                <List.Toolbar.Right>\n                                    <List.TextFilter id=\"my-list-textFilter\" />\n                                    <List.SortBy\n                                        id=\"my-list-sortBy\"\n                                        options={[{ key: 'name', label: 'Name' }, { key: 'id', label: 'Id' }]}\n                                        initialValue={{ sortBy: 'id', isDescending: true }}\n                                    />\n                                    <List.DisplayMode id=\"my-list-displayMode\" />\n                                </List.Toolbar.Right>\n                            </List.Toolbar>\n                            <CustomList />\n                        </List.Manager>\n\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager id=\"my-list\" collection={simpleCollection}>\n                <List.Toolbar>\n                    <ActionBar actions={{\n          left: [{\n            icon: 'talend-cog',\n            label: 'Foo',\n            onClick: action('foo')\n          }, {\n            icon: 'talend-cog',\n            label: 'Bar',\n            onClick: action('bar')\n          }]\n        }} />\n                    <List.Toolbar.Right>\n                        <List.TextFilter id=\"my-list-textFilter\" />\n                        <List.SortBy id=\"my-list-sortBy\" options={[{\n            key: 'name',\n            label: 'Name'\n          }, {\n            key: 'id',\n            label: 'Id'\n          }]} initialValue={{\n            sortBy: 'id',\n            isDescending: true\n          }} />\n                        <List.DisplayMode id=\"my-list-displayMode\" />\n                    </List.Toolbar.Right>\n                </List.Toolbar>\n                <CustomList />\n            </List.Manager>\n        </section>\n    </div>",...LotsOfActionsLayoutRenderUncontrolled.parameters?.docs?.source}}},LazyLoading.parameters={...LazyLoading.parameters,docs:{...LazyLoading.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List supporting Lazy Loding</h1>\n        <p>\n            The LazyLoadingList list component allows to create lists that supports lazy loading feature.\n            <br />\n            It requires :<br />- <code>loadMoreRows</code> prop triggered when data loading is required\n            <br />- <code>rowCount</code> prop representing the collection's total number of items\n            <br />\n            Skeleton rows are rendered when data is missing, while they are being fetched.\n        </p>\n        <pre>\n            {`\n<List.Manager id=\"my-list\" collection={collection}>\n    <List.LazyLoadingList id=\"my-infinite-scroll-list\" loadMoreRows={loadMoreRows} rowCount={totalRowCount}>\n        <List.VList.Text label=\"Id\" dataKey=\"id\" width={-1} />\n            ...\n    </List.LazyLoadingList>\n</List.Manager>\n`}\n        </pre>\n        <h2>Table mode</h2>\n        <section style={{\n    height: '30vh'\n  }}>\n            <List.Manager id=\"my-table-list\" collection={[simpleCollection[0]]}>\n                <CustomListLazyLoading type=\"TABLE\" loadMoreRows={action('onLoadMoreRows')} rowCount={simpleCollection.length} onRowsRendered={action('onRowsRendered')} />\n            </List.Manager>\n        </section>\n\n        <h2>Large mode</h2>\n        <section style={{\n    height: '30vh'\n  }}>\n            <List.Manager id=\"my-large-list\" collection={[simpleCollection[0]]}>\n                <CustomListLazyLoading type=\"LARGE\" loadMoreRows={action('onLoadMoreRows')} rowCount={simpleCollection.length} />\n            </List.Manager>\n        </section>\n\n        <h2>Collapsible panel mode</h2>\n        <section style={{\n    height: '30vh'\n  }}>\n            <List.Manager id=\"my-collapsible-panels-list\" collection={[{\n      id: 'status-header',\n      header: [{\n        displayMode: 'status',\n        actions: [],\n        status: 'successful',\n        label: 'Successful',\n        icon: 'talend-check'\n      }],\n      content: [{\n        label: 'Content1',\n        description: 'Description1'\n      }, {\n        label: 'Content2',\n        description: 'Description2'\n      }],\n      expanded: true,\n      children: <div>HELLO WORLD</div>\n    }]}>\n                <CustomListLazyLoading type=\"COLLAPSIBLE_PANEL\" loadMoreRows={action('onLoadMoreRows')} rowCount={50} />\n            </List.Manager>\n        </section>\n    </div>",...LazyLoading.parameters?.docs?.source}}},SelectableItems.parameters={...SelectableItems.parameters,docs:{...SelectableItems.parameters?.docs,source:{originalSource:"() => {\n  const {\n    isSelected,\n    onToggleAll,\n    onToggleItem\n  } = List.hooks.useCollectionSelection(simpleCollection, [], 'id');\n  return <div className=\"virtualized-list\">\n            <h1>List with selectable items</h1>\n            <p>The list also supports items selection, when using the proper hook.</p>\n\n            <section style={{\n      height: '50vh'\n    }}>\n                <List.Manager id=\"my-list\" collection={simpleCollection}>\n                    <CustomList isSelected={isSelected} onToggleAll={onToggleAll} selectionToggle={(_, group) => onToggleItem(group)} />\n                </List.Manager>\n            </section>\n        </div>;\n}",...SelectableItems.parameters?.docs?.source}}},SelectableItemsWithDisabledItems.parameters={...SelectableItemsWithDisabledItems.parameters,docs:{...SelectableItemsWithDisabledItems.parameters?.docs,source:{originalSource:'() => {\n  const {\n    isSelected,\n    onToggleAll,\n    onToggleItem\n  } = List.hooks.useCollectionSelection(simpleCollection, [], \'id\');\n  const getRowState = item => item.id === 1 ? {\n    disabled: true\n  } : {};\n  const isToggleAllDisabled = items => {\n    for (let i = 0; i < items.length; i++) {\n      if (getRowState(items[i]).disabled) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return <div className="virtualized-list">\n            <h1>List with selection disabled items</h1>\n            <p>\n                You can pass <b>getRowState</b> for disable a certain row. <br />\n                <b>isToggleAllDisabled</b> is used for disable "Select all" checkbox\n            </p>\n\n            <section style={{\n      height: \'50vh\'\n    }}>\n                <List.Manager id="my-list" collection={simpleCollection}>\n                    <CustomList isSelected={isSelected} onToggleAll={onToggleAll} selectionToggle={(_, group) => onToggleItem(group)} getRowState={getRowState} isToggleAllDisabled={isToggleAllDisabled} />\n                </List.Manager>\n            </section>\n        </div>;\n}',...SelectableItemsWithDisabledItems.parameters?.docs?.source}}},SelectableItemsActionBar.parameters={...SelectableItemsActionBar.parameters,docs:{...SelectableItemsActionBar.parameters?.docs,source:{originalSource:"() => {\n  const {\n    isSelected,\n    onToggleAll,\n    onToggleItem\n  } = List.hooks.useCollectionSelection(simpleCollection, [1, 2], 'id');\n  return <div className=\"virtualized-list\">\n            <h1>List with selectable items + an ActionBar</h1>\n            <pre>\n                {`<List.Manager\n    id=\"my-list\"\n    collection={collection}\n>\n    <List.Toolbar>\n        <ActionBar\n            selected={2}\n            multiSelectActions={{...}}\n        />\n    </List.Toolbar>\n    <List.VList id=\"my-vlist\" type=\"TABLE\">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n            </pre>\n            <section style={{\n      height: '50vh'\n    }}>\n                <List.Manager id=\"my-list\" collection={simpleCollection}>\n                    <List.Toolbar>\n                        <ActionBar selected={2} multiSelectActions={{\n            left: [{\n              id: 'remove-items',\n              icon: 'talend-trash',\n              label: 'Delete'\n            }]\n          }} />\n                    </List.Toolbar>\n                    <CustomList isSelected={isSelected} onToggleAll={onToggleAll} selectionToggle={(_, group) => onToggleItem(group)} />\n                </List.Manager>\n            </section>\n        </div>;\n}",...SelectableItemsActionBar.parameters?.docs?.source}}},SelectableItemsTotalItems.parameters={...SelectableItemsTotalItems.parameters,docs:{...SelectableItemsTotalItems.parameters?.docs,source:{originalSource:'() => {\n  const {\n    isSelected,\n    onToggleAll,\n    onToggleItem\n  } = List.hooks.useCollectionSelection(simpleCollection, [1, 2], \'id\');\n  return <div className="virtualized-list">\n            <h1>List with selectable items + total number of items</h1>\n            <p>The number of selected items is available in the right toolbar</p>\n            <pre>\n                {`<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.Toolbar>\n        <ActionBar\n            selected={2}\n            hideCount\t\t<== the number of selected items must be hidden in the ActionBar\n            multiSelectActions={{...}}\n        />\n        <List.Toolbar.Right>\n            <List.ItemsNumber totalItems="100" selected="2" label="100 users" labelSelected="2/100 users" />\n        </List.Toolbar.Right>\n    </List.Toolbar>\n    <List.VList id="my-vlist" type="TABLE">\n        ...\n    </List.VList>\n</List.Manager>\n`}\n            </pre>\n            <section style={{\n      height: \'50vh\'\n    }}>\n                <List.Manager id="my-list" collection={simpleCollection}>\n                    <List.Toolbar>\n                        <ActionBar selected={2} hideCount multiSelectActions={{\n            left: [{\n              id: \'remove-items\',\n              icon: \'talend-trash\',\n              label: \'Delete\'\n            }]\n          }} />\n                        <List.Toolbar.Right>\n                            <List.ItemsNumber totalItems={simpleCollection.length} selected={2} label={`${simpleCollection.length} users`} labelSelected={`2/${simpleCollection.length} users`} />\n                        </List.Toolbar.Right>\n                    </List.Toolbar>\n                    <CustomList isSelected={isSelected} onToggleAll={onToggleAll} selectionToggle={(_, group) => onToggleItem(group)} />\n                </List.Manager>\n            </section>\n        </div>;\n}',...SelectableItemsTotalItems.parameters?.docs?.source}}},TableWithColumnChooser.parameters={...TableWithColumnChooser.parameters,docs:{...TableWithColumnChooser.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>List with Column chooser in header</h1>\n        <pre>\n            {`<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.VList id="my-vlist" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <CustomList columnChooser />\n            </List.Manager>\n        </section>\n    </div>',...TableWithColumnChooser.parameters?.docs?.source}}},TableWithColumnChooserAndInitialVisibleColumns.parameters={...TableWithColumnChooserAndInitialVisibleColumns.parameters,docs:{...TableWithColumnChooserAndInitialVisibleColumns.parameters?.docs,source:{originalSource:"() => <div className=\"virtualized-list\">\n        <h1>List with Column chooser in header with initialized visible columns</h1>\n        <pre>\n            {`<List.Manager\n    id=\"my-list\"\n    collection={collection}\n    initialVisibleColumns={['id', 'name', 'quality']}\n>\n    <List.VList id=\"my-vlist\" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: '50vh'\n  }}>\n            <List.Manager id=\"my-list\" collection={simpleCollection} initialVisibleColumns={['id', 'name', 'quality']}>\n                <CustomList columnChooser />\n            </List.Manager>\n        </section>\n    </div>",...TableWithColumnChooserAndInitialVisibleColumns.parameters?.docs?.source}}},TableWithColumnChooserAndLockedColumns.parameters={...TableWithColumnChooserAndLockedColumns.parameters,docs:{...TableWithColumnChooserAndLockedColumns.parameters?.docs,source:{originalSource:'() => <div className="virtualized-list">\n        <h1>List with Column chooser in header and locked columns</h1>\n        <p>You can pass any column chooser properties from VList columnChooser property</p>\n        <pre>\n            {`<List.Manager\n    id="my-list"\n    collection={collection}\n>\n    <List.VList id="my-vlist" columnChooser={{ nbLockedLeftItems: 2 }}>\n        ...\n    </List.VList>\n</List.Manager>\n`}\n        </pre>\n        <section style={{\n    height: \'50vh\'\n  }}>\n            <List.Manager id="my-list" collection={simpleCollection}>\n                <CustomList columnChooser={{\n        nbLockedLeftItems: 2\n      }} />\n            </List.Manager>\n        </section>\n    </div>',...TableWithColumnChooserAndLockedColumns.parameters?.docs?.source}}},TableWithColumnChooserPersisted.parameters={...TableWithColumnChooserPersisted.parameters,docs:{...TableWithColumnChooserPersisted.parameters?.docs,source:{originalSource:'() => {\n  return <div className="virtualized-list">\n            <h1>List with Column chooser and persisted visibility in local storage</h1>\n            <p>You only have to provide the storage key to List manager to enable persistance</p>\n            <pre>\n                {`<List.Manager\n    id="my-list"\n    collection={collection}\n    columnsVisibilityStorageKey="my-list-column-visibility"\n>\n    <List.VList id="my-vlist" columnChooser>\n        ...\n    </List.VList>\n</List.Manager>\n`}\n            </pre>\n            <section style={{\n      height: \'50vh\'\n    }}>\n                <List.Manager id="my-list" collection={simpleCollection} columnsVisibilityStorageKey="my-list-column-visibility">\n                    <CustomList columnChooser />\n                </List.Manager>\n            </section>\n        </div>;\n}',...TableWithColumnChooserPersisted.parameters?.docs?.source}}};const __namedExportsOrder=["Default","DisplayModeUncontrolled","DisplayModeControlled","TotalItems","TextFilterUncontrolled","TextFilterControlled","SortByUncontrolled","SortByUncontrolledInLargeMode","SortByControlled","SortByAndResizableColumnUncontrolled","LotsOfActionsLayoutRenderUncontrolled","LazyLoading","SelectableItems","SelectableItemsWithDisabledItems","SelectableItemsActionBar","SelectableItemsTotalItems","TableWithColumnChooser","TableWithColumnChooserAndInitialVisibleColumns","TableWithColumnChooserAndLockedColumns","TableWithColumnChooserPersisted"]}}]);