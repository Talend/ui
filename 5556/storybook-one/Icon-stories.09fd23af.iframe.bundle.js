"use strict";(self.webpackChunk_talend_ui_storybook_one=self.webpackChunk_talend_ui_storybook_one||[]).push([[2096],{"../icons/stories/Icon.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{All:()=>All,Usage:()=>Usage,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Icon_stories});var info=__webpack_require__("../icons/dist/info.js"),react=__webpack_require__("../../node_modules/react/index.js"),lib_esm=__webpack_require__("../design-tokens/lib-esm/index.js");var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");lib_esm.A.coralColorNeutralIcon,lib_esm.A.coralColorAccentIcon,lib_esm.A.coralColorWarningIcon,lib_esm.A.coralColorDangerIcon,lib_esm.A.coralColorBetaIcon;const iconSizes={XS:8,S:12,M:16,L:24},getRealSize=size=>iconSizes[size],LegacyIconContext=([...Array.from(new Set(Object.values(info.rG)))].sort((a,b)=>getRealSize(b)-getRealSize(a)),[...Array.from(new Set(Object.keys(info.rG).map(icon=>icon.split(":")[0])))].sort(),(0,react.createContext)({size:"",setSize:value=>{},filter:"",setFilter:value=>{}})),IconContext=(0,react.createContext)({color:"",setColor:value=>{}}),Icon=({name,size})=>{const iconContext=(0,react.useContext)(IconContext),legacyIconContext=(0,react.useContext)(LegacyIconContext),style={display:"flex",alignItems:"center",justifyContent:"center",color:"initial"},styleWithSize={width:"auto",height:"auto"};let className="";if(iconContext.color&&(style.color=iconContext.color),legacyIconContext.size){const{size}=legacyIconContext;styleWithSize.width=size,styleWithSize.height=size}if(legacyIconContext.filter&&(className=legacyIconContext.filter),size){const realSize=getRealSize(size).toString();styleWithSize.width=realSize,styleWithSize.height=realSize}if(!name)return null;const fullName=size?name.split(":")[0]+":"+size:name;return(0,jsx_runtime.jsx)("div",{className,style,children:(0,jsx_runtime.jsx)("svg",{style:styleWithSize,shapeRendering:"geometricPrecision",children:(0,jsx_runtime.jsx)("use",{xlinkHref:"#"+fullName})})})},StyleIcon=()=>(0,jsx_runtime.jsx)("style",{children:"\n\t\t\tsvg {\n\t\t\t\tmax-width: 1.5rem;\n\t\t\t\tmax-height: 1.5rem;\n\t\t\t}\n\t\t\tsvg path {\n\t\t\t\tshape-rendering: geometricPrecision;\n\t\t\t}\n\t\t\t.colormapping > svg {\n\t\t\t\tfilter: url(#colormapping);\n\t\t\t}\n\t\t\t.grayscale > svg {\n\t\t\t\tfilter: url(#talend-grayscale);\n\t\t\t}\n\t\t\t.colormapping:hover > svg,\n\t\t\t.grayscale:hover > svg {\n\t\t\t\tfilter: none;\n\t\t\t}\n\t\t"});Icon.displayName="Icon";const stories_Icon=Icon,Icon_stories={title:"Icons/Icon",component:stories_Icon},Usage={args:{name:"talend-box"},argTypes:{name:{options:Object.keys(info.pq),control:{type:"select"}}}},All=props=>{const names=Object.keys(info.pq);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(StyleIcon,{}),(0,jsx_runtime.jsx)("div",{style:{display:"flex",flexWrap:"wrap"},children:names.map(name=>(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",margin:"0.625rem"},children:[(0,jsx_runtime.jsx)(stories_Icon,{name}),(0,jsx_runtime.jsx)("span",{style:{fontSize:"1.25rem"},children:name})]},name))})]})};Usage.parameters={...Usage.parameters,docs:{...Usage.parameters?.docs,source:{originalSource:"{\n  args: {\n    name: 'talend-box'\n  },\n  argTypes: {\n    name: {\n      options: Object.keys(icons),\n      control: {\n        type: 'select'\n      }\n    }\n  }\n}",...Usage.parameters?.docs?.source}}},All.parameters={...All.parameters,docs:{...All.parameters?.docs,source:{originalSource:"props => {\n  const names = Object.keys(icons);\n  return <div>\n            <StyleIcon />\n            <div style={{\n      display: 'flex',\n      flexWrap: 'wrap'\n    }}>\n                {names.map(name => <div key={name} style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        margin: '0.625rem'\n      }}>\n                        <Icon name={name} />\n                        <span style={{\n          fontSize: '1.25rem'\n        }}>{name}</span>\n                    </div>)}\n            </div>\n        </div>;\n}",...All.parameters?.docs?.source}}};const __namedExportsOrder=["Usage","All"]}}]);