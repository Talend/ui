(self.webpackChunk_talend_ui_storybook_one=self.webpackChunk_talend_ui_storybook_one||[]).push([[5251],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{XI:()=>action});var v4=__webpack_require__("../../node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),preview_errors=__webpack_require__("../../node_modules/@storybook/core-events/dist/errors/preview-errors.mjs"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find(render=>"playing"===render.phase||"rendering"===render.phase);if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new preview_errors._U({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler}},"../faceted-search/stories/facetedSearch.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Advanced:()=>Advanced,BasicSearchInABadgeWithALotOfValues:()=>BasicSearchInABadgeWithALotOfValues,BasicSearchWithAnEmptyLabelBadge:()=>BasicSearchWithAnEmptyLabelBadge,BasicSearchWithBadgeWithAllSelector:()=>BasicSearchWithBadgeWithAllSelector,BasicSearchWithBadgeWithVeryLongName:()=>BasicSearchWithBadgeWithVeryLongName,BasicSearchWithBadgesCategories:()=>BasicSearchWithBadgesCategories,BasicSearchWithLotOfBadgeDefinitions:()=>BasicSearchWithLotOfBadgeDefinitions,BasicSearchWithSliderPopin:()=>BasicSearchWithSliderPopin,Colored:()=>Colored,DatePicker:()=>DatePicker,Default:()=>Default,Initialized:()=>Initialized,InitializedWithABadgeWhichIsNotVisibleInTheList:()=>InitializedWithABadgeWhichIsNotVisibleInTheList,ReadOnly:()=>ReadOnly,WithExternalState:()=>WithExternalState,WithQuickSearchAsynchronousSuggestions:()=>WithQuickSearchAsynchronousSuggestions,WithQuickSearchFilter:()=>WithQuickSearchFilter,WithQuickSearchFilterCustomizableInputTriggerLength:()=>WithQuickSearchFilterCustomizableInputTriggerLength,WithSpecialChars:()=>WithSpecialChars,WithoutLabelOrOperatorButton:()=>WithoutLabelOrOperatorButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>facetedSearch_stories});var react=__webpack_require__("../../node_modules/react/index.js"),es=__webpack_require__("../../node_modules/react-i18next/dist/es/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),testing_library_dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),src=__webpack_require__("../faceted-search/src/index.js"),BadgesGenerator=__webpack_require__("../faceted-search/src/components/BadgesGenerator/index.js"),badgeFaceted_context=__webpack_require__("../faceted-search/src/components/context/badgeFaceted.context.js"),badge_dictionary=__webpack_require__("../faceted-search/src/dictionary/badge.dictionary.js");const badgeName={properties:{attribute:"name",initialOperatorOpened:!0,initialValueOpened:!1,label:"Name",operator:{},operators:[],type:"text",placeholder:"Enter a dataset name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-name"}},badgeConnectionName={properties:{attribute:"connectionName",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection name",operator:{},operators:[],type:"text",placeholder:"Enter a connection name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-connection-name"}},badgeAuthor={properties:{attribute:"Author",initialOperatorOpened:!0,initialValueOpened:!1,label:"Author",operator:{},operators:[],type:"text",placeholder:"Enter an author name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-author"}},badgeConnectionType={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in","notIn"],"data-feature":"faceted-badge-connection-type"}},badgeConnectionTypeAllSelector={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in","notIn"],allSelector:!0}},badgePrice={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"Price",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"],"data-feature":"faceted-badge-price"}},badgeValid={properties:{attribute:"valid",initialOperatorOpened:!0,initialValueOpened:!1,label:"Valid",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"valid"},unit:"%",defaultValue:50},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},badgeTags={properties:{attribute:"tags",initialOperatorOpened:!0,initialValueOpened:!1,label:"Tags",operator:{},operators:[],type:"checkbox"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",operators:["in","notIn"],"data-feature":"faceted-badge-tags"}},badgeWithVeryLongName={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"helloverybeautifullworldhowareyouinthislovelydaythesunishiningandtheskyisbright?",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"]}},badgeEnumWithLotOfValues={properties:{attribute:"connection.type",initialOperatorOpened:!0,initialValueOpened:!1,label:"Connection type",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a connection type"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"},{id:"amazon_s3_low",label:"Amazon S3 Low"},{id:"hdfs_low",label:"HDFS Low"},{id:"kafka_low",label:"Kafka Low"},{id:"localcon_low",label:"Local connection Low"},{id:"salesforce_low",label:"Salesforce Low"},{id:"aws_kinesis_low",label:"AWS kinesis Low"},{id:"amazon_s3_high",label:"Amazon S3 High"},{id:"hdfs_high",label:"HDFS High"},{id:"kafka_high",label:"Kafka High"},{id:"localcon_high",label:"Local connection High"},{id:"salesforce_high",label:"Salesforce High"},{id:"aws_kinesis_high",label:"AWS kinesis High"},{id:"amazon_s3_classic",label:"Amazon S3 Classic"},{id:"hdfs_classic",label:"HDFS Classic"},{id:"kafka_classic",label:"Kafka Classic"},{id:"localcon_classic",label:"Local connection Classic"},{id:"salesforce_classic",label:"Salesforce Classic"},{id:"aws_kinesis_classic",label:"AWS kinesis Classic"}],operators:["in","notIn"]}},badgeTextAsCustomAttribute={properties:{attribute:"target",initialOperatorOpened:!0,initialValueOpened:!1,label:"Target",operator:{},operators:[],type:"text",placeholder:"Enter a custom attribute"},metadata:{category:"Custom attributes",badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"]}},badgeEnumsAsCustomAttribute={properties:{attribute:"visibility",initialOperatorOpened:!0,initialValueOpened:!1,label:"Visibility",operator:{},operators:[],type:"checkbox",filterBarPlaceholder:"Find a visibility"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",category:"Custom attributes",values:[{id:"internal",label:"Internal"},{id:"public",label:"Public"}],operators:["in","notIn"]}},badgeTextAsCategory={properties:{attribute:"owner",initialOperatorOpened:!0,initialValueOpened:!1,label:"Owner",operator:{},operators:[],type:"text",placeholder:"Enter a category name"},metadata:{category:"Very long long long long long long long category",badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals"]}},badgeEmptyLabel={properties:{attribute:"title",initialOperatorOpened:!0,initialValueOpened:!1,label:"",operator:{},operators:[],type:"text"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals"]}},badgePriceAsCustomAttribute={properties:{attribute:"price",initialOperatorOpened:!0,initialValueOpened:!1,label:"Price",operator:{},operators:[],type:"number"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",category:"Custom attributes",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"]}};var lib_esm=__webpack_require__("../components/lib-esm/index.js"),lodash=__webpack_require__("../../node_modules/lodash/lodash.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const badgesDefinitions=[{properties:{attribute:"workspaceId",initialOperatorOpened:!0,initialValueOpened:!1,label:"Workspace",operator:{},operators:[],type:"menu",filterBarPlaceholder:"Find a workspace"},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"personal",label:"Personal"},{id:"shared",label:"Shared"},{id:"custom",label:"Custom"},{id:"ws1",label:"Long long workspace name can't fit in one line. Long long workspace name can't fit in one line. "},{id:"ws2",label:"Workspace 2"},{id:"ws3",label:"Workspace 3"},{id:"ws4",label:"Workspace 4"},{id:"ws5",label:"Workspace 5"},{id:"ws6",label:"Workspace 6"},{id:"ws7",label:"Workspace 7"},{id:"ws8",label:"Workspace 8"},{id:"ws9",label:"Workspace 9"},{id:"ws10",label:"Workspace Test"}],operators:["equals","notEquals"],"data-feature":"faceted-badge-workspace"}},{properties:{attribute:"all",initialOperatorOpened:!0,initialValueOpened:!1,label:"All",operator:{},operators:[],type:"text"},metadata:{isAvailableForFacetList:!1,badgePerFacet:"1",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase"],"data-feature":"faceted-badge-all"}},badgeName,badgeConnectionName,badgeAuthor,badgeConnectionType,badgeTags,badgePrice,badgeValid,{properties:{attribute:"empty",initialOperatorOpened:!0,initialValueOpened:!1,label:"Empty",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"empty"},unit:"%"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},{properties:{attribute:"invalid",initialOperatorOpened:!0,initialValueOpened:!1,label:"Invalid",operator:{},operators:[],type:"slider",icon:{name:"talend-pie-charts",class:"invalid"},unit:"%",defaultValue:50},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","greaterThan","lessThan"]}},{properties:{attribute:"creationDate",initialOperatorOpened:!0,initialValueOpened:!1,label:"Creation Date",operator:{},operators:[],type:"date"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["equals","notEquals","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals"],"data-feature":"faceted-badge-creation-date"}},{properties:{attribute:"period",initialOperatorOpened:!0,initialValueOpened:!1,label:"Period",operator:{},operators:[],type:"period"},metadata:{badgePerFacet:"N",entitiesPerBadge:"1",operators:["in"],"data-feature":"faceted-badge-period"}}],callbacks={getTags:()=>new Promise(resolve=>setTimeout(resolve,2e3,["clean","production","last chunk","salesforce","outdated","extracted","security","in processing","deep learning","sql","cluster","visualization","analytics","users","warehouse","api"]))},badgesFaceted={badges:[{properties:{attribute:"connection.type",initialOperatorOpened:!1,initialValueOpened:!1,label:"Connection Type",operator:{label:"In",name:"in"},operators:[{label:"In",name:"in"}],type:"checkbox",value:[{id:"amazon_s3",label:"Amazon S3",checked:!0},{id:"hdfs",label:"HDFS",checked:!0},{id:"localcon",label:"Local connection",checked:!0}]},metadata:{badgePerFacet:"1",entitiesPerBadge:"N",values:[{id:"amazon_s3",label:"Amazon S3"},{id:"hdfs",label:"HDFS"},{id:"kafka",label:"Kafka"},{id:"localcon",label:"Local connection"},{id:"salesforce",label:"Salesforce"},{id:"aws_kinesis",label:"AWS kinesis"}],operators:["in"],badgeId:"connection.type-9f0e5bc7-c687-4198-9635-d0fc7724dfd1",isInCreation:!1}}]},badgesWithAll={badges:[{properties:{attribute:"all",initialOperatorOpened:!1,initialValueOpened:!1,label:"All",operator:{label:"Contains",name:"containsIgnoreCase",iconName:"contains"},operators:[],type:"text",value:"test"},metadata:{isAvailableForFacetList:!1,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase"],badgeId:"all-b6c04e3d-1d72-4aca-9565-09d206f76d88",isInCreation:!1}}]},facetedSearch_stories={title:"Faceted search/Main",component:src.A.Faceted,parameters:{docs:{description:{component:"Faceted search is a technique that involves augmenting traditional search techniques with a faceted navigation system, allowing users to narrow down search results by applying multiple filters based on faceted classification of the items. The user can look for any value, even if the field is not currently visible."}}},decorators:[(Story,context)=>(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Story,{...context})})]},Default=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,callbacks,onSubmit:(0,dist.XI)("onSubmit"),quickSearchInputProps:{"data-feature":"faceted-badge-name"}})}),Advanced=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})}),Initialized=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted,onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),InitializedWithABadgeWhichIsNotVisibleInTheList=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:badgesWithAll,callbacks,onSubmit:(0,dist.XI)("onSubmit")})}),Colored=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted),"badges[0].properties.displayType",lib_esm.Ex.TYPES.VALUE),onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),WithSpecialChars=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)(),badge=(0,lodash.cloneDeep)(badgesFaceted.badges[0]);return _extends(badge.properties,{value:"  text  ",type:"text",displayType:lib_esm.Ex.TYPES.PATTERN}),(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[badge],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})},DatePicker=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)(),badge=(0,lodash.cloneDeep)(badgesFaceted.badges[0]);return _extends(badge.properties,{value:Date.now(),type:"date"}),(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[badge],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})},ReadOnly=()=>{const{t}=(0,es.Bd)(),badgesDictionary=(0,badge_dictionary.Rc)();return(0,jsx_runtime.jsx)(badgeFaceted_context.B,{value:{},children:(0,jsx_runtime.jsx)(BadgesGenerator.U,{badges:[(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted.badges[0]),"properties.readOnly",!0),(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted.badges[0]),"properties.removable",!1)],badgesDictionary,getBadgeFromDict:badge_dictionary.zW,t})})},WithExternalState=()=>{const[state,setState]=(0,react.useState)(badgesFaceted),onSubmit=(0,react.useCallback)((_,badges)=>setState(previousState=>({...previousState,badges})),[setState]);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setState(badgesFaceted),children:"Reset state"}),(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:currentFacetedMode=>currentFacetedMode===src.A.constants.FACETED_MODE.ADVANCED&&(0,jsx_runtime.jsx)(src.A.AdvancedSearch,{onSubmit:(0,dist.XI)("onSubmit")})||currentFacetedMode===src.A.constants.FACETED_MODE.BASIC&&(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:state,onSubmit,callbacks})})]})},WithoutLabelOrOperatorButton=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:(0,lodash.set)((0,lodash.cloneDeep)(badgesFaceted),"badges[0].properties.label",""),onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),lotsOfBadgesDefinitions=Array(50).fill(badgeName),BasicSearchWithLotOfBadgeDefinitions={render:()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:lotsOfBadgesDefinitions,onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),play:async({canvasElement})=>{await testing_library_dist.Q4.type((0,testing_library_dist.ux)(canvasElement).getByRole("searchbox"),"lorem ipsum")}},BasicSearchWithBadgeWithVeryLongName={render:()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeWithVeryLongName,badgeConnectionType,badgeName,badgePrice],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),play:async({canvasElement})=>{await testing_library_dist.Q4.type((0,testing_library_dist.ux)(canvasElement).getByRole("searchbox"),"lorem ipsum")}},BasicSearchWithBadgeWithAllSelector=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeConnectionTypeAllSelector],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),BasicSearchInABadgeWithALotOfValues=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeEnumWithLotOfValues],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),BasicSearchWithBadgesCategories=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeConnectionType,badgeName,badgePrice,badgeTags,badgeTextAsCustomAttribute,badgePriceAsCustomAttribute,badgeEnumsAsCustomAttribute,...(0,lodash.times)(2,()=>badgeTextAsCategory)],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),BasicSearchWithAnEmptyLabelBadge=()=>(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[badgeName,badgeEmptyLabel],onSubmit:(0,dist.XI)("onSubmit"),callbacks})}),BasicSearchWithSliderPopin={render:({decimal,withIcon})=>{const overritenProperties={initialOperatorOpened:!1,initialValueOpened:!0,step:decimal?.01:1,decimal:!0,operator:{label:"Less than",name:"LessThan",iconName:"less-than"},icon:withIcon?badgeValid.properties.icon:void 0,operators:[{label:"Less than",name:"LessThan",iconName:"less-than"},{label:"Less than or equal",name:"LessThanOrEquals",iconName:"less-than-equal"}]},badgeFacetedCustom={badges:[{...badgeValid,properties:{...badgeValid.properties,...overritenProperties}}]};return(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,badgesFaceted:badgeFacetedCustom,callbacks,onSubmit:(0,dist.XI)("onSubmit")})})},args:{decimal:!0,withIcon:!0}},WithQuickSearchFilter=()=>(0,jsx_runtime.jsxs)(src.A.Faceted,{id:"my-faceted-search",children:[(0,jsx_runtime.jsx)("p",{children:"Quick search will only suggest facets matching input (Connection name, Author)"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(src.A.BasicSearch,{quickSearchFacetsFilter:(term,facets)=>facets.filter(facet=>facet.properties.label.includes(term)),badgesDefinitions:[badgeAuthor,badgeName,badgeConnectionName],onSubmit:(0,dist.XI)("onSubmit"),callbacks})]}),WithQuickSearchFilterCustomizableInputTriggerLength=()=>(0,jsx_runtime.jsxs)(src.A.Faceted,{id:"my-faceted-search",children:[(0,jsx_runtime.jsx)("p",{children:"Quick search will trigger after a minimum input length that can be customized based on badge definition"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions:[{properties:{attribute:"name",initialOperatorOpened:!0,initialValueOpened:!1,label:"Name",operator:{},operators:[],type:"text",placeholder:"Enter a dataset name"},metadata:{isAvailableForQuickSearch:!0,isAvailableForFacetList:!0,badgePerFacet:"N",entitiesPerBadge:"1",operators:["containsIgnoreCase","notContainsIgnoreCase","equals","notEquals","match a regexp"],"data-feature":"faceted-badge-name",minLength:5}}],callbacks,onSubmit:(0,dist.XI)("onSubmit")})]}),WithQuickSearchAsynchronousSuggestions=()=>{const[searching,setSearching]=(0,react.useState)(!1),[items,setItems]=(0,react.useState)([]),[value,setValue]=(0,react.useState)("");return(0,jsx_runtime.jsx)(src.A.Faceted,{id:"my-faceted-search",children:(0,jsx_runtime.jsx)(src.A.BasicSearch,{badgesDefinitions,callbacks,onSubmit:(0,dist.XI)("onSubmit"),quickSearchInputProps:{value},quickSearchTypeaheadProps:{searching,items,onChange:(_,{value})=>{setValue(value),setSearching(!0),setTimeout(()=>{setItems([{title:"Search in...",suggestions:["in Name","in Email","in Position"].map(column=>value+" "+column)}]),setSearching(!1)},1e3)},debounceTimeout:800}})})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} callbacks={callbacks} onSubmit={action('onSubmit')} quickSearchInputProps={{\n    'data-feature': 'faceted-badge-name'\n  }} />}\n    </FacetedSearch.Faceted>",...Default.parameters?.docs?.source}}},Advanced.parameters={...Advanced.parameters,docs:{...Advanced.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} />\n    </FacetedSearch.Faceted>",...Advanced.parameters?.docs?.source}}},Initialized.parameters={...Initialized.parameters,docs:{...Initialized.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgesFaceted} onSubmit={action('onSubmit')} callbacks={callbacks} />}\n    </FacetedSearch.Faceted>",...Initialized.parameters?.docs?.source}}},InitializedWithABadgeWhichIsNotVisibleInTheList.parameters={...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters,docs:{...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgesWithAll} callbacks={callbacks} onSubmit={action('onSubmit')} />}\n    </FacetedSearch.Faceted>",...InitializedWithABadgeWhichIsNotVisibleInTheList.parameters?.docs?.source}}},Colored.parameters={...Colored.parameters,docs:{...Colored.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={set(cloneDeep(badgesFaceted), 'badges[0].properties.displayType', Badge.TYPES.VALUE)} onSubmit={action('onSubmit')} callbacks={callbacks} />}\n    </FacetedSearch.Faceted>",...Colored.parameters?.docs?.source}}},WithSpecialChars.parameters={...WithSpecialChars.parameters,docs:{...WithSpecialChars.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  const badge = cloneDeep(badgesFaceted.badges[0]);\n  Object.assign(badge.properties, {\n    value: '  text  ',\n    type: 'text',\n    displayType: Badge.TYPES.PATTERN\n  });\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[badge]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...WithSpecialChars.parameters?.docs?.source}}},DatePicker.parameters={...DatePicker.parameters,docs:{...DatePicker.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  const badge = cloneDeep(badgesFaceted.badges[0]);\n  Object.assign(badge.properties, {\n    value: Date.now(),\n    type: 'date'\n  });\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[badge]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...DatePicker.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:"() => {\n  const {\n    t\n  } = useTranslation();\n  const badgesDictionary = createBadgesDict();\n  return <BadgeFacetedProvider value={{}}>\n            <BadgesGenerator badges={[set(cloneDeep(badgesFaceted.badges[0]), 'properties.readOnly', true), set(cloneDeep(badgesFaceted.badges[0]), 'properties.removable', false)]} badgesDictionary={badgesDictionary} getBadgeFromDict={getBadgesFromDict} t={t} />\n        </BadgeFacetedProvider>;\n}",...ReadOnly.parameters?.docs?.source}}},WithExternalState.parameters={...WithExternalState.parameters,docs:{...WithExternalState.parameters?.docs,source:{originalSource:"() => {\n  const [state, setState] = useState(badgesFaceted);\n  const onSubmit = useCallback((_, badges) => setState(previousState => ({\n    ...previousState,\n    badges\n  })), [setState]);\n  return <div>\n            <button onClick={() => setState(badgesFaceted)}>Reset state</button>\n            <FacetedSearch.Faceted id=\"my-faceted-search\">\n                {currentFacetedMode => currentFacetedMode === FacetedSearch.constants.FACETED_MODE.ADVANCED && <FacetedSearch.AdvancedSearch onSubmit={action('onSubmit')} /> || currentFacetedMode === FacetedSearch.constants.FACETED_MODE.BASIC && <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={state} onSubmit={onSubmit} callbacks={callbacks} />}\n            </FacetedSearch.Faceted>\n        </div>;\n}",...WithExternalState.parameters?.docs?.source}}},WithoutLabelOrOperatorButton.parameters={...WithoutLabelOrOperatorButton.parameters,docs:{...WithoutLabelOrOperatorButton.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={set(cloneDeep(badgesFaceted), 'badges[0].properties.label', '')} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...WithoutLabelOrOperatorButton.parameters?.docs?.source}}},BasicSearchWithLotOfBadgeDefinitions.parameters={...BasicSearchWithLotOfBadgeDefinitions.parameters,docs:{...BasicSearchWithLotOfBadgeDefinitions.parameters?.docs,source:{originalSource:"{\n  render: () => <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={lotsOfBadgesDefinitions} onSubmit={action('onSubmit')} callbacks={callbacks} />\n        </FacetedSearch.Faceted>,\n  play: async ({\n    canvasElement\n  }) => {\n    await userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n  }\n}",...BasicSearchWithLotOfBadgeDefinitions.parameters?.docs?.source}}},BasicSearchWithBadgeWithVeryLongName.parameters={...BasicSearchWithBadgeWithVeryLongName.parameters,docs:{...BasicSearchWithBadgeWithVeryLongName.parameters?.docs,source:{originalSource:"{\n  render: () => <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={[badgeWithVeryLongName, badgeConnectionType, badgeName, badgePrice]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n        </FacetedSearch.Faceted>,\n  play: async ({\n    canvasElement\n  }) => {\n    await userEvent.type(within(canvasElement).getByRole('searchbox'), 'lorem ipsum');\n  }\n}",...BasicSearchWithBadgeWithVeryLongName.parameters?.docs?.source}}},BasicSearchWithBadgeWithAllSelector.parameters={...BasicSearchWithBadgeWithAllSelector.parameters,docs:{...BasicSearchWithBadgeWithAllSelector.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeConnectionTypeAllSelector]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithBadgeWithAllSelector.parameters?.docs?.source}}},BasicSearchInABadgeWithALotOfValues.parameters={...BasicSearchInABadgeWithALotOfValues.parameters,docs:{...BasicSearchInABadgeWithALotOfValues.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeEnumWithLotOfValues]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchInABadgeWithALotOfValues.parameters?.docs?.source}}},BasicSearchWithBadgesCategories.parameters={...BasicSearchWithBadgesCategories.parameters,docs:{...BasicSearchWithBadgesCategories.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeConnectionType, badgeName, badgePrice, badgeTags, badgeTextAsCustomAttribute, badgePriceAsCustomAttribute, badgeEnumsAsCustomAttribute, ...times(2, () => badgeTextAsCategory)]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithBadgesCategories.parameters?.docs?.source}}},BasicSearchWithAnEmptyLabelBadge.parameters={...BasicSearchWithAnEmptyLabelBadge.parameters,docs:{...BasicSearchWithAnEmptyLabelBadge.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <FacetedSearch.BasicSearch badgesDefinitions={[badgeName, badgeEmptyLabel]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...BasicSearchWithAnEmptyLabelBadge.parameters?.docs?.source}}},BasicSearchWithSliderPopin.parameters={...BasicSearchWithSliderPopin.parameters,docs:{...BasicSearchWithSliderPopin.parameters?.docs,source:{originalSource:"{\n  render: ({\n    decimal,\n    withIcon\n  }) => {\n    const step = decimal ? 0.01 : 1;\n    const icon = withIcon ? badgeValid.properties.icon : undefined;\n    const overritenProperties = {\n      initialOperatorOpened: false,\n      initialValueOpened: true,\n      step,\n      decimal: true,\n      operator: {\n        label: 'Less than',\n        name: 'LessThan',\n        iconName: 'less-than'\n      },\n      icon,\n      operators: [{\n        label: 'Less than',\n        name: 'LessThan',\n        iconName: 'less-than'\n      }, {\n        label: 'Less than or equal',\n        name: 'LessThanOrEquals',\n        iconName: 'less-than-equal'\n      }]\n    };\n    const badgeFacetedCustom = {\n      badges: [{\n        ...badgeValid,\n        properties: {\n          ...badgeValid.properties,\n          ...overritenProperties\n        }\n      }]\n    };\n    return <FacetedSearch.Faceted id=\"my-faceted-search\">\n                <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} badgesFaceted={badgeFacetedCustom} callbacks={callbacks} onSubmit={action('onSubmit')} />\n            </FacetedSearch.Faceted>;\n  },\n  args: {\n    decimal: true,\n    withIcon: true\n  }\n}",...BasicSearchWithSliderPopin.parameters?.docs?.source}}},WithQuickSearchFilter.parameters={...WithQuickSearchFilter.parameters,docs:{...WithQuickSearchFilter.parameters?.docs,source:{originalSource:"() => <FacetedSearch.Faceted id=\"my-faceted-search\">\n        <p>Quick search will only suggest facets matching input (Connection name, Author)</p>\n        <br />\n        <FacetedSearch.BasicSearch quickSearchFacetsFilter={(term, facets) => facets.filter(facet => facet.properties.label.includes(term))} badgesDefinitions={[badgeAuthor, badgeName, badgeConnectionName]} onSubmit={action('onSubmit')} callbacks={callbacks} />\n    </FacetedSearch.Faceted>",...WithQuickSearchFilter.parameters?.docs?.source}}},WithQuickSearchFilterCustomizableInputTriggerLength.parameters={...WithQuickSearchFilterCustomizableInputTriggerLength.parameters,docs:{...WithQuickSearchFilterCustomizableInputTriggerLength.parameters?.docs,source:{originalSource:"() => {\n  const badgeNameWithLength = {\n    properties: {\n      attribute: 'name',\n      initialOperatorOpened: true,\n      initialValueOpened: false,\n      label: 'Name',\n      operator: {},\n      operators: [],\n      type: 'text',\n      placeholder: 'Enter a dataset name'\n    },\n    metadata: {\n      isAvailableForQuickSearch: true,\n      isAvailableForFacetList: true,\n      badgePerFacet: 'N',\n      entitiesPerBadge: '1',\n      operators: ['containsIgnoreCase', 'notContainsIgnoreCase', 'equals', 'notEquals', 'match a regexp'],\n      'data-feature': 'faceted-badge-name',\n      minLength: 5\n    }\n  };\n  return <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <p>\n                Quick search will trigger after a minimum input length that can be customized based on badge\n                definition\n            </p>\n            <br />\n            <FacetedSearch.BasicSearch badgesDefinitions={[badgeNameWithLength]} callbacks={callbacks} onSubmit={action('onSubmit')} />\n        </FacetedSearch.Faceted>;\n}",...WithQuickSearchFilterCustomizableInputTriggerLength.parameters?.docs?.source}}},WithQuickSearchAsynchronousSuggestions.parameters={...WithQuickSearchAsynchronousSuggestions.parameters,docs:{...WithQuickSearchAsynchronousSuggestions.parameters?.docs,source:{originalSource:"() => {\n  const [searching, setSearching] = useState(false);\n  const [items, setItems] = useState([]);\n  const [value, setValue] = useState('');\n  const onChange = (_, {\n    value\n  }) => {\n    setValue(value);\n    setSearching(true);\n    setTimeout(() => {\n      setItems([{\n        title: 'Search in...',\n        suggestions: ['in Name', 'in Email', 'in Position'].map(column => value + ' ' + column)\n      }]);\n      setSearching(false);\n    }, 1000);\n  };\n  return <FacetedSearch.Faceted id=\"my-faceted-search\">\n            <FacetedSearch.BasicSearch badgesDefinitions={badgesDefinitions} callbacks={callbacks} onSubmit={action('onSubmit')} quickSearchInputProps={{\n      value\n    }} quickSearchTypeaheadProps={{\n      searching,\n      items,\n      onChange,\n      debounceTimeout: 800\n    }} />\n        </FacetedSearch.Faceted>;\n}",...WithQuickSearchAsynchronousSuggestions.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Advanced","Initialized","InitializedWithABadgeWhichIsNotVisibleInTheList","Colored","WithSpecialChars","DatePicker","ReadOnly","WithExternalState","WithoutLabelOrOperatorButton","BasicSearchWithLotOfBadgeDefinitions","BasicSearchWithBadgeWithVeryLongName","BasicSearchWithBadgeWithAllSelector","BasicSearchInABadgeWithALotOfValues","BasicSearchWithBadgesCategories","BasicSearchWithAnEmptyLabelBadge","BasicSearchWithSliderPopin","WithQuickSearchFilter","WithQuickSearchFilterCustomizableInputTriggerLength","WithQuickSearchAsynchronousSuggestions"]},"?c95a":()=>{}}]);