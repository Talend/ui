"use strict";(self.webpackChunk_talend_design_docs=self.webpackChunk_talend_design_docs||[]).push([[275,1393],{"../../node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>DocsRenderer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@storybook/react-dom-shim/dist/react-18.mjs"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs"),defaultComponents={code:_storybook_blocks__WEBPACK_IMPORTED_MODULE_2__.XA,a:_storybook_blocks__WEBPACK_IMPORTED_MODULE_2__.zE,..._storybook_blocks__WEBPACK_IMPORTED_MODULE_2__.Sw},ErrorBoundary=class extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err)}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children)}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=_storybook_blocks__WEBPACK_IMPORTED_MODULE_2__.kQ;return new Promise((resolve,reject)=>{__webpack_require__.e(5231).then(__webpack_require__.bind(__webpack_require__,"../../node_modules/@mdx-js/react/index.js")).then(({MDXProvider})=>(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_1__.d)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXProvider,{components},react__WEBPACK_IMPORTED_MODULE_0__.createElement(TDocs,{context,docsParameter}))),element)).then(()=>resolve())})},this.unmount=element=>{(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_1__.H)(element)}}}},"../design-system/src/stories/form/ToggleSwitch/ToggleSwitch.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>ToggleSwitch});__webpack_require__("../../node_modules/react/index.js");var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),dist=(__webpack_require__("../../node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs"),__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs")),storybook_docs_lib=__webpack_require__("../storybook-docs/lib/index.js"),ToggleSwitch_stories=__webpack_require__("../design-system/src/stories/form/ToggleSwitch/ToggleSwitch.stories.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",h3:"h3",ul:"ul",li:"li"},(0,lib.RP)(),props.components);return storybook_docs_lib.Use||_missingMdxReference("Use",!1),storybook_docs_lib.Use.Do||_missingMdxReference("Use.Do",!0),storybook_docs_lib.Use.Dont||_missingMdxReference("Use.Dont",!0),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:ToggleSwitch_stories}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"toggleswitch",children:"ToggleSwitch"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"ToggleSwitches are a quick way to view and switch between two states or on-off state instantly."}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"zoning",children:"Zoning"}),"\n",(0,jsx_runtime.jsx)(storybook_docs_lib.FigmaImage,{src:"https://www.figma.com/file/qc8oUSyVJM67gSsbTShftt/%F0%9F%93%90-Zoning?node-id=252%3A9",alt:"zoning image for switch"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"style",children:"Style"}),"\n",(0,jsx_runtime.jsx)(storybook_docs_lib.FigmaImage,{src:"https://www.figma.com/file/2crWpyiwuxt1wvjsTYwdB0/ToggleSwitch?node-id=0%3A131",alt:"Mockup of an input ToggleSwitch"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"states",children:"States"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:ToggleSwitch_stories.ToggleSwitchStates}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"inline",children:"Inline"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:ToggleSwitch_stories.ToggleSwitchInline}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"long-content",children:"Long content"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:ToggleSwitch_stories.ToggleSwitchWithLongLabel}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"content",children:"Content"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Labels for switches should give users a strong indication of what they are selecting. Start the label with a verb and say clearly what will happen when the switch is turned on."}),"\n",(0,jsx_runtime.jsxs)(storybook_docs_lib.Use,{children:[(0,jsx_runtime.jsx)(storybook_docs_lib.Use.Do,{children:(0,jsx_runtime.jsxs)("ul",{children:[(0,jsx_runtime.jsx)("li",{children:"Use sentence case in switch labels."}),(0,jsx_runtime.jsx)("li",{children:"Keep labels for switches short and direct."}),(0,jsx_runtime.jsx)("li",{children:(0,jsx_runtime.jsx)(_components.p,{children:"For on/off switches, use the label to describe what the control will do when the switch is\non."})})]})}),(0,jsx_runtime.jsx)(storybook_docs_lib.Use.Dont,{children:(0,jsx_runtime.jsxs)("ul",{children:[(0,jsx_runtime.jsx)("li",{children:"Don't use neutral or ambiguous labels."}),(0,jsx_runtime.jsx)("li",{children:"Don't use title case or all caps in switch labels (except for acronyms)."}),(0,jsx_runtime.jsx)("li",{children:"Don't use punctuations at the end of switch label."})]})})]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"interactions",children:"Interactions"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsx)(_components.li,{children:"The label must always be clickable to enable or disable."}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"controlled-switch",children:"Controlled switch"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:ToggleSwitch_stories.ToggleSwitchControlled}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:ToggleSwitch_stories.ToggleSwitchReactHooksForm}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Press ",(0,jsx_runtime.jsx)("kbd",{children:"TABS"})," to focus on a switch."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Press ",(0,jsx_runtime.jsx)("kbd",{children:"SPACE"})," to toggle the switch between selected and not selected."]})]})}const ToggleSwitch=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)};function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}},"../design-system/src/stories/form/ToggleSwitch/ToggleSwitch.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ToggleSwitchControlled:()=>ToggleSwitchControlled,ToggleSwitchInline:()=>ToggleSwitchInline,ToggleSwitchReactHooksForm:()=>ToggleSwitchReactHooksForm,ToggleSwitchStates:()=>ToggleSwitchStates,ToggleSwitchWithLongLabel:()=>ToggleSwitchWithLongLabel,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../design-system/lib-esm/index.js"),react_hook_form__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react-hook-form/dist/index.esm.mjs"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Form/Fields/ToggleSwitch",component:___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch},ToggleSwitchStates=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.xs,{gap:"M",justify:"stretch",align:"stretch",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch disabled",disabled:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch read-only",readOnly:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked",defaultChecked:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked disabled",defaultChecked:!0,disabled:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{name:"time",label:"ToggleSwitch checked read-only",defaultChecked:!0,readOnly:!0})]}),ToggleSwitchInline=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch inline",isInline:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("span",{children:" "}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"ToggleSwitch inline",isInline:!0,defaultChecked:!0})]}),ToggleSwitchWithLongLabel=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{width:"200px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{placeholder:"Placeholder",name:"time",label:"Label with a lot of content, too much probably, and most certainly enough to generate a line break in this small box."})}),ToggleSwitchControlled=()=>{const{register,watch}=(0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.mN)(),optionA=watch("option-a");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Control switch state",required:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Toggle all",...register("option-a")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Controlled switch",checked:optionA,...register("option-b")})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.Buttons,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.$$,{onClick:()=>{},type:"submit",children:"Submit"})})]})},ToggleSwitchReactHooksForm=()=>{const{register,handleSubmit,watch}=(0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.mN)(),[formData,setFormData]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),watchAllFields=watch();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV,{onSubmit:handleSubmit(setFormData),children:[formData&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.B$,{title:"Form data",description:JSON.stringify(formData,null,2),withBackground:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Enabled",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option a",...register("option-a"),checked:watchAllFields["option-a"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option b",defaultChecked:!0,...register("option-b"),checked:watchAllFields["option-b"]})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Read only",readOnly:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option c",...register("option-c"),checked:watchAllFields["option-c"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option d",defaultChecked:!0,...register("option-d"),checked:watchAllFields["option-d"]})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.lV.Fieldset,{legend:"Disabled",disabled:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option e",disabled:!0,...register("option-e"),checked:watchAllFields["option-e"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.ToggleSwitch,{label:"Option f",defaultChecked:!0,disabled:!0,...register("option-f"),checked:watchAllFields["option-f"]})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.lV.Buttons,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.$$,{onClick:()=>{},type:"submit",children:"Submit"})})]})};ToggleSwitchStates.parameters={...ToggleSwitchStates.parameters,docs:{...ToggleSwitchStates.parameters?.docs,source:{originalSource:'() => <StackVertical gap="M" justify="stretch" align="stretch">\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch" />\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch disabled" disabled />\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch read-only" readOnly />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked" defaultChecked />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked disabled" defaultChecked disabled />\n        <Form.ToggleSwitch name="time" label="ToggleSwitch checked read-only" defaultChecked readOnly />\n    </StackVertical>',...ToggleSwitchStates.parameters?.docs?.source}}},ToggleSwitchInline.parameters={...ToggleSwitchInline.parameters,docs:{...ToggleSwitchInline.parameters?.docs,source:{originalSource:'() => <>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch inline" isInline />\n        <span> </span>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="ToggleSwitch inline" isInline defaultChecked />\n    </>',...ToggleSwitchInline.parameters?.docs?.source}}},ToggleSwitchWithLongLabel.parameters={...ToggleSwitchWithLongLabel.parameters,docs:{...ToggleSwitchWithLongLabel.parameters?.docs,source:{originalSource:'() => <div style={{\n  width: \'200px\'\n}}>\n        <Form.ToggleSwitch placeholder="Placeholder" name="time" label="Label with a lot of content, too much probably, and most certainly enough to generate a line break in this small box." />\n    </div>',...ToggleSwitchWithLongLabel.parameters?.docs?.source}}},ToggleSwitchControlled.parameters={...ToggleSwitchControlled.parameters,docs:{...ToggleSwitchControlled.parameters?.docs,source:{originalSource:'() => {\n  const {\n    register,\n    watch\n  } = useForm();\n  const optionA = watch(\'option-a\');\n  return <Form>\n            <Form.Fieldset legend="Control switch state" required>\n                <Form.ToggleSwitch label="Toggle all" {...register(\'option-a\')} />\n                <Form.ToggleSwitch label="Controlled switch" checked={optionA} {...register(\'option-b\')} />\n            </Form.Fieldset>\n            <Form.Buttons>\n                <ButtonPrimary onClick={() => {}} type="submit">\n                    Submit\n                </ButtonPrimary>\n            </Form.Buttons>\n        </Form>;\n}',...ToggleSwitchControlled.parameters?.docs?.source}}},ToggleSwitchReactHooksForm.parameters={...ToggleSwitchReactHooksForm.parameters,docs:{...ToggleSwitchReactHooksForm.parameters?.docs,source:{originalSource:"() => {\n  const {\n    register,\n    handleSubmit,\n    watch\n  } = useForm<Inputs>();\n  const [formData, setFormData] = useState<null | Inputs>();\n  const watchAllFields = watch();\n  return <Form onSubmit={handleSubmit(setFormData)}>\n            {formData && <InlineMessageInformation title={'Form data'} description={JSON.stringify(formData, null, 2)} withBackground />}\n            <Form.Fieldset legend=\"Enabled\">\n                <Form.ToggleSwitch label=\"Option a\" {...register('option-a')} checked={watchAllFields['option-a']} />\n                <Form.ToggleSwitch label=\"Option b\" defaultChecked {...register('option-b')} checked={watchAllFields['option-b']} />\n            </Form.Fieldset>\n            <Form.Fieldset legend=\"Read only\" readOnly>\n                <Form.ToggleSwitch label=\"Option c\" {...register('option-c')} checked={watchAllFields['option-c']} />\n                <Form.ToggleSwitch label=\"Option d\" defaultChecked {...register('option-d')} checked={watchAllFields['option-d']} />\n            </Form.Fieldset>\n            <Form.Fieldset legend=\"Disabled\" disabled>\n                <Form.ToggleSwitch label=\"Option e\" disabled {...register('option-e')} checked={watchAllFields['option-e']} />\n                <Form.ToggleSwitch label=\"Option f\" defaultChecked disabled {...register('option-f')} checked={watchAllFields['option-f']} />\n            </Form.Fieldset>\n            <Form.Buttons>\n                <ButtonPrimary onClick={() => {}} type=\"submit\">\n                    Submit\n                </ButtonPrimary>\n            </Form.Buttons>\n        </Form>;\n}",...ToggleSwitchReactHooksForm.parameters?.docs?.source}}};const __namedExportsOrder=["ToggleSwitchStates","ToggleSwitchInline","ToggleSwitchWithLongLabel","ToggleSwitchControlled","ToggleSwitchReactHooksForm"]}}]);